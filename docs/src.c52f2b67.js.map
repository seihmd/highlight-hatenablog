{"version":3,"sources":["src/FileTypeSrc.js","src/Theme.js","node_modules/vue-color/dist/vue-color.min.js","node_modules/vue-js-modal/dist/index.js","src/index.js"],"names":["actionscript","ada","apache","applescript","autohotkey","autoit","awk","basic","brainfuck","clean","clojure","cmake","cpp","crystal","cs","csp","css","d","dart","diff","django","dns","elixir","erlang","fortran","fsharp","go","groovy","haml","haskell","haxe","java","javascript","julia","kotlin","ldif","lisp","lsl","lua","markdown","matlab","maxima","mel","nginx","nsis","ocaml","perl","pf","php","processing","prolog","python","r","rib","ruby","rust","sas","scala","scheme","scilab","sml","sql","stata","swift","tcl","tex","typescript","verilog","vhdl","vim","xml","xquery","yaml","default","preCodeBgcolor","hex","preCodeColor","synCommentColor","synConstantColor","synIdentifierColor","synPreProcColor","synSpecialColor","synStatementColor","synTypeColor","tomorrow","monokai","solarized","updateCss","targetClass","prop","val","slice","call","document","styleSheets","cssRules","some","cssRule","selectorText","style","Vue","use","VModal","dynamic","injectModalsContainer","app","components","Chrome","el","data","langs","Object","keys","fileTypeSrc","themes","colorTheme","selectedLang","selectedTheme","colorSetting","visibleColorPicker","methods","showModal","$modal","show","template","props","cssForHighlight","copyCSS","height","getElementById","select","execCommand","copied","computed","srcHtml","colorSettings","name","watch","handler","oldVal","newSetting","assign","immediate"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACXA,aACI,ilDACJC,IACI,mkDACJC,OACI,6iDACJC,YACI,qkCACJC,WACI,ikDACJC,OACI,4rFACJC,IACI,ymDACJC,MACI,82EACJC,UACI,glLACJC,MACI,q8DACJC,QACI,kuDACJC,MACI,+sDACJC,IACI,giCACJC,QACI,wlEACJC,GACI,q+BACJC,IACI,y7BACJC,IACI,opDACJC,EACI,+4FACJC,KACI,89FACJC,KACI,i0CACJC,OACI,s/CACJC,IACI,+yIACJC,OACI,k2IACJC,OACI,4lNACJC,QACI,qhDACJC,OACI,09LACJC,GACI,m1BACJC,OACI,g8GACJC,KACI,kqDACJC,QACI,6lFACJC,KACI,80hBACJC,KACI,0uCACJC,WACI,0yCACJC,MACI,s7KACJC,OACI,iaACJC,KACI,2kEACJC,KACI,ihIACJC,IACI,y8BACJC,IACI,g6DACJC,SACI,isCACJC,OACI,2yMACJC,OACI,wyOACJC,IACI,gjDACJC,MACI,wsGACJC,KACI,yvEACJC,MACI,glGACJC,KACI,27HACJC,GACI,2yEACJC,IACI,y+CACJC,WACI,6lCACJC,OACI,mkBACJC,OACI,mlCACJC,EACI,8qRACJC,IACI,ypFACJC,KACI,o6BACJC,KACI,u3CACJC,IACI,u3CACJC,MACI,kgHACJC,OACI,i6HACJC,OACI,upGACJC,IACI,k3FACJC,IACI,y1CACJC,MACI,ozGACJC,MACI,8/CACJC,IACI,q3FACJC,IACI,w0FACJC,WACI,moDACJC,QACI,s7KACJC,KACI,ylLACJC,IACI,y+DACJC,IACI,qsCACJC,OACI,mwHACJC,KACI,wrFAlJO,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACbC,QAAS,CACPC,eAAgB,CAAEC,IAAK,WACvBC,aAAc,CAAED,IAAK,WACrBE,gBAAiB,CAAEF,IAAK,WACxBG,iBAA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AA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,MAAA,CAAA,OAAA,GAAA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,MAAA,CAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,SAAA,KAAA,EAAA,EAAA,GAAA,SAAA,KAAA,EAAA,EAAA,GAAA,SAAA,MAAA,OAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,SAAA,KAAA,EAAA,EAAA,GAAA,SAAA,KAAA,EAAA,EAAA,GAAA,SAAA,MAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,QAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GA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KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,UAAA,KAAA,WAAA,EAAA,CAAA,GAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,UAAA,IAAA,WAAA,EAAA,CAAA,GAAA,UAAA,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","file":"src.c52f2b67.js","sourceRoot":"..","sourcesContent":["export default {\n    actionscript:\n        '<span class=\"synIdentifier\">package</span> org.example.dummy {<br>    <span class=\"synIdentifier\">import</span> org.dummy.*;<br><br>    <span class=\"synComment\">/*define package inline interface*/</span><br>    <span class=\"synIdentifier\">public</span> <span class=\"synIdentifier\">interface</span> IFooBarzable {<br>        <span class=\"synIdentifier\">public</span> <span class=\"synIdentifier\">function</span> foo(... pairs):<span class=\"synStatement\">Array</span>;<br>    }<br><br>    <span class=\"synIdentifier\">public</span> <span class=\"synIdentifier\">class</span> FooBar <span class=\"synIdentifier\">implements</span> IFooBarzable {<br>        <span class=\"synIdentifier\">static</span> <span class=\"synIdentifier\">private</span> <span class=\"synStatement\">var</span> cnt:<span class=\"synConstant\">uint</span> = <span class=\"synConstant\">0</span>;<br>        <span class=\"synIdentifier\">private</span> <span class=\"synStatement\">var</span> bar:<span class=\"synStatement\">String</span>;<br><br>        <span class=\"synComment\">//constructor</span><br>        <span class=\"synIdentifier\">public</span> <span class=\"synIdentifier\">function</span> TestBar(bar:<span class=\"synStatement\">String</span>):<span class=\"synConstant\">void</span> {<br>            bar = bar;<br>            ++cnt;<br>        }<br><br>        <span class=\"synIdentifier\">public</span> <span class=\"synIdentifier\">function</span> foo(... pairs):<span class=\"synStatement\">Array</span> {<br>            pairs.<span class=\"synType\">push</span>(bar);<br>            <span class=\"synStatement\">return</span> pairs;<br>        }<br>    }<br>}<br>',\n    ada:\n        '<span class=\"synStatement\">package</span> <span class=\"synStatement\">body</span> Sqlite<span class=\"synSpecial\">.</span>Simple <span class=\"synStatement\">is</span><br><br>      Foo <span class=\"synSpecial\">:</span> int <span class=\"synSpecial\">:=</span> int<span class=\"synSpecial\">\\'Size;</span><br>      Bar <span class=\"synSpecial\">:</span> int <span class=\"synSpecial\">:=</span> long<span class=\"synSpecial\">\\'Size;</span><br><br>      Error_Message_C <span class=\"synSpecial\">:</span> chars_ptr <span class=\"synSpecial\">:=</span> Sqlite_Errstr <span class=\"synSpecial\">(</span>Error<span class=\"synSpecial\">);</span><br>      Error_Message <span class=\"synSpecial\">:</span> String <span class=\"synSpecial\">:=</span> Null_Ignore_Value <span class=\"synSpecial\">(</span>Error_Message_C<span class=\"synSpecial\">);</span><br>   <span class=\"synStatement\">begin</span><br><br>      Named <span class=\"synSpecial\">:</span> <span class=\"synStatement\">for</span> Index <span class=\"synStatement\">in</span> Foo<span class=\"synSpecial\">..</span>Bar <span class=\"synStatement\">loop</span><br>          Put <span class=\"synSpecial\">(</span><span class=\"synConstant\">\"Hi[]{}\"</span><span class=\"synSpecial\">);</span><br>      <span class=\"synStatement\">end loop</span> Named<span class=\"synSpecial\">;</span><br><br>      Foo <span class=\"synSpecial\">:=</span> Bar<span class=\"synSpecial\">;</span><br>   <span class=\"synStatement\">end</span> Message<span class=\"synSpecial\">;</span><br><br><span class=\"synStatement\">end</span> Sqlite<span class=\"synSpecial\">.</span>Simple<span class=\"synSpecial\">;</span><br>',\n    apache:\n        '<span class=\"synComment\"># rewrite`s rules for wordpress pretty url</span><br><span class=\"synIdentifier\">LoadModule</span> rewrite_module  modules/mod_rewrite.so<br><span class=\"synIdentifier\">RewriteCond</span> %{REQUEST_FILENAME} !-f<br><span class=\"synIdentifier\">RewriteCond</span> %{REQUEST_FILENAME} !-d<br><span class=\"synIdentifier\">RewriteRule</span> . index.php [NC,L]<br><br><span class=\"synIdentifier\">ExpiresActive</span> <span class=\"synConstant\">On</span><br><span class=\"synIdentifier\">ExpiresByType</span> application/x-javascript  <span class=\"synConstant\">\"access plus 1 days\"</span><br><br><span class=\"synSpecial\">Order </span><span class=\"synConstant\">Deny</span><span class=\"synSpecial\">,</span><span class=\"synConstant\">Allow</span><br><span class=\"synPreProc\">Allow from </span><span class=\"synIdentifier\">All</span><br><br><span class=\"synStatement\">&lt;Location</span><span class=\"synConstant\"> /maps/</span><span class=\"synStatement\">&gt;</span><br>  <span class=\"synIdentifier\">RewriteMap</span> <span class=\"synConstant\">map</span> txt:<span class=\"synConstant\">map</span>.txt<br>  <span class=\"synIdentifier\">RewriteMap</span> lower int:tolower<br>  <span class=\"synIdentifier\">RewriteCond</span> %{REQUEST_URI} ^/([^/.]+)\\\\.html$ [NC]<br>  <span class=\"synIdentifier\">RewriteCond</span> ${<span class=\"synConstant\">map</span>:${lower:%1}|NOT_FOUND} !NOT_FOUND<br>  <span class=\"synIdentifier\">RewriteRule</span> .? /index.php?q=${<span class=\"synConstant\">map</span>:${lower:%1}} [NC,L]<br><span class=\"synStatement\">&lt;/Location&gt;</span><br>',\n    applescript:\n        '<span class=\"synStatement\">repeat</span> <span class=\"synConstant\">5</span> <span class=\"synStatement\">times</span><br>    <span class=\"synStatement\">if</span> foo <span class=\"synStatement\">is greater than</span> bar <span class=\"synStatement\">then</span><br>        display dialog <span class=\"synConstant\">\"Hello there\"</span><br>    <span class=\"synStatement\">else</span><br>        beep<br>    <span class=\"synStatement\">end</span> <span class=\"synStatement\">if</span><br><span class=\"synStatement\">end</span> <span class=\"synStatement\">repeat</span><br><br><span class=\"synComment\">(* comment (*nested comment*)</span> <span class=\"synStatement\">*</span>)<br><span class=\"synStatement\">on</span> do_something(s, y)<br>    <span class=\"synStatement\">return</span> {s <span class=\"synStatement\">+</span> <span class=\"synConstant\">pi</span>, y <span class=\"synStatement\">mod</span> <span class=\"synConstant\">4</span>}<br><span class=\"synStatement\">end</span> do_something<br><br>do shell <span class=\"synStatement\">script</span> <span class=\"synConstant\">\"/bin/echo \\'hello\\'\"</span><br>',\n    autohotkey:\n        '<span class=\"synComment\">; hotkeys and hotstrings</span><br><span class=\"synPreProc\">#</span>a::<span class=\"synStatement\">WinSet</span>, AlwaysOnTop, Toggle, A<br><span class=\"synPreProc\">#</span>Space::<br>  <span class=\"synStatement\">MsgBox</span>, Percent sign (<span class=\"synSpecial\">`%</span>) need to be escaped.<br>  <span class=\"synStatement\">Run</span> <span class=\"synConstant\">\"C:\\\\Program Files\\\\some\\\\program.exe\"</span><br>  <span class=\"synStatement\">Gosub</span>, label1<br><span class=\"synStatement\">return</span><br><span class=\"synSpecial\">::</span><span class=\"synType\">btw</span><span class=\"synSpecial\">::</span>by the way<br><span class=\"synComment\">; volume</span><br><span class=\"synPreProc\">#</span>Numpad8::<span class=\"synStatement\">Send</span> {Volume_Up}<br><span class=\"synPreProc\">#</span>Numpad5::<span class=\"synStatement\">Send</span> {Volume_Mute}<br><span class=\"synPreProc\">#</span>Numpad2::<span class=\"synStatement\">Send</span> {Volume_Down}<br><br>label1:<br>  <span class=\"synStatement\">if</span> (<span class=\"synPreProc\">Clipboard</span> = <span class=\"synConstant\">\"\"</span>)<br>  {<br>    <span class=\"synStatement\">MsgBox</span>, , <span class=\"synPreProc\">Clipboard</span>, Empty!<br>  }<br>  <span class=\"synStatement\">else</span><br>  {<br>    <span class=\"synStatement\">StringReplace</span>, temp, <span class=\"synPreProc\">Clipboard</span>, old, new, All<br>    <span class=\"synStatement\">MsgBox</span>, , <span class=\"synPreProc\">Clipboard</span>, <span class=\"synIdentifier\">%temp%</span><br>  }<br><span class=\"synStatement\">return</span><br>',\n    autoit:\n        '<span class=\"synPreProc\">#NoTrayIcon</span><br>#AutoIt3Wrapper_Run_Tidy<span class=\"synStatement\">=</span>Y<br><span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;Misc.au3&gt;</span><br><br><span class=\"synStatement\">_Singleton</span><span class=\"synComment\">(</span><span class=\"synType\">@ScriptName</span><span class=\"synComment\">)</span> <span class=\"synComment\">; Allow only one instance</span><br>example<span class=\"synComment\">(</span><span class=\"synConstant\">0</span><span class=\"synComment\">,</span> <span class=\"synConstant\">10</span><span class=\"synComment\">)</span><br><br><span class=\"synStatement\">Func</span> example<span class=\"synComment\">(</span><span class=\"synStatement\">$</span><span class=\"synIdentifier\">min</span><span class=\"synComment\">,</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">max</span><span class=\"synComment\">)</span><br>    <span class=\"synStatement\">For</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">i</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">min</span> <span class=\"synStatement\">To</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">max</span><br>        <span class=\"synStatement\">If</span> <span class=\"synStatement\">Mod</span><span class=\"synComment\">(</span><span class=\"synStatement\">$</span><span class=\"synIdentifier\">i</span><span class=\"synComment\">,</span> <span class=\"synConstant\">2</span><span class=\"synComment\">)</span> <span class=\"synStatement\">==</span> <span class=\"synConstant\">0</span> <span class=\"synStatement\">Then</span><br>            <span class=\"synStatement\">MsgBox</span><span class=\"synComment\">(</span><span class=\"synConstant\">64</span><span class=\"synComment\">,</span> <span class=\"synConstant\">\"Message\"</span><span class=\"synComment\">,</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">i</span> <span class=\"synStatement\">&amp;</span> <span class=\"synConstant\">\\' is even number!\\'</span><span class=\"synComment\">)</span><br>        <span class=\"synStatement\">Else</span><br>            <span class=\"synStatement\">MsgBox</span><span class=\"synComment\">(</span><span class=\"synConstant\">64</span><span class=\"synComment\">,</span> <span class=\"synConstant\">\"Message\"</span><span class=\"synComment\">,</span> <span class=\"synStatement\">$</span><span class=\"synIdentifier\">i</span> <span class=\"synStatement\">&amp;</span> <span class=\"synConstant\">\\' is odd number!\\'</span><span class=\"synComment\">)</span><br>        <span class=\"synStatement\">EndIf</span><br>    <span class=\"synStatement\">Next</span><br><span class=\"synStatement\">EndFunc</span>   <span class=\"synComment\">;==&gt;example</span><br>',\n    awk:\n        '<span class=\"synSpecial\">BEGIN</span> {<br>  POPService  = <span class=\"synConstant\">\"/inet/tcp/0/emailhost/pop3\"</span><br>  <span class=\"synSpecial\">RS</span> = <span class=\"synSpecial\">ORS</span> = <span class=\"synConstant\">\"</span><span class=\"synSpecial\">\\\\r<br></span><span class=\"synConstant\">\"</span><br>  <span class=\"synStatement\">print</span> <span class=\"synConstant\">\"user name\"</span>            |&amp; POPService<br>  POPService                    |&amp; <span class=\"synStatement\">getline</span><br>  <span class=\"synStatement\">print</span> <span class=\"synConstant\">\"pass password\"</span>         |&amp; POPService<br>  POPService                    |&amp; <span class=\"synStatement\">getline</span><br>  <span class=\"synStatement\">print</span> <span class=\"synConstant\">\"retr 1\"</span>                |&amp; POPService<br>  POPService                    |&amp; <span class=\"synStatement\">getline</span><br>  <span class=\"synStatement\">if</span> (<span class=\"synSpecial\">$1</span> != <span class=\"synConstant\">\"+OK\"</span>) <span class=\"synStatement\">exit</span><br>  <span class=\"synStatement\">print</span> <span class=\"synConstant\">\"quit\"</span>                  |&amp; POPService<br>  <span class=\"synSpecial\">RS</span> = <span class=\"synConstant\">\"</span><span class=\"synSpecial\">\\\\r<br>\\\\\\\\</span><span class=\"synConstant\">.</span><span class=\"synSpecial\">\\\\r<br></span><span class=\"synConstant\">\"</span><br>  POPService |&amp; <span class=\"synStatement\">getline</span><br>  <span class=\"synStatement\">print</span> <span class=\"synSpecial\">$0</span><br>  <span class=\"synIdentifier\">close</span>(POPService)<br>}<br>',\n    basic:\n        '<span class=\"synComment\">10 </span><span class=\"synStatement\">CLS</span><br><span class=\"synComment\">20 </span><span class=\"synStatement\">FOR</span> I = <span class=\"synConstant\">0</span> TO <span class=\"synConstant\">15</span><br><span class=\"synComment\">22 </span><span class=\"synStatement\">FOR</span> J = <span class=\"synConstant\">0</span> TO <span class=\"synConstant\">7</span><br><span class=\"synComment\">30 </span><span class=\"synStatement\">COLOR</span> I,J<br><span class=\"synComment\">40 </span><span class=\"synStatement\">PRINT</span> <span class=\"synConstant\">\" ** \"</span>;<br><span class=\"synComment\">45 </span><span class=\"synStatement\">NEXT</span> J<br><span class=\"synComment\">46 </span><span class=\"synStatement\">COLOR</span> I,<span class=\"synConstant\">0</span><br><span class=\"synComment\">47 </span><span class=\"synStatement\">GOSUB</span> <span class=\"synConstant\">100</span><br><span class=\"synComment\">48 </span><span class=\"synStatement\">PRINT</span><br><span class=\"synComment\">50 </span><span class=\"synStatement\">NEXT</span> I<br><span class=\"synComment\">60 </span><span class=\"synStatement\">COLOR</span> <span class=\"synConstant\">15</span>,<span class=\"synConstant\">0</span><br><span class=\"synComment\">99 </span><span class=\"synStatement\">END</span><br><span class=\"synComment\">100 </span><span class=\"synStatement\">FOR</span> T = <span class=\"synConstant\">65</span> TO <span class=\"synConstant\">90</span><br><span class=\"synComment\">101 </span><span class=\"synStatement\">PRINT</span> CHR<span class=\"synType\">$</span>(T);<br><span class=\"synComment\">102 </span><span class=\"synStatement\">NEXT</span> T<br><span class=\"synComment\">103 </span><span class=\"synStatement\">RETURN</span><br><span class=\"synComment\">200 REM Data types test</span><br><span class=\"synComment\">201 </span>TOTAL<span class=\"synType\">#</span> = <span class=\"synConstant\">3.30</span>#        \\'Double precision variable<br><span class=\"synComment\">202 </span>BALANCE<span class=\"synType\">!</span> = <span class=\"synConstant\">3</span>!     \\'Single precision variable<br><span class=\"synComment\">203 </span>B2<span class=\"synType\">!</span> = 12e5         \\'<span class=\"synConstant\">120000</span><br><span class=\"synComment\">204 </span>ITEMS<span class=\"synType\">%</span> = <span class=\"synConstant\">10</span>           \\'Integer variable<br><span class=\"synComment\">205 </span>HEXTEST = &amp;H12DB    \\'Hex value<br>',\n    brainfuck:\n        '<span class=\"synIdentifier\">++++++++++</span><br><span class=\"synStatement\">[</span><span class=\"synComment\"> 3*10 and 10*10</span><br><span class=\"synComment\">  </span><span class=\"synIdentifier\">-</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++++++</span><span class=\"synType\">&lt;&lt;</span><br><span class=\"synStatement\">]</span><span class=\"synType\">&gt;&gt;</span><br><span class=\"synStatement\">[</span><span class=\"synComment\"> filling cells</span><br><span class=\"synComment\">  </span><span class=\"synIdentifier\">-</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synStatement\">[</span><span class=\"synType\">&lt;</span><span class=\"synComment\">/</span><span class=\"synStatement\">]</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">[</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">]</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">[</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">]</span><span class=\"synType\">&gt;&gt;</span><br><span class=\"synStatement\">]</span><span class=\"synType\">&lt;</span><br><span class=\"synIdentifier\">+++++++++</span><span class=\"synType\">&lt;&lt;</span><br><span class=\"synStatement\">[</span><span class=\"synComment\"> rough codes correction loop</span><br><span class=\"synComment\">  </span><span class=\"synIdentifier\">-</span><span class=\"synType\">&gt;&gt;&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+</span><span class=\"synStatement\">[</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">]</span><span class=\"synType\">&lt;</span><br><span class=\"synStatement\">]</span><br><span class=\"synComment\">more accurate сodes correction</span><br><span class=\"synType\">&gt;&gt;&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><br><span class=\"synIdentifier\">--</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">------</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">---</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">------</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++</span><span class=\"synType\">&gt;</span><br><span class=\"synIdentifier\">++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">++++++++++++</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">------</span><span class=\"synType\">&gt;</span><span class=\"synIdentifier\">+++</span><br><span class=\"synComment\">rewind and output</span><br><span class=\"synStatement\">[</span><span class=\"synType\">&lt;</span><span class=\"synStatement\">]</span><span class=\"synType\">&gt;</span><span class=\"synStatement\">[</span><span class=\"synPreProc\">.</span><span class=\"synType\">&gt;</span><span class=\"synStatement\">]</span><br>',\n    clean:\n        '<span class=\"synPreProc\">module</span> fsieve<br><br><span class=\"synPreProc\">import</span> StdClass; // RWS<br><span class=\"synPreProc\">import</span> StdInt, StdReal<br><br>NrOfPrimes :== <span class=\"synConstant\">3000</span><br><br>primes :: <span class=\"synSpecial\">[</span><span class=\"synType\">Int</span><span class=\"synSpecial\">]</span><br>primes = pr <span class=\"synStatement\">where</span> pr = <span class=\"synSpecial\">[</span><span class=\"synConstant\">5</span><span class=\"synSpecial\"> : sieve </span><span class=\"synConstant\">7</span><span class=\"synSpecial\"> </span><span class=\"synConstant\">4</span><span class=\"synSpecial\"> pr]</span><br><br><span class=\"synType\">sieve :: Int !Int [Int] -&gt; [Int]</span><br>sieve g i prs<br>| isPrime prs g (toInt (sqrt (toReal g))) = <span class=\"synSpecial\">[g : sieve` g i prs]</span><br>| otherwise                               = sieve (g + i) (<span class=\"synConstant\">6</span> - i) prs<br><br><span class=\"synType\">sieve` :: Int Int [Int] -&gt; [Int]</span><br>sieve` g i prs = sieve (g + i) (<span class=\"synConstant\">6</span> - i) prs<br><br><span class=\"synType\">isPrime :: [Int] !Int Int -&gt; Bool</span><br>isPrime <span class=\"synSpecial\">[f:r]</span> pr bd<br>| f&gt;bd        =  <span class=\"synConstant\">True</span><br>| pr rem f==<span class=\"synConstant\">0</span> =  <span class=\"synConstant\">False</span><br>| otherwise   =  isPrime r pr bd<br><br><span class=\"synType\">select :: [x] Int -&gt; x</span><br>select <span class=\"synSpecial\">[f:r]</span> <span class=\"synConstant\">1</span> = f<br>select <span class=\"synSpecial\">[f:r]</span> n = select r (n - <span class=\"synConstant\">1</span>)<br><br><span class=\"synSpecial\">Start</span> :: <span class=\"synType\">Int</span><br><span class=\"synSpecial\">Start</span> = select <span class=\"synSpecial\">[</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">, </span><span class=\"synConstant\">3</span><span class=\"synSpecial\"> : primes]</span> NrOfPrimes<br>',\n    clojure:\n        '<span class=\"synSpecial\">(def</span> <span class=\"synSpecial\">^</span>:dynamic <span class=\"synIdentifier\">chunk</span>-size <span class=\"synConstant\">17</span><span class=\"synSpecial\">)</span><br><br><span class=\"synSpecial\">(</span><span class=\"synPreProc\">defn</span> <span class=\"synIdentifier\">next</span>-chunk <span class=\"synSpecial\">[</span>rdr<span class=\"synSpecial\">]</span><br>  <span class=\"synSpecial\">(let</span> <span class=\"synSpecial\">[</span>buf <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">char</span>-array <span class=\"synIdentifier\">chunk</span>-size<span class=\"synSpecial\">)</span><br>        s <span class=\"synSpecial\">(</span>.read rdr buf<span class=\"synSpecial\">)]</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">when</span> <span class=\"synSpecial\">(</span>pos? s<span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">(</span>java.nio.CharBuffer/wrap buf <span class=\"synConstant\">0</span> s<span class=\"synSpecial\">))))</span><br><br><span class=\"synSpecial\">(</span><span class=\"synPreProc\">defn</span> <span class=\"synIdentifier\">chunk</span>-seq <span class=\"synSpecial\">[</span>rdr<span class=\"synSpecial\">]</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">when</span>-let <span class=\"synSpecial\">[</span><span class=\"synIdentifier\">chunk</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">next</span>-chunk rdr<span class=\"synSpecial\">)]</span><br>    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synIdentifier\">chunk</span> <span class=\"synSpecial\">(</span>lazy-seq <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">chunk</span>-seq rdr<span class=\"synSpecial\">)))))</span><br>',\n    cmake:\n        '<span class=\"synStatement\">cmake_minimum_required</span><span class=\"synIdentifier\">(VERSION 2.8.8)</span><br><span class=\"synStatement\">project</span><span class=\"synIdentifier\">(cmake_example)</span><br><br><span class=\"synComment\"># Show message on Linux platform</span><br><span class=\"synStatement\">if</span> <span class=\"synIdentifier\">(</span><span class=\"synType\">${CMAKE_SYSTEM_NAME}</span><span class=\"synIdentifier\"> </span><span class=\"synStatement\">MATCHES</span><span class=\"synIdentifier\"> Linux)</span><br>    <span class=\"synStatement\">message</span><span class=\"synIdentifier\">(</span><span class=\"synConstant\">\"Good choice, bro!\"</span><span class=\"synIdentifier\">)</span><br><span class=\"synStatement\">endif</span><span class=\"synIdentifier\">()</span><br><br><span class=\"synComment\"># Tell CMake to run moc when necessary:</span><br><span class=\"synStatement\">set</span><span class=\"synIdentifier\">(CMAKE_AUTOMOC </span><span class=\"synStatement\">ON</span><span class=\"synIdentifier\">)</span><br><span class=\"synComment\"># As moc files are generated in the binary dir,</span><br><span class=\"synComment\"># tell CMake to always look for includes there:</span><br><span class=\"synStatement\">set</span><span class=\"synIdentifier\">(CMAKE_INCLUDE_CURRENT_DIR </span><span class=\"synStatement\">ON</span><span class=\"synIdentifier\">)</span><br><br><span class=\"synComment\"># Widgets finds its own dependencies.</span><br><span class=\"synStatement\">find_package</span><span class=\"synIdentifier\">(Qt5Widgets REQUIRED)</span><br><br><span class=\"synStatement\">add_executable</span><span class=\"synIdentifier\">(myproject main.cpp mainwindow.cpp)</span><br>qt5_use_modules<span class=\"synIdentifier\">(myproject Widgets)</span><br>',\n    cpp:\n        '<span class=\"synPreProc\">#include </span><span class=\"synConstant\">&lt;iostream&gt;</span><br><br><span class=\"synType\">int</span> main(<span class=\"synType\">int</span> argc, <span class=\"synType\">char</span> *argv[]) {<br><br>  <span class=\"synComment\">/* An annoying \"Hello World\" example */</span><br>  <span class=\"synStatement\">for</span> (<span class=\"synType\">auto</span> i = <span class=\"synConstant\">0</span>; i &lt; <span class=\"synConstant\">0xFFFF</span>; i++)<br>    cout &lt;&lt; <span class=\"synConstant\">\"Hello, World!\"</span> &lt;&lt; endl;<br><br>  <span class=\"synType\">char</span> c = <span class=\"synSpecial\">\\'<br>\\'</span>;<br>  unordered_map &lt;string, vector&lt;string&gt; &gt; m;<br>  m[<span class=\"synConstant\">\"key\"</span>] = <span class=\"synConstant\">\"</span><span class=\"synSpecial\">\\\\\\\\\\\\\\\\</span><span class=\"synConstant\">\"</span>; <span class=\"synComment\">// this is an error</span><br><br>  <span class=\"synStatement\">return</span> -<span class=\"synConstant\">2e3</span> + <span class=\"synConstant\">12l</span>;<br>}<br>',\n    crystal:\n        '<span class=\"synPreProc\">class</span> <span class=\"synType\">Person</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">initialize</span>(<span class=\"synIdentifier\">@name</span> : <span class=\"synType\">String</span>)<br>  <span class=\"synPreProc\">end</span><br><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">greet</span><br>    puts <span class=\"synSpecial\">\"</span><span class=\"synConstant\">Hi, I\\'m </span><span class=\"synSpecial\">#{</span><span class=\"synIdentifier\">@name</span><span class=\"synSpecial\">}\"</span><br>  <span class=\"synPreProc\">end</span><br><span class=\"synPreProc\">end</span><br><br><span class=\"synPreProc\">class</span> <span class=\"synType\">Employee</span> &lt; <span class=\"synType\">Person</span><br><span class=\"synPreProc\">end</span><br><br>employee = <span class=\"synType\">Employee</span>.new <span class=\"synSpecial\">\"</span><span class=\"synConstant\">John</span><span class=\"synSpecial\">\"</span><br>employee.greet         <span class=\"synComment\"># =&gt; \"Hi, I\\'m John\"</span><br>employee.is_a?(<span class=\"synType\">Person</span>) <span class=\"synComment\"># =&gt; true</span><br><br><span class=\"synPreProc\">@[</span><span class=\"synType\">Link</span>(<span class=\"synSpecial\">\"</span><span class=\"synConstant\">m</span><span class=\"synSpecial\">\"</span>)<span class=\"synPreProc\">]</span><br><span class=\"synPreProc\">lib</span> <span class=\"synType\">C</span><br>  <span class=\"synComment\"># In C: double cos(double x)</span><br>  <span class=\"synPreProc\">fun</span> <span class=\"synIdentifier\">cos</span>(<span class=\"synIdentifier\">value</span> : <span class=\"synType\">Float64</span>) : <span class=\"synType\">Float64</span><br><span class=\"synPreProc\">end</span><br><br><span class=\"synType\">C</span>.cos(<span class=\"synConstant\">1.5_f64</span>) <span class=\"synComment\"># =&gt; 0.0707372</span><br><br>s = uninitialized <span class=\"synType\">String</span><br>s = &lt;&lt;-<span class=\"synSpecial\">\\'STR\\'</span><br><span class=\"synConstant\">\\\\hello\\\\world</span><br><span class=\"synConstant\">\\\\hello\\\\world</span><br><span class=\"synSpecial\">STR</span><br>',\n    cs:\n        '<span class=\"synStatement\">using</span> System.IO.Compression;<br><br>#pragma warning disable <span class=\"synConstant\">414</span>, <span class=\"synConstant\">3021</span><br><br><span class=\"synType\">namespace</span> MyApplication<br>{<br>    [Obsolete(<span class=\"synConstant\">\"...\"</span>)]<br>    <span class=\"synType\">class</span> Program : IInterface<br>    {<br>        <span class=\"synType\">public</span> <span class=\"synType\">static</span> List&lt;<span class=\"synType\">int</span>&gt; JustDoIt(<span class=\"synType\">int</span> count)<br>        {<br>            Console.WriteLine($<span class=\"synConstant\">\"Hello {Name}!\"</span>);<br>            <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> List&lt;<span class=\"synType\">int</span>&gt;(<span class=\"synStatement\">new</span> <span class=\"synType\">int</span>[] { <span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, <span class=\"synConstant\">3</span> })<br>        }<br>    }<br>}<br>',\n    csp:\n        '<span class=\"synType\">Content</span>-<span class=\"synType\">Security</span>-<span class=\"synType\">Policy</span><span class=\"synSpecial\">:</span><br>    default-src <span class=\"synSpecial\">\\'</span>self<span class=\"synSpecial\">\\';</span><br>    style-src <span class=\"synSpecial\">\\'</span>self<span class=\"synSpecial\">\\'</span> css<span class=\"synSpecial\">.</span>example<span class=\"synSpecial\">.</span>com<span class=\"synSpecial\">;</span><br>    img-src *<span class=\"synSpecial\">.</span>example<span class=\"synSpecial\">.</span>com<span class=\"synSpecial\">;</span><br>    script-src <span class=\"synSpecial\">\\'</span>unsafe-eval<span class=\"synSpecial\">\\'</span> <span class=\"synSpecial\">\\'</span>self<span class=\"synSpecial\">\\'</span> js<span class=\"synSpecial\">.</span>example<span class=\"synSpecial\">.</span>com <span class=\"synSpecial\">\\'</span>nonce-<span class=\"synType\">Nc3n83cnSAd3wc3Sasdfn939hc3</span><span class=\"synSpecial\">\\'</span><br>',\n    css:\n        '<span class=\"synSpecial\">@font-face</span> <span class=\"synIdentifier\">{</span><br>  <span class=\"synType\">font-family</span>: Chunkfive; <span class=\"synType\">src</span>: <span class=\"synIdentifier\">url(</span><span class=\"synConstant\">\\'Chunkfive.otf\\'</span><span class=\"synIdentifier\">)</span>;<br><span class=\"synIdentifier\">}</span><br><br><span class=\"synStatement\">body</span><span class=\"synSpecial\">,</span> <span class=\"synIdentifier\">.usertext</span> <span class=\"synIdentifier\">{</span><br>  <span class=\"synType\">color</span>: <span class=\"synConstant\">#F0F0F0</span>; <span class=\"synType\">background</span>: <span class=\"synConstant\">#600</span>;<br>  <span class=\"synType\">font-family</span>: Chunkfive<span class=\"synSpecial\">,</span> sans;<br><span class=\"synIdentifier\">}</span><br><br><span class=\"synComment\">@import</span> <span class=\"synIdentifier\">url(</span><span class=\"synConstant\">print.css</span><span class=\"synIdentifier\">)</span>;<br><span class=\"synComment\">@media</span><span class=\"synPreProc\"> </span><span class=\"synSpecial\">print</span><span class=\"synPreProc\"> </span><span class=\"synIdentifier\">{</span><br>  <span class=\"synStatement\">a</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">href</span><span class=\"synSpecial\">^=</span><span class=\"synConstant\">http</span><span class=\"synSpecial\">]</span>::<span class=\"synPreProc\">after</span> <span class=\"synIdentifier\">{</span><br>    <span class=\"synType\">content</span>: <span class=\"synIdentifier\">attr(</span><span class=\"synConstant\">href</span><span class=\"synIdentifier\">)</span><br>  <span class=\"synIdentifier\">}</span><br><span class=\"synIdentifier\">}</span><br>',\n    d:\n        '<span class=\"synPreProc\">#!/usr/bin/rdmd</span><br><span class=\"synComment\">// Computes average line length for standard input.</span><br><span class=\"synPreProc\">import</span> std.stdio;<br><br><span class=\"synComment\">/+</span><br><span class=\"synComment\">  this is a /+ nesting +/ comment</span><br><span class=\"synComment\">+/</span><br><br><span class=\"synType\">enum</span> COMPILED_ON = <span class=\"synConstant\">__TIMESTAMP__</span>;  <span class=\"synComment\">// special token</span><br><br><span class=\"synType\">enum</span> character = <span class=\"synConstant\">\\'©\\'</span>;<br><span class=\"synType\">enum</span> copy_valid = <span class=\"synConstant\">\\'</span><span class=\"synError\">&amp;copy;</span><span class=\"synConstant\">\\'</span>;<br><span class=\"synType\">enum</span> backslash_escaped = <span class=\"synConstant\">\\'</span><span class=\"synSpecial\">\\\\\\\\</span><span class=\"synConstant\">\\'</span>;<br><br><span class=\"synComment\">// string literals</span><br><span class=\"synType\">enum</span> str = <span class=\"synConstant\">`hello \"world\"!`</span>;<br><span class=\"synType\">enum</span> multiline = <span class=\"synConstant\">r\"lorem</span><br><span class=\"synConstant\">ipsum</span><br><span class=\"synConstant\">dolor\"</span>;  <span class=\"synComment\">// wysiwyg string, no escapes here allowed</span><br><span class=\"synType\">enum</span> multiline2 = <span class=\"synConstant\">\"sit</span><br><span class=\"synConstant\">amet</span><br><span class=\"synSpecial\">\\\\\"</span><span class=\"synConstant\">adipiscing</span><span class=\"synSpecial\">\\\\\"</span><br><span class=\"synConstant\">elit.\"</span>;<br><span class=\"synType\">enum</span> hex = <span class=\"synConstant\">x\"66 6f 6f\"</span>;   <span class=\"synComment\">// same as \"foo\"</span><br><br><span class=\"synPreProc\">#line 5</span><br><br><span class=\"synComment\">// float literals</span><br><span class=\"synType\">enum</span> f = [<span class=\"synConstant\">3.14f</span>, <span class=\"synConstant\">.1</span>, <span class=\"synConstant\">1.</span>, <span class=\"synConstant\">1e100</span>, <span class=\"synConstant\">0xc0de.01p+100</span>];<br><br><span class=\"synType\">static</span> <span class=\"synStatement\">if</span> (something == <span class=\"synConstant\">true</span>) {<br>   <span class=\"synPreProc\">import</span> std.algorithm;<br>}<br><br><span class=\"synType\">void</span> main() <span class=\"synType\">pure</span> <span class=\"synType\">nothrow</span> <span class=\"synPreProc\">@</span><span class=\"synType\">safe</span> {<br>    <span class=\"synType\">ulong</span> lines = <span class=\"synConstant\">0</span>;<br>    <span class=\"synType\">double</span> sumLength = <span class=\"synConstant\">0</span>;<br>    <span class=\"synStatement\">foreach</span> (line; stdin.byLine()) {<br>        ++lines;<br>        sumLength += line.length;<br>    }<br>    writeln(<span class=\"synConstant\">\"Average line length: \"</span>,<br>        lines ? sumLength / lines : <span class=\"synConstant\">0</span>);<br>}<br>',\n    dart:\n        '<span class=\"synPreProc\">library </span>app;<br><span class=\"synPreProc\">import </span><span class=\"synConstant\">\\'dart:html\\'</span>;<br><br><span class=\"synPreProc\">part </span><span class=\"synConstant\">\\'app2.dart\\'</span>;<br><br><span class=\"synComment\">/**</span><br><span class=\"synComment\"> * Class description and </span><span class=\"synSpecial\">[link]</span><span class=\"synComment\">(http://dartlang.org/).</span><br><span class=\"synComment\"> */</span><br>@Awesome(<span class=\"synConstant\">\\'it works!\\'</span>)<br><span class=\"synType\">class</span> SomeClass<span class=\"synStatement\">&lt;</span>S <span class=\"synType\">extends</span> <span class=\"synType\">Iterable</span><span class=\"synStatement\">&gt;</span> <span class=\"synType\">extends</span> BaseClass<span class=\"synStatement\">&lt;</span>S<span class=\"synStatement\">&gt;</span> <span class=\"synType\">implements</span> <span class=\"synType\">Comparable</span> {<br>  <span class=\"synStatement\">factory</span> SomeClass(<span class=\"synType\">num</span> param);<br>  SomeClass._internal(<span class=\"synType\">int</span> q) <span class=\"synStatement\">:</span> <span class=\"synType\">super</span>() {<br>    <span class=\"synStatement\">assert</span>(q <span class=\"synStatement\">!=</span> <span class=\"synConstant\">1</span>);<br>    <span class=\"synType\">double</span> z = <span class=\"synConstant\">0.0</span>;<br>  }<br><br>  <span class=\"synComment\">/// **Sum** function</span><br>  <span class=\"synType\">int</span> sum(<span class=\"synType\">int</span> a, <span class=\"synType\">int</span> b) <span class=\"synStatement\">=&gt;</span> a <span class=\"synStatement\">+</span> b;<br><br>  ElementList els() <span class=\"synStatement\">=&gt;</span> querySelectorAll(<span class=\"synConstant\">\\'.dart\\'</span>);<br>}<br><br><span class=\"synType\">String</span> str = <span class=\"synConstant\">\\' (</span><span class=\"synPreProc\">${\\'parameter\\' + \\'zxc\\'}</span><span class=\"synConstant\">)\\'</span>;<br><span class=\"synType\">String</span> str = <span class=\"synConstant\">\" (</span><span class=\"synPreProc\">${true ? 2 + 2 / 2 : null}</span><span class=\"synConstant\">)\"</span>;<br><span class=\"synType\">String</span> str = <span class=\"synConstant\">\" (</span><span class=\"synPreProc\">$variable</span><span class=\"synConstant\">)\"</span>;<br><span class=\"synType\">String</span> str = <span class=\"synConstant\">r\\'<br>raw\\\\\\'</span>;<br><span class=\"synType\">String</span> str = <span class=\"synConstant\">r\"<br>raw\\\\\"</span>;<br><span class=\"synType\">var</span> str = <span class=\"synConstant\">\\'\\'\\'</span><br><span class=\"synConstant\">Something </span><span class=\"synPreProc\">${2+3}</span><br><span class=\"synConstant\">\\'\\'\\'</span>;<br><span class=\"synType\">var</span> str = <span class=\"synConstant\">r\"\"\"</span><br><span class=\"synConstant\">Something ${2+3}</span><br><span class=\"synConstant\">\"\"\"</span>;<br><br>checkVersion() <span class=\"synStatement\">async</span> {<br>  <span class=\"synType\">var</span> version = <span class=\"synStatement\">await</span> lookUpVersion();<br>}<br>',\n    diff:\n        '<span class=\"synType\">Index: languages/ini.js</span><br>===================================================================<br><span class=\"synType\">--- languages/ini.js    (revision 199)</span><br><span class=\"synType\">+++ languages/ini.js    (revision 200)</span><br><span class=\"synStatement\">@@ -1,8 +1,7 @@</span><br> hljs.LANGUAGES.ini =<br> {<br>   case_insensitive: true,<br><span class=\"synSpecial\">-  defaultMode:</span><br><span class=\"synSpecial\">-  {</span><br><span class=\"synIdentifier\">+  defaultMode: {</span><br>     contains: [\\'comment\\', \\'title\\', \\'setting\\'],<br>     illegal: \\'[^\\\\\\\\s]\\'<br>   },<br><br><span class=\"synType\">*** /path/to/original timestamp</span><br><span class=\"synType\">--- /path/to/new      timestamp</span><br><span class=\"synStatement\">***************</span><br><span class=\"synType\">*** 1,3 ****</span><br><span class=\"synType\">--- 1,9 ----</span><br><span class=\"synIdentifier\">+ This is an important</span><br><span class=\"synIdentifier\">+ notice! It should</span><br><span class=\"synIdentifier\">+ therefore be located at</span><br><span class=\"synIdentifier\">+ the beginning of this</span><br><span class=\"synIdentifier\">+ document!</span><br><br><span class=\"synPreProc\">! compress the size of the</span><br><span class=\"synPreProc\">! changes.</span><br><br>  It is important to spell<br>',\n    django:\n        '<span class=\"synPreProc\">{% </span><span class=\"synStatement\">if</span><span class=\"synPreProc\"> articles|</span><span class=\"synIdentifier\">length</span><span class=\"synPreProc\"> %}</span><br><span class=\"synPreProc\">{% </span><span class=\"synStatement\">for</span><span class=\"synPreProc\"> article </span><span class=\"synStatement\">in</span><span class=\"synPreProc\"> articles %}</span><br><br><span class=\"synPreProc\">{% custom %}</span><br><br><span class=\"synComment\">{# Striped table #}</span><br>&lt;tr class=\"<span class=\"synPreProc\">{% </span><span class=\"synStatement\">cycle</span><span class=\"synPreProc\"> odd,even %}</span>\"&gt;<br>  &lt;td&gt;<span class=\"synPreProc\">{{ article|</span><span class=\"synIdentifier\">default</span><span class=\"synPreProc\">:</span><span class=\"synConstant\">\"Hi... \"</span><span class=\"synPreProc\"> }}</span>&lt;/td&gt;<br>  &lt;td <span class=\"synPreProc\">{% </span><span class=\"synStatement\">if</span><span class=\"synPreProc\"> article.today %}</span>class=\"today\"<span class=\"synPreProc\">{% </span><span class=\"synStatement\">endif</span><span class=\"synPreProc\"> %}</span>&gt;<br>    Published on <span class=\"synPreProc\">{{ article.</span><span class=\"synIdentifier\">date</span><span class=\"synPreProc\"> }}</span><br>  &lt;/td&gt;<br>&lt;/tr&gt;<br><br><span class=\"synPreProc\">{% </span><span class=\"synStatement\">endfor</span><span class=\"synPreProc\"> %}</span><br><span class=\"synPreProc\">{% </span><span class=\"synStatement\">endif</span><span class=\"synPreProc\"> %}</span><br>',\n    dns:\n        '<span class=\"synPreProc\">$ORIGIN </span><span class=\"synStatement\">example.com.</span>    <span class=\"synComment\">; designates the start of this zone file in the namespace</span><br><span class=\"synPreProc\">$TTL </span><span class=\"synConstant\">1h</span>                 <span class=\"synComment\">; default expiration time of all resource records without their own TTL value</span><br><span class=\"synStatement\">example.com.</span>  <span class=\"synPreProc\">IN</span>  <span class=\"synType\">SOA</span>   <span class=\"synIdentifier\">ns.example.com.</span> <span class=\"synIdentifier\">username.example.com.</span> ( <span class=\"synSpecial\">2007120710</span> <span class=\"synConstant\">1d</span> <span class=\"synConstant\">2h</span> <span class=\"synConstant\">4w</span> <span class=\"synConstant\">1h</span> )<br><span class=\"synStatement\">example.com.</span>  <span class=\"synPreProc\">IN</span>  <span class=\"synType\">NS</span>    <span class=\"synIdentifier\">ns</span>                    <span class=\"synComment\">; ns.example.com is a nameserver for example.com</span><br><span class=\"synStatement\">example.com.</span>  <span class=\"synPreProc\">IN</span>  <span class=\"synType\">NS</span>    <span class=\"synIdentifier\">ns.somewhere.example.</span> <span class=\"synComment\">; ns.somewhere.example is a backup nameserver for example.com</span><br><span class=\"synStatement\">example.com.</span>  <span class=\"synPreProc\">IN</span>  <span class=\"synType\">MX</span>    <span class=\"synConstant\">10</span> <span class=\"synIdentifier\">mail.example.com.</span>  <span class=\"synComment\">; mail.example.com is the mailserver for example.com</span><br><span class=\"synSpecial\">@ </span>            <span class=\"synPreProc\">IN</span>  <span class=\"synType\">MX</span>    <span class=\"synConstant\">20</span> <span class=\"synIdentifier\">mail2.example.com.</span> <span class=\"synComment\">; equivalent to above line, \"@\" represents zone origin</span><br><span class=\"synSpecial\">@ </span>            <span class=\"synPreProc\">IN</span>  <span class=\"synType\">MX</span>    <span class=\"synConstant\">50</span> <span class=\"synIdentifier\">mail3</span>              <span class=\"synComment\">; equivalent to above line, but using a relative host name</span><br><span class=\"synStatement\">example.com.</span>  <span class=\"synPreProc\">IN</span>  <span class=\"synType\">A</span>     <span class=\"synConstant\">192.0.2.1</span>             <span class=\"synComment\">; IPv4 address for example.com</span><br>              <span class=\"synPreProc\">IN</span>  <span class=\"synType\">AAAA</span>  <span class=\"synConstant\">2001:db8:10::1</span>        <span class=\"synComment\">; IPv6 address for example.com</span><br><span class=\"synStatement\">ns</span>            <span class=\"synPreProc\">IN</span>  <span class=\"synType\">A</span>     <span class=\"synConstant\">192.0.2.2</span>             <span class=\"synComment\">; IPv4 address for ns.example.com</span><br>              <span class=\"synPreProc\">IN</span>  <span class=\"synType\">AAAA</span>  <span class=\"synConstant\">2001:db8:10::2</span>        <span class=\"synComment\">; IPv6 address for ns.example.com</span><br><span class=\"synStatement\">www</span>           <span class=\"synPreProc\">IN</span>  <span class=\"synType\">CNAME</span> <span class=\"synIdentifier\">example.com.</span>          <span class=\"synComment\">; www.example.com is an alias for example.com</span><br><span class=\"synStatement\">wwwtest</span>       <span class=\"synPreProc\">IN</span>  <span class=\"synType\">CNAME</span> <span class=\"synIdentifier\">www</span>                   <span class=\"synComment\">; wwwtest.example.com is another alias for www.example.com</span><br><span class=\"synStatement\">mail</span>          <span class=\"synPreProc\">IN</span>  <span class=\"synType\">A</span>     <span class=\"synConstant\">192.0.2.3</span>             <span class=\"synComment\">; IPv4 address for mail.example.com</span><br><span class=\"synStatement\">mail2</span>         <span class=\"synPreProc\">IN</span>  <span class=\"synType\">A</span>     <span class=\"synConstant\">192.0.2.4</span>             <span class=\"synComment\">; IPv4 address for mail2.example.com</span><br><span class=\"synStatement\">mail3</span>         <span class=\"synPreProc\">IN</span>  <span class=\"synType\">A</span>     <span class=\"synConstant\">192.0.2.5</span>             <span class=\"synComment\">; IPv4 address for mail3.example.com</span><br>',\n    elixir:\n        '<span class=\"synPreProc\">defrecord</span> <span class=\"synType\">Person</span>, <span class=\"synConstant\">first_name:</span> <span class=\"synConstant\">nil</span>, <span class=\"synConstant\">last_name:</span> <span class=\"synSpecial\">\"</span><span class=\"synConstant\">Dudington</span><span class=\"synSpecial\">\"</span> <span class=\"synStatement\">do</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">name</span> record <span class=\"synStatement\">do</span> <span class=\"synComment\"># huh ?</span><br>    <span class=\"synSpecial\">\"#{</span>record<span class=\"synStatement\">.</span>first_name<span class=\"synSpecial\">}</span><span class=\"synConstant\"> </span><span class=\"synSpecial\">#{</span>record<span class=\"synStatement\">.</span>last_name<span class=\"synSpecial\">}\"</span><br>  <span class=\"synStatement\">end</span><br><span class=\"synStatement\">end</span><br><br><span class=\"synPreProc\">defrecord</span> <span class=\"synType\">User</span>, <span class=\"synConstant\">name:</span> <span class=\"synSpecial\">\"</span><span class=\"synConstant\">José</span><span class=\"synSpecial\">\"</span>, <span class=\"synConstant\">age:</span> <span class=\"synConstant\">25</span><br><br>guy <span class=\"synStatement\">=</span> <span class=\"synType\">Person</span><span class=\"synStatement\">.</span>new <span class=\"synConstant\">first_name:</span> <span class=\"synSpecial\">\"</span><span class=\"synConstant\">Guy</span><span class=\"synSpecial\">\"</span><br>guy<span class=\"synStatement\">.</span>name<br><br><span class=\"synPreProc\">defmodule</span> <span class=\"synType\">ListServer</span> <span class=\"synStatement\">do</span><br>  <span class=\"synIdentifier\">@moduledoc</span> <span class=\"synConstant\">\"\"\"</span><br><span class=\"synConstant\">  This module provides an easy to use ListServer, useful for keeping</span><br><span class=\"synConstant\">  lists of things.</span><br><span class=\"synConstant\">  \"\"\"</span><br>  <span class=\"synPreProc\">use</span> <span class=\"synType\">GenServer.Behaviour</span><br>  <span class=\"synPreProc\">alias</span> <span class=\"synType\">Foo.Bar</span><br><br>  <span class=\"synComment\">### Public API</span><br>  <span class=\"synIdentifier\">@doc</span> <span class=\"synConstant\">\"\"\"</span><br><span class=\"synConstant\">  Starts and links a new ListServer, returning {:ok, pid}</span><br><br><span class=\"synConstant\">  ## Example</span><br><br><span class=\"synConstant\">    iex&gt; {:ok, pid} = ListServer.start_link</span><br><br><span class=\"synConstant\">  \"\"\"</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">start_link</span> <span class=\"synStatement\">do</span><br>    <span class=\"synConstant\">:gen_server</span><span class=\"synStatement\">.</span>start_link({<span class=\"synConstant\">:local</span>, <span class=\"synConstant\">:list</span>}, <span class=\"synConstant\">__MODULE__</span>, [], [])<br>  <span class=\"synStatement\">end</span><br><br>  <span class=\"synComment\">### GenServer API</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">init</span>(list) <span class=\"synStatement\">do</span><br>    {<span class=\"synConstant\">:ok</span>, list}<br>  <span class=\"synStatement\">end</span><br><br>  <span class=\"synComment\"># Clear the list</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">handle_cast</span> <span class=\"synConstant\">:clear</span>, list <span class=\"synStatement\">do</span><br>    {<span class=\"synConstant\">:noreply</span>, []}<br>  <span class=\"synStatement\">end</span><br><span class=\"synStatement\">end</span><br><br>{<span class=\"synConstant\">:ok</span>, pid} <span class=\"synStatement\">=</span> <span class=\"synType\">ListServer</span><span class=\"synStatement\">.</span>start_link<br>pid <span class=\"synStatement\">&lt;-</span> {<span class=\"synConstant\">:foo</span>, <span class=\"synSpecial\">\"</span><span class=\"synConstant\">bar</span><span class=\"synSpecial\">\"</span>}<br><br>greeter <span class=\"synStatement\">=</span> <span class=\"synStatement\">fn</span>(x) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">IO</span><span class=\"synStatement\">.</span>puts <span class=\"synSpecial\">\"</span><span class=\"synConstant\">hey </span><span class=\"synSpecial\">#{</span>x<span class=\"synSpecial\">}\"</span> <span class=\"synStatement\">end</span><br>greeter<span class=\"synStatement\">.</span>(<span class=\"synSpecial\">\"</span><span class=\"synConstant\">Bob</span><span class=\"synSpecial\">\"</span>)<br><br>',\n    erlang:\n        '<span class=\"synStatement\">-module</span>(<span class=\"synConstant\">ssh_cli</span>).<br><br><span class=\"synStatement\">-behaviour</span>(<span class=\"synConstant\">ssh_channel</span>).<br><br><span class=\"synPreProc\">-include</span>(<span class=\"synConstant\">\"ssh.hrl\"</span>).<br><span class=\"synComment\">%% backwards compatibility</span><br><span class=\"synStatement\">-export</span>(<span class=\"synSpecial\">[</span>listen<span class=\"synStatement\">/</span><span class=\"synConstant\">1</span>, listen<span class=\"synStatement\">/</span><span class=\"synConstant\">2</span>, listen<span class=\"synStatement\">/</span><span class=\"synConstant\">3</span>, listen<span class=\"synStatement\">/</span><span class=\"synConstant\">4</span>, stop<span class=\"synStatement\">/</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">]</span>).<br><br><span class=\"synStatement\">if</span> <span class=\"synIdentifier\">L</span> <span class=\"synStatement\">=/=</span> <span class=\"synSpecial\">[]</span> <span class=\"synStatement\">-&gt;</span>      <span class=\"synComment\">% If L is not empty</span><br>    sum(<span class=\"synIdentifier\">L</span>) <span class=\"synStatement\">/</span> count(<span class=\"synIdentifier\">L</span>);<br><span class=\"synConstant\">true</span> <span class=\"synStatement\">-&gt;</span><br>    <span class=\"synConstant\">error</span><br><span class=\"synStatement\">end</span>.<br><br><span class=\"synComment\">%% state</span><br><span class=\"synStatement\">-record</span>(<span class=\"synConstant\">state</span>, <span class=\"synSpecial\">{</span><br>    <span class=\"synConstant\">cm</span>,<br>    <span class=\"synConstant\">channel</span><br>   <span class=\"synSpecial\">}</span>).<br><br><span class=\"synType\">-spec</span> foo(integer()) <span class=\"synStatement\">-&gt;</span> integer().<br>foo(<span class=\"synIdentifier\">X</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">1</span> <span class=\"synStatement\">+</span> <span class=\"synIdentifier\">X</span>.<br><br>test(<span class=\"synIdentifier\">Foo</span>)<span class=\"synStatement\">-&gt;</span><span class=\"synIdentifier\">Foo</span>.<br><br>init(<span class=\"synSpecial\">[</span><span class=\"synIdentifier\">Shell</span>, <span class=\"synIdentifier\">Exec</span><span class=\"synSpecial\">]</span>) <span class=\"synStatement\">-&gt;</span><br>    <span class=\"synSpecial\">{</span><span class=\"synConstant\">ok</span>, <span class=\"synType\">#state</span><span class=\"synSpecial\">{</span><span class=\"synConstant\">shell</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">Shell</span>, <span class=\"synConstant\">exec</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">Exec</span><span class=\"synSpecial\">}}</span>;<br>init(<span class=\"synSpecial\">[</span><span class=\"synIdentifier\">Shell</span><span class=\"synSpecial\">]</span>) <span class=\"synStatement\">-&gt;</span><br>    <span class=\"synConstant\">false</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">not</span> <span class=\"synConstant\">true</span>,<br>    io:format(<span class=\"synConstant\">\"Hello, </span><span class=\"synSpecial\">\\\\\"~p</span><span class=\"synConstant\">!</span><span class=\"synSpecial\">~n</span><span class=\"synConstant\">\"</span>, <span class=\"synSpecial\">[</span><span class=\"synIdentifier\">atom_to_list</span>(<span class=\"synConstant\">\\'World\\'</span>)<span class=\"synSpecial\">]</span>),<br>    <span class=\"synSpecial\">{</span><span class=\"synConstant\">ok</span>, <span class=\"synType\">#state</span><span class=\"synSpecial\">{</span><span class=\"synConstant\">shell</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">Shell</span><span class=\"synSpecial\">}}</span>.<br><br>concat(<span class=\"synSpecial\">[</span><span class=\"synIdentifier\">Single</span><span class=\"synSpecial\">]</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synIdentifier\">Single</span>;<br>concat(<span class=\"synIdentifier\">RList</span>) <span class=\"synStatement\">-&gt;</span><br>    <span class=\"synIdentifier\">EpsilonFree</span> <span class=\"synStatement\">=</span> lists:filter(<br>        <span class=\"synStatement\">fun</span> (<span class=\"synIdentifier\">Element</span>) <span class=\"synStatement\">-&gt;</span><br>            <span class=\"synStatement\">case</span> <span class=\"synIdentifier\">Element</span> <span class=\"synStatement\">of</span><br>                <span class=\"synConstant\">epsilon</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">false</span>;<br>                <span class=\"synIdentifier\">_</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">true</span><br>            <span class=\"synStatement\">end</span><br>        <span class=\"synStatement\">end</span>,<br>        <span class=\"synIdentifier\">RList</span>),<br>    <span class=\"synStatement\">case</span> <span class=\"synIdentifier\">EpsilonFree</span> <span class=\"synStatement\">of</span><br>        <span class=\"synSpecial\">[</span><span class=\"synIdentifier\">Single</span><span class=\"synSpecial\">]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synIdentifier\">Single</span>;<br>        <span class=\"synIdentifier\">Other</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synSpecial\">{</span><span class=\"synConstant\">concat</span>, <span class=\"synIdentifier\">Other</span><span class=\"synSpecial\">}</span><br>    <span class=\"synStatement\">end</span>.<br><br>union_dot_union(<span class=\"synSpecial\">{</span><span class=\"synConstant\">union</span>, <span class=\"synIdentifier\">_</span><span class=\"synSpecial\">}</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">U1</span>, <span class=\"synSpecial\">{</span><span class=\"synConstant\">union</span>, <span class=\"synIdentifier\">_</span><span class=\"synSpecial\">}</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">U2</span>) <span class=\"synStatement\">-&gt;</span><br>    union(lists:flatten(<br>        lists:map(<br>            <span class=\"synStatement\">fun</span> (<span class=\"synIdentifier\">X1</span>) <span class=\"synStatement\">-&gt;</span><br>                lists:map(<br>                    <span class=\"synStatement\">fun</span> (<span class=\"synIdentifier\">X2</span>) <span class=\"synStatement\">-&gt;</span><br>                        concat(<span class=\"synSpecial\">[</span><span class=\"synIdentifier\">X1</span>, <span class=\"synIdentifier\">X2</span><span class=\"synSpecial\">]</span>)<br>                    <span class=\"synStatement\">end</span>,<br>                    union_to_list(<span class=\"synIdentifier\">U2</span>)<br>                )<br>            <span class=\"synStatement\">end</span>,<br>            union_to_list(<span class=\"synIdentifier\">U1</span>)<br>        ))).<br>',\n    fortran:\n        '<span class=\"synPreProc\">subroutine</span> test_sub(k)<br>    <span class=\"synType\">implicit</span> <span class=\"synType\">none</span><br><br>  <span class=\"synComment\">!===============================</span><br>  <span class=\"synComment\">!   This is a test subroutine</span><br>  <span class=\"synComment\">!===============================</span><br><br>    <span class=\"synType\">integer</span>, <span class=\"synType\">intent</span>(<span class=\"synType\">in</span>)           :: k<br>    <span class=\"synType\">double precision</span>, <span class=\"synType\">allocatable</span> :: a(:)<br>    <span class=\"synType\">integer</span>, <span class=\"synType\">parameter</span>            :: nmax<span class=\"synStatement\">=</span><span class=\"synConstant\">10</span><br>    <span class=\"synType\">integer</span>                       :: i<br><br>    <span class=\"synStatement\">allocate</span> (a(nmax))<br><br>    <span class=\"synStatement\">do</span> i<span class=\"synStatement\">=</span><span class=\"synConstant\">1</span>,nmax<br>      a(i) <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">dble</span>(i)<span class=\"synStatement\">*</span><span class=\"synConstant\">5.d0</span><br>    <span class=\"synStatement\">enddo</span><br><br>    <span class=\"synStatement\">print</span> <span class=\"synStatement\">*</span>, <span class=\"synConstant\">\\'Hello world\\'</span><br>    <span class=\"synStatement\">write</span> (<span class=\"synStatement\">*</span>,<span class=\"synStatement\">*</span>) a(:)<br><br><span class=\"synPreProc\">end subroutine</span> test_sub<br>',\n    fsharp:\n        '<span class=\"synPreProc\">open</span> <span class=\"synIdentifier\">System</span><br><br><span class=\"synComment\">// Single line comment...</span><br><span class=\"synComment\">(*</span><br><span class=\"synComment\">  This is a</span><br><span class=\"synComment\">  multiline comment.</span><br><span class=\"synComment\">*)</span><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">checkList</span> alist <span class=\"synStatement\">=</span><br>    <span class=\"synStatement\">match</span> alist <span class=\"synStatement\">with</span><br>    <span class=\"synStatement\">|</span> <span class=\"synStatement\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">0</span><br>    <span class=\"synStatement\">|</span> <span class=\"synStatement\">[</span>a<span class=\"synStatement\">]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">1</span><br>    <span class=\"synStatement\">|</span> <span class=\"synStatement\">[</span>a<span class=\"synStatement\">;</span> b<span class=\"synStatement\">]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">2</span><br>    <span class=\"synStatement\">|</span> <span class=\"synStatement\">[</span>a<span class=\"synStatement\">;</span> b<span class=\"synStatement\">;</span> c<span class=\"synStatement\">]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">3</span><br>    <span class=\"synStatement\">|</span> <span class=\"synIdentifier\">_</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">failwith</span> <span class=\"synConstant\">\"List is too big!\"</span><br><br><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">text</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">\"Some text...\"</span><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">text2</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">@\"A \"\"verbatim\"\" string...\"</span><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">catalog</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">\"\"\"</span><br><span class=\"synConstant\">Some \"long\" string...</span><br><span class=\"synConstant\">\"\"\"</span><br><br><span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> <span class=\"synIdentifier\">fib</span> x <span class=\"synStatement\">=</span> <span class=\"synStatement\">if</span> x <span class=\"synStatement\">&lt;=</span> <span class=\"synConstant\">2</span> <span class=\"synStatement\">then</span> <span class=\"synConstant\">1</span> <span class=\"synStatement\">else</span> fib<span class=\"synStatement\">(</span>x-<span class=\"synConstant\">1</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">+</span> fib<span class=\"synStatement\">(</span>x-<span class=\"synConstant\">2</span><span class=\"synStatement\">)</span><br><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">fibs</span> <span class=\"synStatement\">=</span><br>    <span class=\"synType\">Async</span>.Parallel <span class=\"synStatement\">[</span> <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> <span class=\"synConstant\">0.</span>.<span class=\"synConstant\">40</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synStatement\">async</span> <span class=\"synStatement\">{</span> <span class=\"synStatement\">return</span> fib<span class=\"synStatement\">(</span>i<span class=\"synStatement\">)</span> <span class=\"synStatement\">}</span> <span class=\"synStatement\">]</span><br>    <span class=\"synStatement\">|&gt;</span> <span class=\"synType\">Async</span>.RunSynchronously<br><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Sprocket</span><span class=\"synStatement\">(</span>gears<span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span><br>  <span class=\"synStatement\">member</span> this.<span class=\"synIdentifier\">Gears</span> : <span class=\"synType\">int</span> <span class=\"synStatement\">=</span> gears<br><br><span class=\"synSpecial\">[&lt;</span><span class=\"synType\">AbstractClass</span><span class=\"synSpecial\">&gt;]</span><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Animal</span> <span class=\"synStatement\">=</span><br>  <span class=\"synType\">abstract</span> Speak : <span class=\"synType\">unit</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">unit</span><br><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Widget</span> <span class=\"synStatement\">=</span><br>  <span class=\"synStatement\">|</span> RedWidget<br>  <span class=\"synStatement\">|</span> GreenWidget<br><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">Point</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span>X: <span class=\"synType\">float</span><span class=\"synStatement\">;</span> Y: <span class=\"synType\">float</span><span class=\"synStatement\">;}</span><br><br><span class=\"synSpecial\">[&lt;</span><span class=\"synType\">Measure</span><span class=\"synSpecial\">&gt;]</span><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">s</span><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">minutte</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">60</span><span class=\"synStatement\">&lt;</span>s<span class=\"synStatement\">&gt;</span><br><br><span class=\"synStatement\">type</span> <span class=\"synIdentifier\">DefaultMailbox</span><span class=\"synStatement\">&lt;</span>\\'a<span class=\"synStatement\">&gt;()</span> <span class=\"synStatement\">=</span><br>    <span class=\"synStatement\">let</span> <span class=\"synStatement\">mutable</span> <span class=\"synIdentifier\">inbox</span> <span class=\"synStatement\">=</span> ConcurrentQueue<span class=\"synStatement\">&lt;</span>\\'a<span class=\"synStatement\">&gt;()</span><br>    <span class=\"synStatement\">let</span> <span class=\"synIdentifier\">awaitMsg</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> AutoResetEvent<span class=\"synStatement\">(</span><span class=\"synConstant\">false</span><span class=\"synStatement\">)</span><br>',\n    go:\n        '<span class=\"synStatement\">package</span> main<br><br><span class=\"synStatement\">import</span> <span class=\"synConstant\">\"fmt\"</span><br><br><span class=\"synStatement\">func</span> main() {<br>    ch := <span class=\"synStatement\">make</span>(<span class=\"synType\">chan</span> <span class=\"synType\">float64</span>)<br>    ch &lt;- <span class=\"synConstant\">1</span>.<span class=\"synConstant\">0e10</span>    <span class=\"synComment\">// magic number</span><br>    x, ok := &lt;-<span class=\"synError\"> </span>ch<br>    <span class=\"synStatement\">defer</span> fmt.Println(<span class=\"synConstant\">`exitting now\\\\`</span>)<br>    <span class=\"synStatement\">go</span> <span class=\"synStatement\">println</span>(<span class=\"synStatement\">len</span>(<span class=\"synConstant\">\"hello world!\"</span>))<br>    <span class=\"synStatement\">return</span><br>}<br>',\n    groovy:\n        '<span class=\"synComment\">#!/usr/bin/env groovy</span><br><span class=\"synPreProc\">package</span> model<br><br><span class=\"synPreProc\">import</span> groovy.transform.CompileStatic<br><span class=\"synPreProc\">import</span> java.util.<span class=\"synType\">List</span> <span class=\"synSpecial\">as</span> MyList<br><br>trait Distributable {<br>    <span class=\"synType\">void</span> distribute(<span class=\"synType\">String</span> version) {}<br>}<br><br>@CompileStatic<br><span class=\"synType\">class</span> Distribution <span class=\"synType\">implements</span> Distributable {<br>    <span class=\"synType\">double</span> number = <span class=\"synConstant\">1234.234</span> <span class=\"synConstant\">/ 567</span><br><span class=\"synConstant\">    def otherNumber = 3 /</span> <span class=\"synConstant\">4</span><br>    <span class=\"synType\">boolean</span> archivable = condition ?: <span class=\"synConstant\">true</span><br>    <span class=\"synSpecial\">def</span> ternary = a ? b : c<br>    <span class=\"synType\">String</span> name = <span class=\"synConstant\">\"Guillaume\"</span><br>    Closure description = <span class=\"synConstant\">null</span><br>    <span class=\"synType\">List</span>&lt;DownloadPackage&gt; packages = []<br>    <span class=\"synType\">String</span> regex = ~<span class=\"synConstant\">/.*foo.*/</span><br>    <span class=\"synType\">String</span> multi = <span class=\"synConstant\">\\'\\'\\'</span><br><span class=\"synConstant\">        multi line string</span><br><span class=\"synConstant\">    \\'\\'\\'</span> + <span class=\"synConstant\">\"\"\"</span><br><span class=\"synConstant\">        now with double quotes and </span><span class=\"synIdentifier\">${gstring}</span><br><span class=\"synConstant\">    \"\"\"</span> + $/<br>        even with dollar slashy strings<br>    <span class=\"synConstant\">/$</span><br><br><span class=\"synConstant\">    /</span>**<br>     * description method<br>     * @param cl the closure<br>     */<br>    <span class=\"synType\">void</span> description(Closure cl) { <span class=\"synType\">this</span>.description = cl }<br><br>    <span class=\"synType\">void</span> version(<span class=\"synType\">String</span> name, Closure versionSpec) {<br>        <span class=\"synSpecial\">def</span> closure = { <span class=\"synIdentifier\">println</span> <span class=\"synConstant\">\"hi\"</span> } <span class=\"synSpecial\">as</span> Runnable<br><br>        MyList ml = [<span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, [a: <span class=\"synConstant\">1</span>, b:<span class=\"synConstant\">2</span>,c :<span class=\"synConstant\">3</span>]]<br>        <span class=\"synStatement\">for</span> (ch <span class=\"synSpecial\">in</span> <span class=\"synConstant\">\"name\"</span>) {}<br><br>        <span class=\"synComment\">// single line comment</span><br>        DownloadPackage pkg = <span class=\"synStatement\">new</span> DownloadPackage(version: name)<br><br>        check that: <span class=\"synConstant\">true</span><br><br><span class=\"synStatement\">        label</span>:<br>        <span class=\"synSpecial\">def</span> clone = versionSpec.rehydrate(pkg, pkg, pkg)<br>        <span class=\"synConstant\">/*</span><br><span class=\"synConstant\">            now clone() in a multiline comment</span><br><span class=\"synConstant\">        */</span><br>        clone()<br>        packages.add(pkg)<br><br>        <span class=\"synStatement\">assert</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">/ 2 == 2</span><br><span class=\"synConstant\">    }</span><br><span class=\"synConstant\">}</span><br>',\n    haml:\n        '<span class=\"synPreProc\">!!! XML</span><br><span class=\"synSpecial\">%</span><span class=\"synStatement\">html</span><br>  <span class=\"synSpecial\">%</span><span class=\"synStatement\">body</span><br>    <span class=\"synSpecial\">%</span><span class=\"synStatement\">h1</span><span class=\"synSpecial\">.</span><span class=\"synType\">jumbo</span><span class=\"synSpecial\">{</span><span class=\"synConstant\">:id</span>=&gt;<span class=\"synSpecial\">\"</span><span class=\"synConstant\">a</span><span class=\"synSpecial\">\"</span>, <span class=\"synConstant\">:style</span>=&gt;<span class=\"synSpecial\">\\'</span><span class=\"synConstant\">font-weight: normal</span><span class=\"synSpecial\">\\'</span>, <span class=\"synConstant\">:title</span>=&gt;title<span class=\"synSpecial\">}</span> highlight.js<br>    <span class=\"synComment\">/html comment</span><br><span class=\"synComment\">    -# ignore this line</span><br>    <span class=\"synSpecial\">%</span><span class=\"synStatement\">ul</span><span class=\"synSpecial\">(</span><span class=\"synType\">style</span>=<span class=\"synConstant\">\\'margin: 0\\'</span><span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">-</span>items.each <span class=\"synStatement\">do</span> |<span class=\"synIdentifier\">i</span>|<br>      <span class=\"synSpecial\">%</span><span class=\"synStatement\">i</span><span class=\"synSpecial\">=</span> i<br>    <span class=\"synSpecial\">=</span> variable<br>    <span class=\"synSpecial\">=</span>variable2<br>    <span class=\"synSpecial\">~</span> variable3<br>    <span class=\"synSpecial\">~</span>variable4<br>    The current year is <span class=\"synSpecial\">#{</span><span class=\"synType\">DataTime</span>.now.year<span class=\"synSpecial\">}</span>.<br>',\n    haskell:\n        '<span class=\"synSpecial\">{-# LANGUAGE TypeSynonymInstances #-}</span><br><span class=\"synType\">module</span> Network.UDP<br>( DataPacket(<span class=\"synStatement\">..</span>)<br>, openBoundUDPPort<br>, openListeningUDPPort<br>, pingUDPPort<br>, sendUDPPacketTo<br>, recvUDPPacket<br>, recvUDPPacketFrom<br>) <span class=\"synType\">where</span><br><br><span class=\"synPreProc\">import</span> <span class=\"synPreProc\">qualified</span> Data.ByteString <span class=\"synPreProc\">as</span> Strict (ByteString, concat, singleton)<br><span class=\"synPreProc\">import</span> <span class=\"synPreProc\">qualified</span> Data.ByteString.Lazy <span class=\"synPreProc\">as</span> Lazy (ByteString, toChunks, fromChunks)<br><span class=\"synPreProc\">import</span> Data.ByteString.Char8 (pack, unpack)<br><span class=\"synPreProc\">import</span> Network.Socket <span class=\"synPreProc\">hiding</span> (sendTo, recv, recvFrom)<br><span class=\"synPreProc\">import</span> Network.Socket.ByteString (sendTo, recv, recvFrom)<br><br><span class=\"synComment\">-- Type class for converting StringLike types to and from strict ByteStrings</span><br><span class=\"synType\">class</span> DataPacket a <span class=\"synType\">where</span><br>  toStrictBS <span class=\"synStatement\">::</span> a <span class=\"synStatement\">-&gt;</span> Strict.ByteString<br>  fromStrictBS <span class=\"synStatement\">::</span> Strict.ByteString <span class=\"synStatement\">-&gt;</span> a<br><br><span class=\"synType\">instance</span> DataPacket Strict.ByteString <span class=\"synType\">where</span><br>  toStrictBS <span class=\"synStatement\">=</span> id<br>  <span class=\"synSpecial\">{-# INLINE toStrictBS #-}</span><br>  fromStrictBS <span class=\"synStatement\">=</span> id<br>  <span class=\"synSpecial\">{-# INLINE fromStrictBS #-}</span><br><br>openBoundUDPPort <span class=\"synStatement\">::</span> String <span class=\"synStatement\">-&gt;</span> Int <span class=\"synStatement\">-&gt;</span> IO Socket<br>openBoundUDPPort uri port <span class=\"synStatement\">=</span> <span class=\"synStatement\">do</span><br>  s <span class=\"synStatement\">&lt;-</span> getUDPSocket<br>  bindAddr <span class=\"synStatement\">&lt;-</span> inet_addr uri<br>  <span class=\"synStatement\">let</span> a <span class=\"synStatement\">=</span> SockAddrInet (toEnum port) bindAddr<br>  bindSocket s a<br>  return s<br><br>pingUDPPort <span class=\"synStatement\">::</span> Socket <span class=\"synStatement\">-&gt;</span> SockAddr <span class=\"synStatement\">-&gt;</span> IO ()<br>pingUDPPort s a <span class=\"synStatement\">=</span> sendTo s (Strict.singleton <span class=\"synConstant\">0</span>) a <span class=\"synStatement\">&gt;&gt;</span> return ()<br>',\n    haxe:\n        '<span class=\"synStatement\">package</span> my<span class=\"synStatement\">.package</span><span class=\"synIdentifier\">;</span><br><br><span class=\"synPreProc\">#if</span> js<br><span class=\"synStatement\">import</span> js<span class=\"synStatement\">.</span><span class=\"synType\">Browser</span><span class=\"synIdentifier\">;</span><br><span class=\"synPreProc\">#elseif</span> sys<br><span class=\"synStatement\">import</span> <span class=\"synType\">Sys</span><span class=\"synIdentifier\">;</span><br><span class=\"synPreProc\">#else</span><br><span class=\"synStatement\">import</span> <span class=\"synType\">Date</span><span class=\"synIdentifier\">;</span><br><span class=\"synPreProc\">#end</span><br><br><span class=\"synStatement\">import</span> <span class=\"synType\">Lambda</span><span class=\"synIdentifier\">;</span><br><span class=\"synStatement\">using</span> <span class=\"synType\">Main</span><span class=\"synStatement\">.</span><span class=\"synType\">IntExtender</span><span class=\"synIdentifier\">;</span><br><br><span class=\"synType\">extern</span> <span class=\"synStatement\">class</span> <span class=\"synType\">Math</span> {<br>    <span class=\"synType\">static</span> <span class=\"synStatement\">var</span> <span class=\"synType\">PI</span>(<span class=\"synConstant\">default</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">null</span>) <span class=\"synStatement\">:</span> <span class=\"synType\">Float</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synType\">static</span> <span class=\"synIdentifier\">function</span> floor(v<span class=\"synStatement\">:</span><span class=\"synType\">Float</span>)<span class=\"synStatement\">:</span><span class=\"synType\">Int</span><span class=\"synIdentifier\">;</span><br>}<br><br><span class=\"synComment\">/**</span><br><span class=\"synComment\"> * Abstract forwarding</span><br><span class=\"synComment\"> */</span><br><span class=\"synStatement\">abstract</span> <span class=\"synType\">MyAbstract</span>(<span class=\"synType\">Int</span>) <span class=\"synStatement\">from</span> <span class=\"synType\">Int</span> <span class=\"synStatement\">to</span> <span class=\"synType\">Int</span> {<br>    <span class=\"synType\">inline</span> <span class=\"synIdentifier\">function</span> <span class=\"synIdentifier\">new</span>(i<span class=\"synStatement\">:</span><span class=\"synType\">Int</span>) {<br>        <span class=\"synConstant\">this</span> <span class=\"synStatement\">=</span> i<span class=\"synIdentifier\">;</span><br>    }<br><br>    <span class=\"synIdentifier\">@:op</span>(<span class=\"synType\">A</span> <span class=\"synStatement\">*</span> <span class=\"synType\">B</span>)<br>    <span class=\"synType\">public</span> <span class=\"synIdentifier\">function</span> multiply(rhs<span class=\"synStatement\">:</span><span class=\"synType\">MyAbstract</span>) {<br>        <span class=\"synStatement\">return</span> <span class=\"synConstant\">this</span> <span class=\"synStatement\">*</span> rhs<span class=\"synIdentifier\">;</span><br>    }<br>}<br><br><span class=\"synComment\">// an enum</span><br><span class=\"synStatement\">enum</span> <span class=\"synType\">Color</span> {<br>    <span class=\"synType\">Red</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synType\">Green</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synType\">Blue</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synType\">Rgb</span>(r<span class=\"synStatement\">:</span><span class=\"synType\">Int</span><span class=\"synIdentifier\">,</span> g<span class=\"synStatement\">:</span><span class=\"synType\">Int</span><span class=\"synIdentifier\">,</span> b<span class=\"synStatement\">:</span><span class=\"synType\">Int</span>)<span class=\"synIdentifier\">;</span><br>}<br><br><span class=\"synIdentifier\">@:generic</span><br><span class=\"synStatement\">class</span> <span class=\"synType\">Gen</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">T</span><span class=\"synStatement\">&gt;</span> {<br>    <span class=\"synStatement\">var</span> v<span class=\"synStatement\">:</span><span class=\"synType\">T</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synType\">public</span> <span class=\"synIdentifier\">function</span> <span class=\"synIdentifier\">new</span>(v<span class=\"synStatement\">:</span><span class=\"synType\">T</span>) {<br>        <span class=\"synConstant\">this</span><span class=\"synStatement\">.</span>v <span class=\"synStatement\">=</span> v<span class=\"synIdentifier\">;</span><br>    }<br><br>    <span class=\"synType\">public</span> <span class=\"synStatement\">var</span> x(<span class=\"synConstant\">get</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">set</span>)<span class=\"synStatement\">:</span><span class=\"synType\">T</span><span class=\"synIdentifier\">;</span><br><br>    <span class=\"synType\">private</span> <span class=\"synType\">inline</span> <span class=\"synIdentifier\">function</span> get_x()<span class=\"synStatement\">:</span><span class=\"synType\">T</span><br>        <span class=\"synStatement\">return</span> v<span class=\"synIdentifier\">;</span><br><br>    <span class=\"synType\">private</span> <span class=\"synType\">inline</span> <span class=\"synIdentifier\">function</span> set_x(x<span class=\"synStatement\">:</span><span class=\"synType\">T</span>)<span class=\"synStatement\">:</span><span class=\"synType\">T</span><br>        <span class=\"synStatement\">return</span> v <span class=\"synStatement\">=</span> x<span class=\"synIdentifier\">;</span><br>}<br><br><span class=\"synStatement\">class</span> <span class=\"synType\">Main</span> <span class=\"synType\">extends</span> <span class=\"synType\">BaseClass</span> <span class=\"synType\">implements</span> <span class=\"synType\">SomeFunctionality</span> {<br>    <span class=\"synStatement\">var</span> callback<span class=\"synStatement\">:</span><span class=\"synType\">Void</span><span class=\"synStatement\">-&gt;</span><span class=\"synType\">Void</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">null</span><span class=\"synIdentifier\">;</span><br>    <span class=\"synStatement\">var</span> myArray<span class=\"synStatement\">:</span><span class=\"synType\">Array</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">Float</span><span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">new</span> <span class=\"synType\">Array</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">Float</span><span class=\"synStatement\">&gt;</span>()<span class=\"synIdentifier\">;</span><br>    <span class=\"synStatement\">var</span> arr <span class=\"synStatement\">=</span> [<span class=\"synConstant\">4</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">8</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">0</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">3</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">9</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">5</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">2</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">6</span><span class=\"synIdentifier\">,</span><span class=\"synConstant\">7</span>]<span class=\"synIdentifier\">;</span><br><br>    <span class=\"synType\">public</span> <span class=\"synIdentifier\">function</span> <span class=\"synIdentifier\">new</span>(x) {<br>        <span class=\"synConstant\">super</span>(x)<span class=\"synIdentifier\">;</span><br>    }<br><br>    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synIdentifier\">function</span> main() {<br>        <span class=\"synStatement\">trace</span>(<span class=\"synConstant\">\\'What</span><span class=\"synSpecial\">\\\\\\'</span><span class=\"synConstant\">s up?\\'</span>)<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">trace</span>(<span class=\"synConstant\">\\'Hi, </span>${name}<span class=\"synConstant\">!\\'</span>)<span class=\"synIdentifier\">;</span><br><br>        <span class=\"synComment\">// switch statements!</span><br>        <span class=\"synStatement\">var</span> c<span class=\"synStatement\">:</span><span class=\"synType\">Color</span> <span class=\"synStatement\">=</span> <span class=\"synType\">Color</span><span class=\"synStatement\">.</span><span class=\"synType\">Green</span><span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> x<span class=\"synStatement\">:</span><span class=\"synType\">Int</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">switch</span>(c) {<br>            <span class=\"synStatement\">case</span> <span class=\"synType\">Red</span><span class=\"synStatement\">:</span> <span class=\"synConstant\">0</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">case</span> <span class=\"synType\">Green</span><span class=\"synStatement\">:</span> <span class=\"synConstant\">1</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">case</span> <span class=\"synType\">Blue</span><span class=\"synStatement\">:</span> <span class=\"synConstant\">2</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">case</span> <span class=\"synType\">Rgb</span>(r<span class=\"synIdentifier\">,</span> g<span class=\"synIdentifier\">,</span> b)<span class=\"synStatement\">:</span> <span class=\"synConstant\">3</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">case</span> _<span class=\"synStatement\">:</span> <span class=\"synStatement\">-</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">;</span><br>        }<br><br>        <span class=\"synStatement\">for</span>(i <span class=\"synStatement\">in</span> <span class=\"synConstant\">0</span><span class=\"synStatement\">...</span><span class=\"synConstant\">3</span>) {<br>            <span class=\"synStatement\">trace</span>(i)<span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">continue</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">break</span><span class=\"synIdentifier\">;</span><br>        }<br><br>        <span class=\"synStatement\">do</span> {<br>            <span class=\"synStatement\">trace</span>(<span class=\"synConstant\">\"Hey-o!\"</span>)<span class=\"synIdentifier\">;</span><br>        } <span class=\"synStatement\">while</span>(<span class=\"synConstant\">false</span>)<span class=\"synIdentifier\">;</span><br><br>        <span class=\"synStatement\">var</span> done<span class=\"synStatement\">:</span><span class=\"synType\">Bool</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">false</span><span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">while</span>(<span class=\"synStatement\">!</span>done) {<br>            done <span class=\"synStatement\">=</span> <span class=\"synConstant\">true</span><span class=\"synIdentifier\">;</span><br>        }<br><br>        <span class=\"synStatement\">var</span> <span class=\"synType\">H</span><span class=\"synStatement\">:</span><span class=\"synType\">Int</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">cast</span> <span class=\"synIdentifier\">new</span> <span class=\"synType\">MyAbstract</span>(<span class=\"synConstant\">42</span>)<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> h<span class=\"synStatement\">:</span><span class=\"synType\">Int</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">cast</span>(<span class=\"synIdentifier\">new</span> <span class=\"synType\">MyAbstract</span>(<span class=\"synConstant\">31</span>)<span class=\"synIdentifier\">,</span> <span class=\"synType\">Int</span>)<span class=\"synIdentifier\">;</span><br><br>        <span class=\"synStatement\">try</span> {<br>            <span class=\"synStatement\">throw</span> <span class=\"synConstant\">\"error\"</span><span class=\"synIdentifier\">;</span><br>        }<br>        <span class=\"synStatement\">catch</span>(err<span class=\"synStatement\">:</span><span class=\"synType\">String</span>) {<br>            <span class=\"synStatement\">trace</span>(err)<span class=\"synIdentifier\">;</span><br>        }<br>        <br>        <span class=\"synStatement\">var</span> map <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">new</span> haxe<span class=\"synStatement\">.</span>ds<span class=\"synStatement\">.</span><span class=\"synType\">IntMap</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">String</span><span class=\"synStatement\">&gt;</span>()<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> f <span class=\"synStatement\">=</span> map<span class=\"synStatement\">.</span><span class=\"synConstant\">set</span><span class=\"synStatement\">.</span>bind(_<span class=\"synIdentifier\">,</span> <span class=\"synConstant\">\"12\"</span>)<span class=\"synIdentifier\">;</span><br>    }<br><br>    <span class=\"synIdentifier\">function</span> nothing()<span class=\"synStatement\">:</span><span class=\"synType\">Void</span><br>        <span class=\"synStatement\">trace</span>(<span class=\"synConstant\">\"nothing!\"</span>)<span class=\"synIdentifier\">;</span><br><br>    <span class=\"synType\">private</span> <span class=\"synType\">inline</span> <span class=\"synIdentifier\">function</span> func(a<span class=\"synStatement\">:</span><span class=\"synType\">Int</span><span class=\"synIdentifier\">,</span> b<span class=\"synStatement\">:</span><span class=\"synType\">Float</span><span class=\"synIdentifier\">,</span> <span class=\"synStatement\">?</span>c<span class=\"synStatement\">:</span><span class=\"synType\">String</span><span class=\"synIdentifier\">,</span> d<span class=\"synStatement\">:</span><span class=\"synType\">Bool</span><span class=\"synStatement\">=</span><span class=\"synConstant\">false</span>)<span class=\"synStatement\">:</span><span class=\"synType\">Dynamic</span> {<br>        <span class=\"synStatement\">return</span> {<br>            x<span class=\"synStatement\">:</span> <span class=\"synConstant\">0</span><span class=\"synIdentifier\">,</span><br>            y<span class=\"synStatement\">:</span> <span class=\"synConstant\">true</span><span class=\"synIdentifier\">,</span><br>            z<span class=\"synStatement\">:</span> <span class=\"synConstant\">false</span><span class=\"synIdentifier\">,</span><br>            a<span class=\"synStatement\">:</span> <span class=\"synConstant\">1</span><span class=\"synStatement\">.</span><span class=\"synConstant\">53</span><span class=\"synIdentifier\">,</span><br>            b<span class=\"synStatement\">:</span> 5e10<span class=\"synIdentifier\">,</span><br>            c<span class=\"synStatement\">:</span> <span class=\"synStatement\">-</span><span class=\"synConstant\">12</span><span class=\"synIdentifier\">,</span><br>            h<span class=\"synStatement\">:</span> <span class=\"synConstant\">null</span><br>        }<span class=\"synIdentifier\">;</span><br>    }<br><br><br>    <span class=\"synType\">override</span> <span class=\"synIdentifier\">function</span> quicksort( lo <span class=\"synStatement\">:</span> <span class=\"synType\">Int</span><span class=\"synIdentifier\">,</span> hi <span class=\"synStatement\">:</span> <span class=\"synType\">Int</span> ) <span class=\"synStatement\">:</span> <span class=\"synType\">Void</span> {<br>        <span class=\"synStatement\">var</span> i <span class=\"synStatement\">=</span> lo<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> j <span class=\"synStatement\">=</span> hi<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> buf <span class=\"synStatement\">=</span> arr<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">var</span> p <span class=\"synStatement\">=</span> buf[(lo<span class=\"synStatement\">+</span>hi)<span class=\"synStatement\">&gt;&gt;</span><span class=\"synConstant\">1</span>]<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">while</span>( i <span class=\"synStatement\">&lt;=</span> j ) {<br>            <span class=\"synStatement\">while</span>( arr[i] <span class=\"synStatement\">&gt;</span> p ) i<span class=\"synStatement\">++</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">while</span>( arr[j] <span class=\"synStatement\">&lt;</span> p ) j<span class=\"synStatement\">--</span><span class=\"synIdentifier\">;</span><br>            <span class=\"synStatement\">if</span>( i <span class=\"synStatement\">&lt;=</span> j ) {<br>                <span class=\"synStatement\">var</span> t <span class=\"synStatement\">=</span> buf[i]<span class=\"synIdentifier\">;</span><br>                buf[i<span class=\"synStatement\">++</span>] <span class=\"synStatement\">=</span> buf[j]<span class=\"synIdentifier\">;</span><br>                buf[j<span class=\"synStatement\">--</span>] <span class=\"synStatement\">=</span> t<span class=\"synIdentifier\">;</span><br>            }<br>        }<br>        <span class=\"synStatement\">if</span>( lo <span class=\"synStatement\">&lt;</span> j ) quicksort( lo<span class=\"synIdentifier\">,</span> j )<span class=\"synIdentifier\">;</span><br>        <span class=\"synStatement\">if</span>( i <span class=\"synStatement\">&lt;</span> hi ) quicksort( i<span class=\"synIdentifier\">,</span> hi )<span class=\"synIdentifier\">;</span><br>    }<br>}<br>',\n    java:\n        '<span class=\"synComment\">/**</span><br><span class=\"synComment\"> * </span><span class=\"synSpecial\">@author</span><span class=\"synComment\"> John Smith </span><span class=\"synIdentifier\">&lt;</span>john<span class=\"synIdentifier\">.smith@example.com&gt;</span><br><span class=\"synComment\">*/</span><br><span class=\"synPreProc\">package</span> l2f.gameserver.model;<br><br><span class=\"synType\">public</span> <span class=\"synType\">abstract</span> <span class=\"synType\">class</span> L2Char <span class=\"synType\">extends</span> L2Object {<br>  <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">final</span> Short ERROR = <span class=\"synConstant\">0x0001</span>;<br><br>  <span class=\"synType\">public</span> <span class=\"synType\">void</span> moveTo(<span class=\"synType\">int</span> x, <span class=\"synType\">int</span> y, <span class=\"synType\">int</span> z) {<br>    _ai = <span class=\"synConstant\">null</span>;<br>    log(<span class=\"synConstant\">\"Should not be called\"</span>);<br>    <span class=\"synStatement\">if</span> (<span class=\"synConstant\">1</span> &gt; <span class=\"synConstant\">5</span>) { <span class=\"synComment\">// wtf!?</span><br>      <span class=\"synStatement\">return</span>;<br>    }<br>  }<br>}<br>',\n    javascript:\n        '<span class=\"synIdentifier\">function</span> $initHighlight(block, cls) <span class=\"synIdentifier\">{</span><br>  <span class=\"synStatement\">try</span> <span class=\"synIdentifier\">{</span><br>    <span class=\"synStatement\">if</span> (cls.search(<span class=\"synConstant\">/\\\\bno\\\\-highlight\\\\b/</span>) != -1)<br>      <span class=\"synStatement\">return</span> process(block, <span class=\"synConstant\">true</span>, 0x0F) +<br>             ` <span class=\"synStatement\">class</span>=<span class=\"synConstant\">\"${cls}\"</span>`;<br>  <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">catch</span> (e) <span class=\"synIdentifier\">{</span><br>    <span class=\"synComment\">/* handle exception */</span><br>  <span class=\"synIdentifier\">}</span><br>  <span class=\"synStatement\">for</span> (<span class=\"synIdentifier\">var</span> i = 0 / 2; i &lt; classes.length; i++) <span class=\"synIdentifier\">{</span><br>    <span class=\"synStatement\">if</span> (checkCondition(classes<span class=\"synIdentifier\">[</span>i<span class=\"synIdentifier\">]</span>) === <span class=\"synStatement\">undefined</span>)<br>      console.log(<span class=\"synConstant\">\\'undefined\\'</span>);<br>  <span class=\"synIdentifier\">}</span><br><span class=\"synIdentifier\">}</span><br><br><span class=\"synStatement\">export</span>  $initHighlight;<br>',\n    julia:\n        '<span class=\"synComment\">### Types</span><br><br><span class=\"synComment\"># Old-style definitions</span><br><br><span class=\"synStatement\">immutable</span> Point{T&lt;:AbstractFloat}<br>    index::<span class=\"synType\">Int</span><br>    x::T<br>    y::T<br><span class=\"synStatement\">end</span><br><br><span class=\"synType\">abstract</span> A<br><br><span class=\"synStatement\">type</span> B &lt;: A <span class=\"synStatement\">end</span><br><br><span class=\"synType\">typealias</span> P Point{<span class=\"synType\">Float16</span>}<br><br><span class=\"synComment\"># New-style definitions</span><br><br>struct Plus<br>    f::typeof(+)<br><span class=\"synError\">end</span><br><br>mutable struct Mut<br>    mutable::A          <span class=\"synComment\"># mutable should not be highlighted (not followed by struct)</span><br>    primitive::B        <span class=\"synComment\"># primitive should not be highlighted (not followed by type)</span><br><span class=\"synError\">end</span><br><br>primitive <span class=\"synStatement\">type</span> Prim <span class=\"synConstant\">8</span> <span class=\"synStatement\">end</span><br><br><span class=\"synType\">abstract</span> <span class=\"synStatement\">type</span> Abstr <span class=\"synStatement\">end</span><br><br><span class=\"synComment\">### Modules</span><br><br><span class=\"synStatement\">module</span> M<br><br><span class=\"synStatement\">using</span> X<br><span class=\"synStatement\">import</span> Y<br><span class=\"synStatement\">importall</span> Z<br><br><span class=\"synStatement\">export</span> a, b, c<br><br><span class=\"synStatement\">end</span> <span class=\"synComment\"># module</span><br><br><span class=\"synStatement\">baremodule</span> Bare<br><span class=\"synStatement\">end</span><br><br><span class=\"synComment\">### New in 0.6</span><br><br><span class=\"synComment\"># where, infix isa, UnionAll</span><br><span class=\"synStatement\">function</span> F{T}(x::T) where T<br>    <span class=\"synStatement\">for</span> i <span class=\"synStatement\">in</span> x<br>        i isa UnionAll &amp;&amp; <span class=\"synStatement\">return</span><br>    <span class=\"synStatement\">end</span><br><span class=\"synStatement\">end</span><br><br><span class=\"synComment\">### Miscellaneous</span><br><br><span class=\"synComment\">#=</span><br><span class=\"synComment\">Multi</span><br><span class=\"synComment\">Line</span><br><span class=\"synComment\">Comment</span><br><span class=\"synComment\">=#</span><br><span class=\"synStatement\">function</span> method0(x, y::<span class=\"synType\">Int</span>; version::<span class=\"synType\">VersionNumber</span>=<span class=\"synConstant\">v\"0.1.2\"</span>)<br>    <span class=\"synConstant\">\"\"\"</span><br><span class=\"synConstant\">    Triple</span><br><span class=\"synConstant\">    Quoted</span><br><span class=\"synConstant\">    String</span><br><span class=\"synConstant\">    \"\"\"</span><br><br>    <span class=\"synPreProc\">@assert</span> <span class=\"synConstant\">π</span> &gt; <span class=\"synConstant\">e</span><br><br>    s = <span class=\"synConstant\">1.2</span><br>    変数 = <span class=\"synConstant\">\"variable\"</span><br><br>    <span class=\"synStatement\">if</span> s * <span class=\"synConstant\">100_000</span> ≥ <span class=\"synConstant\">5.2e+10</span> &amp;&amp; <span class=\"synConstant\">true</span> || x === <span class=\"synConstant\">nothing</span><br>        s = <span class=\"synConstant\">1.</span> + <span class=\"synConstant\">.5im</span><br>    <span class=\"synStatement\">elseif</span> <span class=\"synConstant\">1</span> ∈ [<span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, <span class=\"synConstant\">3</span>]<br>        println(<span class=\"synConstant\">\"s is </span><span class=\"synIdentifier\">$s</span><span class=\"synConstant\"> and 変数 is $変数\"</span>)<br>    <span class=\"synStatement\">else</span><br>        x = [<span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span>; <span class=\"synConstant\">4</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">6</span>]<br>        <span class=\"synPreProc\">@show</span> x\\'<br>    <span class=\"synStatement\">end</span><br><br>    <span class=\"synStatement\">local</span> var = rand(<span class=\"synConstant\">10</span>)<br>    <span class=\"synStatement\">global</span> g = <span class=\"synConstant\">44</span><br>    var[<span class=\"synConstant\">1</span>:<span class=\"synConstant\">5</span>]<br>    var[<span class=\"synConstant\">5</span>:<span class=\"synConstant\">end</span>-<span class=\"synConstant\">1</span>]<br>    var[<span class=\"synConstant\">end</span>]<br><br>    opt = <span class=\"synConstant\">\"-la\"</span><br>    run(<span class=\"synConstant\">`ls </span><span class=\"synIdentifier\">$opt</span><span class=\"synConstant\">`</span>)<br><br>    <span class=\"synStatement\">try</span><br>        ccall(:lib, (<span class=\"synType\">Ptr</span>{<span class=\"synType\">Void</span>},), Ref{<span class=\"synConstant\">C_NULL</span>})<br>    <span class=\"synStatement\">catch</span><br>        throw(<span class=\"synType\">ArgumentError</span>(<span class=\"synConstant\">\"wat\"</span>))<br>    <span class=\"synStatement\">finally</span><br>        warn(<span class=\"synConstant\">\"god save the queen\"</span>)<br>    <span class=\"synStatement\">end</span><br><br>    <span class=\"synConstant\">\\'</span><span class=\"synSpecial\">\\\\u2200</span><span class=\"synConstant\">\\'</span> != <span class=\"synConstant\">\\'T\\'</span><br><br>    <span class=\"synStatement\">return</span> <span class=\"synConstant\">5</span>s / <span class=\"synConstant\">2</span><br><span class=\"synStatement\">end</span><br>',\n    kotlin:\n        '<span class=\"synPreProc\">import</span> kotlin.lang.test<br><br>trait A {<br>    <span class=\"synType\">fun</span> x()<br>}<br><br><span class=\"synType\">fun</span> xxx() : <span class=\"synType\">Int</span> {<br>    <span class=\"synStatement\">return</span> <span class=\"synConstant\">888</span><br>}<br><br><span class=\"synType\">public</span> <span class=\"synType\">fun</span> main(args : Array&lt;String&gt;) {<br>}<br>',\n    ldif:\n        '<span class=\"synComment\"># Example LDAP user</span><br><span class=\"synType\">dn</span>: <span class=\"synConstant\">uid=user.0,ou=People,dc=example,dc=com</span><br><span class=\"synType\">objectClass</span>: <span class=\"synConstant\">top</span><br><span class=\"synType\">objectClass</span>: <span class=\"synConstant\">person</span><br><span class=\"synType\">objectClass</span>: <span class=\"synConstant\">organizationalPerson</span><br><span class=\"synType\">objectClass</span>: <span class=\"synConstant\">inetOrgPerson</span><br><span class=\"synType\">givenName</span>: <span class=\"synConstant\">Morris</span><br><span class=\"synType\">sn</span>: <span class=\"synConstant\">Day</span><br><span class=\"synType\">cn</span>: <span class=\"synConstant\">Morris Day</span><br><span class=\"synType\">initials</span>: <span class=\"synConstant\">MD</span><br><span class=\"synType\">employeeNumber</span>: <span class=\"synConstant\">0</span><br><span class=\"synType\">uid</span>: <span class=\"synConstant\">user.0</span><br><span class=\"synType\">mail</span>: <span class=\"synConstant\">user.0@example.com</span><br><span class=\"synType\">userPassword</span>: <span class=\"synConstant\">password</span><br><span class=\"synType\">telephoneNumber</span>: <span class=\"synConstant\">+1 042 100 3866</span><br><span class=\"synType\">homePhone</span>: <span class=\"synConstant\">+1 039 680 4135</span><br><span class=\"synType\">pager</span>: <span class=\"synConstant\">+1 284 199 0966</span><br><span class=\"synType\">mobile</span>: <span class=\"synConstant\">+1 793 707 0251</span><br><span class=\"synType\">street</span>: <span class=\"synConstant\">90280 Spruce Street</span><br><span class=\"synType\">l</span>: <span class=\"synConstant\">Minneapolis</span><br><span class=\"synType\">st</span>: <span class=\"synConstant\">MN</span><br><span class=\"synType\">postalCode</span>: <span class=\"synConstant\">50401</span><br><span class=\"synType\">postalAddress</span>: <span class=\"synConstant\">Morris Day$90280 Spruce Street$Minneapolis, MN  50401</span><br><span class=\"synType\">description</span>: <span class=\"synConstant\">This is the description for Morris Day.</span><br>',\n    lisp:\n        '#!/usr/bin/env csi<br><br><span class=\"synSpecial\">(</span><span class=\"synStatement\">defun</span> prompt-for-cd <span class=\"synSpecial\">()</span><br>   <span class=\"synConstant\">\"Prompts</span><br><span class=\"synConstant\">    for CD\"</span><br>   <span class=\"synSpecial\">(</span>prompt-read <span class=\"synConstant\">\"Title\"</span> <span class=\"synConstant\">1.53</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">2/4</span> <span class=\"synConstant\">1.7</span> <span class=\"synConstant\">1.7e0</span> <span class=\"synConstant\">2.9E-4</span> +42 <span class=\"synConstant\">-7</span> <span class=\"synType\">#b001</span> <span class=\"synType\">#b001</span>/100 <span class=\"synType\">#o777</span> <span class=\"synType\">#O777</span> <span class=\"synType\">#xabc55</span> #c<span class=\"synSpecial\">(</span><span class=\"synConstant\">0</span> <span class=\"synConstant\">-5.6</span><span class=\"synSpecial\">))</span><br>   <span class=\"synSpecial\">(</span>prompt-read <span class=\"synConstant\">\"Artist\"</span> <span class=\"synType\">&amp;rest</span><span class=\"synSpecial\">)</span><br>   <span class=\"synSpecial\">(</span><span class=\"synStatement\">or</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">parse-integer</span> <span class=\"synSpecial\">(</span>prompt-read <span class=\"synConstant\">\"Rating\"</span><span class=\"synSpecial\">)</span> <span class=\"synType\">:junk-allowed</span> <span class=\"synStatement\">t</span><span class=\"synSpecial\">)</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> x <span class=\"synSpecial\">(</span><span class=\"synStatement\">format</span> <span class=\"synStatement\">t</span> <span class=\"synConstant\">\"yes\"</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">format</span> <span class=\"synStatement\">t</span> <span class=\"synConstant\">\"no\"</span> <span class=\"synStatement\">nil</span><span class=\"synSpecial\">)</span> <span class=\"synComment\">;and here comment</span><br>  <span class=\"synSpecial\">)</span><br>  <span class=\"synComment\">;; second line comment</span><br>  <span class=\"synSpecial\">\\'(</span><span class=\"synStatement\">+</span> 1 2<span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">defvar</span> <span class=\"synType\">*lines*</span><span class=\"synSpecial\">)</span>                <span class=\"synComment\">; list of all lines</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">position-if-not</span> <span class=\"synType\">#\\'sys::whitespacep</span> line <span class=\"synType\">:start</span> beg<span class=\"synSpecial\">))</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">quote</span> <span class=\"synSpecial\">(</span>privet <span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">))</span><br>  <span class=\"synSpecial\">\\'(</span>hello world<span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">*</span> <span class=\"synConstant\">5</span> <span class=\"synConstant\">7</span><span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synConstant\">2</span> <span class=\"synConstant\">34</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synType\">:use</span> <span class=\"synConstant\">\"aaaa\"</span><span class=\"synSpecial\">)</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> <span class=\"synSpecial\">((</span>x <span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>y <span class=\"synConstant\">20</span><span class=\"synSpecial\">))</span><br>    <span class=\"synSpecial\">(</span><span class=\"synStatement\">print</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">+</span> x y<span class=\"synSpecial\">))</span><br>  <span class=\"synSpecial\">)</span><br>',\n    lsl:\n        '<span class=\"synStatement\">default</span><br><span class=\"synSpecial\">{</span><br>    <span class=\"synPreProc\">state_entry</span><span class=\"synSpecial\">()</span><br>    <span class=\"synSpecial\">{</span><br>        <span class=\"synIdentifier\">llSay</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">PUBLIC_CHANNEL</span>, <span class=\"synConstant\">\"Hello, Avatar!\"</span><span class=\"synSpecial\">)</span>;<br>    <span class=\"synSpecial\">}</span><br><br>    <span class=\"synPreProc\">touch_start</span><span class=\"synSpecial\">(</span><span class=\"synType\">integer</span> num_detected<span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">{</span><br>        <span class=\"synIdentifier\">llSay</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">PUBLIC_CHANNEL</span>, <span class=\"synConstant\">\"Touched.\"</span><span class=\"synSpecial\">)</span>;<br>    <span class=\"synSpecial\">}</span><br><span class=\"synSpecial\">}</span><br>',\n    lua:\n        '<span class=\"synComment\">--[[</span><br><span class=\"synComment\">Simple signal/slot implementation</span><br><span class=\"synComment\">]]</span><br><span class=\"synStatement\">local</span> signal_mt = <span class=\"synType\">{</span><br>    __index = <span class=\"synType\">{</span><br>        register = <span class=\"synIdentifier\">table.insert</span><br>    <span class=\"synType\">}</span><br><span class=\"synType\">}</span><br><span class=\"synIdentifier\">function</span> signal_mt.__index:emit(... <span class=\"synComment\">--[[ Comment in params ]]</span>)<br>    <span class=\"synStatement\">for</span> _, slot <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">ipairs</span>(self) <span class=\"synStatement\">do</span><br>        slot(self, ...)<br>    <span class=\"synStatement\">end</span><br><span class=\"synIdentifier\">end</span><br><span class=\"synStatement\">local</span> <span class=\"synIdentifier\">function</span> create_signal()<br>    <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">setmetatable</span>(<span class=\"synType\">{}</span>, signal_mt)<br><span class=\"synIdentifier\">end</span><br><br><span class=\"synComment\">-- Signal test</span><br><span class=\"synStatement\">local</span> signal = create_signal()<br>signal:register(<span class=\"synIdentifier\">function</span>(signal, ...)<br>    <span class=\"synIdentifier\">print</span>(...)<br><span class=\"synIdentifier\">end</span>)<br>signal:emit(<span class=\"synConstant\">\\'Answer to Life, the Universe, and Everything:\\'</span>, <span class=\"synConstant\">42</span>)<br><br><span class=\"synComment\">--[==[ [=[ [[</span><br><span class=\"synComment\">Nested ]]</span><br><span class=\"synComment\">multi-line ]=]</span><br><span class=\"synComment\">comment ]==]</span><br><span class=\"synConstant\">[==[ Nested</span><br><span class=\"synConstant\">[=[ multi-line</span><br><span class=\"synConstant\">[[ string</span><br><span class=\"synConstant\">]] ]=] ]==]</span><br>',\n    markdown:\n        '<span class=\"synSpecial\">#</span> hello world<br><br>you can write text [<span class=\"synUnderlined\">with links</span>](<span class=\"synConstant\">http://example.com</span>) inline or [<span class=\"synUnderlined\">link references</span>][<span class=\"synType\">1</span>].<br><br><span class=\"synStatement\">*</span> one _thing_ has *em*phasis<br><span class=\"synStatement\">*</span> two __things__ are **bold**<br><br>[<span class=\"synType\">1</span>]: <span class=\"synConstant\">http://example.com</span><br><br><span class=\"synPreProc\">---</span><br><br>hello world<br><span class=\"synPreProc\">===========</span><br><br><span class=\"synIdentifier\">&lt;</span>this<span class=\"synIdentifier\">_is inline=</span><span class=\"synConstant\">\"xml\"</span><span class=\"synIdentifier\">&gt;&lt;/</span>this<span class=\"synIdentifier\">_is&gt;</span><br><br><span class=\"synComment\">&gt; </span>markdown is so cool<br><br>    so are code segments<br><br><span class=\"synStatement\">1.</span> one thing (yeah!)<br><span class=\"synStatement\">2.</span> two thing <span class=\"synSpecial\">`</span>i can write code<span class=\"synSpecial\">`</span>, and <span class=\"synSpecial\">`</span>more<span class=\"synSpecial\">`</span> wipee!<br><br>',\n    matlab:\n        'n = <span class=\"synConstant\">20</span><span class=\"synSpecial\">;</span> <span class=\"synComment\">% number of points</span><br>points = <span class=\"synIdentifier\">[</span>random(<span class=\"synConstant\">\\'unid\\'</span>, <span class=\"synConstant\">100</span>, n, <span class=\"synConstant\">1</span>), random(<span class=\"synConstant\">\\'unid\\'</span>, <span class=\"synConstant\">100</span>, n, <span class=\"synConstant\">1</span>)<span class=\"synIdentifier\">]</span><span class=\"synSpecial\">;</span><br>len = <span class=\"synStatement\">zeros</span>(<span class=\"synConstant\">1</span>, n <span class=\"synStatement\">-</span> <span class=\"synConstant\">1</span>)<span class=\"synSpecial\">;</span><br>points = sortrows(points)<span class=\"synSpecial\">;</span><br><span class=\"synComment\">%% Initial set of points</span><br>plot(points(:,<span class=\"synConstant\">1</span>),points(:,<span class=\"synConstant\">2</span>))<span class=\"synSpecial\">;</span><br><span class=\"synStatement\">for</span> i = <span class=\"synConstant\">1</span>: n<span class=\"synStatement\">-</span><span class=\"synConstant\">1</span><br>    len(i) = points(i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span>, <span class=\"synConstant\">1</span>) <span class=\"synStatement\">-</span> points(i, <span class=\"synConstant\">1</span>)<span class=\"synSpecial\">;</span><br><span class=\"synStatement\">end</span><br><span class=\"synStatement\">while</span>(<span class=\"synStatement\">max</span>(len) <span class=\"synStatement\">&gt;</span> <span class=\"synConstant\">2</span> <span class=\"synStatement\">*</span> <span class=\"synStatement\">min</span>(len))<br>    <span class=\"synIdentifier\">[</span>d, i<span class=\"synIdentifier\">]</span> = <span class=\"synStatement\">max</span>(len)<span class=\"synSpecial\">;</span><br>    k = on_margin(points, i, d, <span class=\"synStatement\">-</span><span class=\"synConstant\">1</span>)<span class=\"synSpecial\">;</span><br>    m = on_margin(points, i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span>, d, <span class=\"synConstant\">1</span>)<span class=\"synSpecial\">;</span><br>    xm = <span class=\"synConstant\">0</span><span class=\"synSpecial\">;</span> ym = <span class=\"synConstant\">0</span><span class=\"synSpecial\">;</span><br><span class=\"synComment\">%% New point</span><br>    <span class=\"synStatement\">if</span>(i <span class=\"synStatement\">==</span> <span class=\"synConstant\">1</span> <span class=\"synStatement\">||</span> i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span> <span class=\"synStatement\">==</span> n)<br>        xm = <span class=\"synStatement\">mean</span>(points(<span class=\"synIdentifier\">[</span>i,i<span class=\"synStatement\">+</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span>,<span class=\"synConstant\">1</span>))<br>        ym = <span class=\"synStatement\">mean</span>(points(<span class=\"synIdentifier\">[</span>i,i<span class=\"synStatement\">+</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">]</span>,<span class=\"synConstant\">2</span>))<br>    <span class=\"synStatement\">else</span><br>        <span class=\"synIdentifier\">[</span>xm, ym<span class=\"synIdentifier\">]</span> = dlg1(points(<span class=\"synIdentifier\">[</span>k, i, i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span>, m<span class=\"synIdentifier\">]</span>, <span class=\"synConstant\">1</span>), <span class=\"synComment\">...</span><br>            points(<span class=\"synIdentifier\">[</span>k, i, i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span>, m<span class=\"synIdentifier\">]</span>, <span class=\"synConstant\">2</span>))<br>    <span class=\"synStatement\">end</span><br><br>    points = <span class=\"synIdentifier\">[</span> points(<span class=\"synConstant\">1</span>:i, :)<span class=\"synSpecial\">;</span> <span class=\"synIdentifier\">[</span>xm, ym<span class=\"synIdentifier\">]</span><span class=\"synSpecial\">;</span> points(i <span class=\"synStatement\">+</span> <span class=\"synConstant\">1</span>:<span class=\"synStatement\">end</span>, :)<span class=\"synIdentifier\">]</span><span class=\"synSpecial\">;</span><br><span class=\"synStatement\">end</span><br><br><span class=\"synComment\">%{</span><br><span class=\"synComment\">    This is a block comment. Please ignore me.</span><br><span class=\"synComment\">%}</span><br><br><span class=\"synIdentifier\">function</span> <span class=\"synIdentifier\">[</span>net<span class=\"synIdentifier\">]</span> = get_fit_network(inputs, targets)<br>    <span class=\"synComment\">% Create Network</span><br>    numHiddenNeurons = <span class=\"synConstant\">20</span><span class=\"synSpecial\">;</span>  <span class=\"synComment\">% Adjust as desired</span><br>    net = newfit(inputs,targets,numHiddenNeurons)<span class=\"synSpecial\">;</span><br>    net.trainParam.goal = <span class=\"synConstant\">0.01</span><span class=\"synSpecial\">;</span><br>    net.trainParam.epochs = <span class=\"synConstant\">1000</span><span class=\"synSpecial\">;</span><br>    <span class=\"synComment\">% Train and Apply Network</span><br>    <span class=\"synIdentifier\">[</span>net,tr<span class=\"synIdentifier\">]</span> = train(net,inputs,targets)<span class=\"synSpecial\">;</span><br><span class=\"synStatement\">end</span><br><br>foo_matrix = <span class=\"synIdentifier\">[</span><span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, <span class=\"synConstant\">3</span><span class=\"synSpecial\">;</span> <span class=\"synConstant\">4</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">\\'</span><span class=\"synConstant\">\\'\\'</span><span class=\"synSpecial\">;</span><br>foo_cell = {<span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, <span class=\"synConstant\">3</span><span class=\"synSpecial\">;</span> <span class=\"synConstant\">4</span>, <span class=\"synConstant\">5</span>, <span class=\"synConstant\">6</span>}<span class=\"synConstant\">\\'\\'</span>.<span class=\"synStatement\">\\'</span>.<span class=\"synStatement\">\\'</span><span class=\"synSpecial\">;</span><br><br>cell2flatten = {<span class=\"synConstant\">1</span>,<span class=\"synConstant\">2</span>,<span class=\"synConstant\">3</span>,<span class=\"synConstant\">4</span>,<span class=\"synConstant\">5</span>}<span class=\"synSpecial\">;</span><br>flattenedcell = cat(<span class=\"synConstant\">1</span>, cell2flatten{:})<span class=\"synSpecial\">;</span><br>',\n    maxima:\n        '<span class=\"synComment\">/* Maxima computer algebra system */</span><br><br><span class=\"synComment\">/* symbolic constants */</span><br><br><span class=\"synIdentifier\">[</span><span class=\"synSpecial\">true</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">false</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">unknown</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">inf</span><span class=\"synIdentifier\">,</span> minf<span class=\"synIdentifier\">,</span> ind<span class=\"synIdentifier\">,</span><br> und<span class=\"synIdentifier\">,</span> %e<span class=\"synIdentifier\">,</span> %i<span class=\"synIdentifier\">,</span> %<span class=\"synSpecial\">pi</span><span class=\"synIdentifier\">,</span> %phi<span class=\"synIdentifier\">,</span> %<span class=\"synSpecial\">gamma</span><span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* programming keywords */</span><br><br><span class=\"synStatement\">if</span> a <span class=\"synStatement\">then</span> b <span class=\"synStatement\">elseif</span> c <span class=\"synStatement\">then</span> d <span class=\"synStatement\">else</span> f<span class=\"synIdentifier\">;</span><br><span class=\"synStatement\">for</span> x<span class=\"synSpecial\">:</span><span class=\"synConstant\">1</span> <span class=\"synStatement\">thru</span> <span class=\"synConstant\">10</span> step <span class=\"synConstant\">2</span> <span class=\"synStatement\">do</span> <span class=\"synSpecial\">print</span><span class=\"synIdentifier\">(</span>x<span class=\"synIdentifier\">);</span><br><span class=\"synStatement\">for</span> z<span class=\"synSpecial\">:-</span><span class=\"synConstant\">2</span> while z <span class=\"synSpecial\">&lt;</span> <span class=\"synConstant\">0</span> <span class=\"synStatement\">do</span> <span class=\"synSpecial\">print</span><span class=\"synIdentifier\">(</span>z<span class=\"synIdentifier\">);</span><br><span class=\"synStatement\">for</span> m<span class=\"synSpecial\">:</span><span class=\"synConstant\">0</span> unless m <span class=\"synSpecial\">&gt;</span> <span class=\"synConstant\">10</span> <span class=\"synStatement\">do</span> <span class=\"synSpecial\">print</span><span class=\"synIdentifier\">(</span>m<span class=\"synIdentifier\">);</span><br><span class=\"synStatement\">for</span> x in <span class=\"synIdentifier\">[</span><span class=\"synConstant\">1</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">2</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">3</span><span class=\"synIdentifier\">]</span> <span class=\"synStatement\">do</span> <span class=\"synSpecial\">print</span><span class=\"synIdentifier\">(</span>x<span class=\"synIdentifier\">);</span><br>foo <span class=\"synStatement\">and</span> bar <span class=\"synStatement\">or</span> <span class=\"synStatement\">not</span> baz<span class=\"synIdentifier\">;</span><br><br><span class=\"synComment\">/* built-in variables */</span><br><br><span class=\"synIdentifier\">[</span>_<span class=\"synIdentifier\">,</span> __<span class=\"synIdentifier\">,</span> %<span class=\"synIdentifier\">,</span> %%<span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">linel</span><span class=\"synIdentifier\">,</span> simp<span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">dispflag</span><span class=\"synIdentifier\">,</span><br> stringdisp<span class=\"synIdentifier\">,</span> lispdisp<span class=\"synIdentifier\">,</span> %edispflag<span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* built-in functions */</span><br><br><span class=\"synIdentifier\">[</span><span class=\"synSpecial\">sin</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">cosh</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">exp</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">atan2</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">sqrt</span><span class=\"synIdentifier\">,</span> <span class=\"synSpecial\">log</span><span class=\"synIdentifier\">,</span> struve_h<span class=\"synIdentifier\">,</span><br> sublist_indices<span class=\"synIdentifier\">,</span> read_array<span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* user-defined symbols */</span><br><br><span class=\"synIdentifier\">[</span>foo<span class=\"synIdentifier\">,</span> ?bar<span class=\"synIdentifier\">,</span> baz%<span class=\"synIdentifier\">,</span> quux_mumble_blurf<span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* symbols using Unicode characters */</span><br><br><span class=\"synIdentifier\">[</span>Љ<span class=\"synIdentifier\">,</span> Щ<span class=\"synIdentifier\">,</span> щ<span class=\"synIdentifier\">,</span> Ӄ<span class=\"synIdentifier\">,</span> ЩЩЩ<span class=\"synIdentifier\">,</span> ӃӃЉЉщ<span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* numbers */</span><br><br>ibase <span class=\"synSpecial\">:</span> <span class=\"synConstant\">18</span> $<br><span class=\"synIdentifier\">[</span><span class=\"synConstant\">0</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">1234</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">1234</span>.<span class=\"synIdentifier\">,</span> 0abcdefgh<span class=\"synIdentifier\">];</span><br><span class=\"synSpecial\">reset</span> <span class=\"synIdentifier\">(</span>ibase<span class=\"synIdentifier\">)</span> $<br><span class=\"synIdentifier\">[</span>.<span class=\"synConstant\">54321</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">3.21e+0</span><span class=\"synIdentifier\">,</span> <span class=\"synConstant\">12.34B56</span><span class=\"synIdentifier\">];</span><br><br><span class=\"synComment\">/* strings */</span><br><br>s1 <span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"</span><span class=\"synType\">\\\\\"</span><span class=\"synConstant\">now</span><span class=\"synType\">\\\\\"</span><span class=\"synConstant\"> is\"</span><span class=\"synIdentifier\">;</span><br>s2 <span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"the \\'time\\' for all good men\"</span><span class=\"synIdentifier\">;</span><br><span class=\"synSpecial\">print</span> <span class=\"synIdentifier\">(</span>s1<span class=\"synIdentifier\">,</span> s2<span class=\"synIdentifier\">,</span> <span class=\"synConstant\">\"to come to the aid\"</span><span class=\"synIdentifier\">,</span><br>  <span class=\"synConstant\">\"of their country\"</span><span class=\"synIdentifier\">);</span><br><br><span class=\"synComment\">/* expressions */</span><br><br>foo <span class=\"synIdentifier\">(</span>x<span class=\"synIdentifier\">,</span> y<span class=\"synIdentifier\">,</span> z<span class=\"synIdentifier\">)</span> <span class=\"synSpecial\">:=</span><br>  <span class=\"synStatement\">if</span> x <span class=\"synSpecial\">&gt;</span> <span class=\"synConstant\">1</span> <span class=\"synSpecial\">+</span> y<br>    <span class=\"synStatement\">then</span> z <span class=\"synSpecial\">-</span> x<span class=\"synSpecial\">*</span>y<br>  <span class=\"synStatement\">elseif</span> y <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">100</span><span class=\"synSpecial\">!</span><br>    <span class=\"synStatement\">then</span> x<span class=\"synSpecial\">/</span><span class=\"synIdentifier\">(</span>y <span class=\"synSpecial\">+</span> z<span class=\"synIdentifier\">)</span><span class=\"synSpecial\">^</span><span class=\"synConstant\">2</span><br>  <span class=\"synStatement\">else</span> z <span class=\"synSpecial\">-</span> y . x . y<span class=\"synIdentifier\">;</span><br><br>',\n    mel:\n        '<span class=\"synIdentifier\">proc</span> <span class=\"synType\">string</span>[] getSelectedLights()<br><br>{<br>  <span class=\"synType\">string</span> <span class=\"synIdentifier\">$selectedLights</span>[];<br><br>  <span class=\"synType\">string</span> <span class=\"synIdentifier\">$select</span>[] = `ls -sl -dag -leaf`;<br><br>  <span class=\"synStatement\">for</span> ( <span class=\"synIdentifier\">$shape</span> <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">$select</span> )<br>  {<br>    <span class=\"synComment\">// Determine if this is a light.</span><br>    <span class=\"synComment\">//</span><br>    <span class=\"synType\">string</span> <span class=\"synIdentifier\">$class</span>[] = getClassification( `nodeType <span class=\"synIdentifier\">$shape</span>` );<br><br><br>    <span class=\"synStatement\">if</span> ( ( `<span class=\"synStatement\">size</span> <span class=\"synIdentifier\">$class</span>` ) &gt; <span class=\"synConstant\">0</span> &amp;&amp; ( <span class=\"synConstant\">\"light\"</span> == <span class=\"synIdentifier\">$class</span>[<span class=\"synConstant\">0</span>] ) )<br>    {<br>      <span class=\"synIdentifier\">$selectedLights</span>[ `<span class=\"synStatement\">size</span> <span class=\"synIdentifier\">$selectedLights</span>` ] = <span class=\"synIdentifier\">$shape</span>;<br>    }<br>  }<br><br>  <span class=\"synComment\">// Result is an array of all lights included in</span><br><br>  <span class=\"synComment\">// current selection list.</span><br>  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">$selectedLights</span>;<br>}<br>',\n    nginx:\n        '<span class=\"synIdentifier\">user</span>  www www;<br><span class=\"synIdentifier\">worker_processes</span>  2;<br><span class=\"synIdentifier\">pid</span> /var/run/nginx.pid;<br><span class=\"synIdentifier\">error_log</span>  /var/log/nginx.error_log  debug | info | <span class=\"synSpecial\">notice</span> | warn | error | crit;<br><br><span class=\"synStatement\">events</span> {<br>    <span class=\"synError\">connections</span>   2000;<br>    <span class=\"synIdentifier\">use</span> kqueue | rtsig | epoll | /dev/poll | select | poll;<br>}<br><br><span class=\"synStatement\">http</span> {<br>    <span class=\"synIdentifier\">log_format</span> main      <span class=\"synConstant\">\\'</span><span class=\"synPreProc\">$remote_addr</span><span class=\"synConstant\"> - </span><span class=\"synPreProc\">$remote_user</span><span class=\"synConstant\"> [</span><span class=\"synPreProc\">$time_local</span><span class=\"synConstant\">] \\'</span><br>                         <span class=\"synConstant\">\\'\"</span><span class=\"synPreProc\">$request</span><span class=\"synConstant\">\" </span><span class=\"synPreProc\">$status</span><span class=\"synConstant\"> </span><span class=\"synPreProc\">$bytes_sent</span><span class=\"synConstant\"> \\'</span><br>                         <span class=\"synConstant\">\\'\"</span><span class=\"synPreProc\">$http_referer</span><span class=\"synConstant\">\" \"</span><span class=\"synPreProc\">$http_user_agent</span><span class=\"synConstant\">\" \\'</span><br>                         <span class=\"synConstant\">\\'\"</span><span class=\"synPreProc\">$gzip_ratio</span><span class=\"synConstant\">\"\\'</span>;<br><br>    <span class=\"synIdentifier\">send_timeout</span> 3m;<br>    <span class=\"synIdentifier\">client_header_buffer_size</span> 1k;<br><br>    <span class=\"synIdentifier\">gzip</span> <span class=\"synConstant\">on</span>;<br>    <span class=\"synIdentifier\">gzip_min_length</span> 1100;<br><br><span class=\"synComment\">    #lingering_time 30;</span><br><br>    <span class=\"synStatement\">server</span> {<br>        <span class=\"synType\">server_name</span>   one.example.com  www.one.example.com;<br>        <span class=\"synIdentifier\">access_log</span>   /var/log/nginx.access_log  main;<br><br>        <span class=\"synStatement\">rewrite</span> (.*) /index.php?page=<span class=\"synIdentifier\">$1</span> <span class=\"synStatement\">break</span>;<br><br>        <span class=\"synStatement\">location</span> / {<br>            <span class=\"synType\">proxy_pass</span>         http://127.0.0.1/;<br>            <span class=\"synIdentifier\">proxy_redirect</span>     <span class=\"synConstant\">off</span>;<br>            <span class=\"synIdentifier\">proxy_set_header</span>   Host             <span class=\"synIdentifier\">$host</span>;<br>            <span class=\"synIdentifier\">proxy_set_header</span>   X-Real-IP        <span class=\"synIdentifier\">$remote_addr</span>;<br>            <span class=\"synIdentifier\">charset</span>            koi8-r;<br>        }<br><br>        <span class=\"synStatement\">location</span> /api/ {<br>            <span class=\"synType\">fastcgi_pass</span> 127.0.0.1:9000;<br>        }<br><br>        <span class=\"synStatement\">location</span> ~* \\\\.(jpg|jpeg|gif)$ {<br>            <span class=\"synType\">root</span>         /spool/www;<br>        }<br>    }<br>}<br>',\n    nsis:\n        '/*<br>  NSIS Scheme<br>  for highlight.js<br>*/<br><br><span class=\"synComment\">; Includes</span><br><span class=\"synPreProc\">!include</span> MUI2.nsh<br><br><span class=\"synComment\">; Defines</span><br><span class=\"synPreProc\">!define</span> <span class=\"synConstant\">x64</span> <span class=\"synConstant\">\"true\"</span><br><br><span class=\"synComment\">; Settings</span><br><span class=\"synType\">Name</span> <span class=\"synConstant\">\"installer_name\"</span><br><span class=\"synType\">OutFile</span> <span class=\"synConstant\">\"installer_name.exe\"</span><br>RequestExecutionLevel user<br><span class=\"synType\">CRCCheck</span> <span class=\"synConstant\">on</span><br><br><span class=\"synPreProc\">!ifdef</span> <span class=\"synPreProc\">${x64}</span><br>  <span class=\"synType\">InstallDir</span> <span class=\"synConstant\">\"</span><span class=\"synIdentifier\">$PROGRAMFILES</span><span class=\"synConstant\">64\\\\installer_name\"</span><br><span class=\"synPreProc\">!else</span><br>  <span class=\"synType\">InstallDir</span> <span class=\"synConstant\">\"</span><span class=\"synIdentifier\">$PROGRAMFILES</span><span class=\"synConstant\">\\\\installer_name\"</span><br><span class=\"synPreProc\">!endif</span><br><br><span class=\"synComment\">; Pages</span><br><span class=\"synPreProc\">!insertmacro</span> MUI_PAGE_INSTFILES<br><br><span class=\"synComment\">; Sections</span><br><span class=\"synStatement\">Section</span> <span class=\"synConstant\">\"section_name\"</span> section_index<br>  <span class=\"synStatement\">nsExec:</span>:ExecToLog <span class=\"synConstant\">\"calc.exe\"</span><br><span class=\"synStatement\">SectionEnd</span><br><br><span class=\"synComment\">; Functions</span><br><span class=\"synStatement\">Function</span> <span class=\"synStatement\">.onInit</span><br>  <span class=\"synIdentifier\">DetailPrint</span> <span class=\"synConstant\">\"The install button reads $(^InstallBtn)\"</span><br>  <span class=\"synIdentifier\">DetailPrint</span> <span class=\"synConstant\">\\'Here comes a</span><span class=\"synIdentifier\">$<br>$\\\\r</span><span class=\"synConstant\">line-break!\\'</span><br>  <span class=\"synIdentifier\">DetailPrint</span> <span class=\"synConstant\">`Escape the dollar-sign: </span><span class=\"synIdentifier\">$$</span><span class=\"synConstant\">`</span><br><span class=\"synStatement\">FunctionEnd</span><br>',\n    ocaml:\n        '<span class=\"synComment\">(* This is a</span><br><span class=\"synComment\">multiline, (* nested *) comment *)</span><br><span class=\"synStatement\">type</span> point <span class=\"synStatement\">=</span> <span class=\"synStatement\">{</span> x: <span class=\"synType\">float</span><span class=\"synStatement\">;</span> y: <span class=\"synType\">float</span> <span class=\"synStatement\">};;</span><br><span class=\"synStatement\">let</span> some_string <span class=\"synStatement\">=</span> <span class=\"synConstant\">\"this is a string\"</span><span class=\"synStatement\">;;</span><br><span class=\"synStatement\">let</span> <span class=\"synStatement\">rec</span> length lst <span class=\"synStatement\">=</span><br>    <span class=\"synStatement\">match</span> lst <span class=\"synStatement\">with</span><br>      <span class=\"synConstant\">[]</span> <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">0</span><br>    <span class=\"synStatement\">|</span> head <span class=\"synStatement\">::</span> tail <span class=\"synStatement\">-&gt;</span> <span class=\"synConstant\">1</span> + length tail<br>  <span class=\"synStatement\">;;</span><br><span class=\"synStatement\">exception</span> <span class=\"synConstant\">Test</span><span class=\"synStatement\">;;</span><br><span class=\"synStatement\">type</span> expression <span class=\"synStatement\">=</span><br>      <span class=\"synConstant\">Const</span> <span class=\"synStatement\">of</span> <span class=\"synType\">float</span><br>    <span class=\"synStatement\">|</span> <span class=\"synConstant\">Var</span> <span class=\"synStatement\">of</span> <span class=\"synType\">string</span><br>    <span class=\"synStatement\">|</span> <span class=\"synConstant\">Sum</span> <span class=\"synStatement\">of</span> expression <span class=\"synStatement\">*</span> expression    <span class=\"synComment\">(* e1 + e2 *)</span><br>    <span class=\"synStatement\">|</span> <span class=\"synConstant\">Diff</span> <span class=\"synStatement\">of</span> expression <span class=\"synStatement\">*</span> expression   <span class=\"synComment\">(* e1 - e2 *)</span><br>    <span class=\"synStatement\">|</span> <span class=\"synConstant\">Prod</span> <span class=\"synStatement\">of</span> expression <span class=\"synStatement\">*</span> expression   <span class=\"synComment\">(* e1 * e2 *)</span><br>    <span class=\"synStatement\">|</span> <span class=\"synConstant\">Quot</span> <span class=\"synStatement\">of</span> expression <span class=\"synStatement\">*</span> expression   <span class=\"synComment\">(* e1 / e2 *)</span><br><span class=\"synStatement\">class</span> point <span class=\"synStatement\">=</span><br>    <span class=\"synPreProc\">object</span><br>      <span class=\"synStatement\">val</span> <span class=\"synStatement\">mutable</span> x <span class=\"synStatement\">=</span> <span class=\"synConstant\">0</span><br>      <span class=\"synStatement\">method</span> get_x <span class=\"synStatement\">=</span> x<br>      <span class=\"synStatement\">method</span> <span class=\"synStatement\">private</span> move d <span class=\"synStatement\">=</span> x <span class=\"synStatement\">&lt;-</span> x + d<br>    <span class=\"synPreProc\">end</span><span class=\"synStatement\">;;</span><br>',\n    perl:\n        '<span class=\"synComment\"># loads object</span><br><span class=\"synStatement\">sub </span><span class=\"synIdentifier\">load</span><br>{<br>  <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$flds</span> = <span class=\"synIdentifier\">$c-&gt;db_load</span>(<span class=\"synIdentifier\">$id</span>,<span class=\"synIdentifier\">@_</span>) || <span class=\"synStatement\">do</span> {<br>    Carp::carp <span class=\"synConstant\">\"Can`t load (class: </span><span class=\"synIdentifier\">$c</span><span class=\"synConstant\">, id: </span><span class=\"synIdentifier\">$id</span><span class=\"synConstant\">): \\'</span><span class=\"synIdentifier\">$!</span><span class=\"synConstant\">\\'\"</span>; <span class=\"synStatement\">return</span> <span class=\"synStatement\">undef</span><br>  };<br>  <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$o</span> = <span class=\"synIdentifier\">$c-&gt;_perl_new</span>();<br>  <span class=\"synIdentifier\">$id12</span> = <span class=\"synIdentifier\">$id</span> / <span class=\"synConstant\">24</span> / <span class=\"synConstant\">3600</span>;<br>  <span class=\"synIdentifier\">$o-&gt;{</span><span class=\"synConstant\">\\'ID\\'</span><span class=\"synIdentifier\">}</span> = <span class=\"synIdentifier\">$id12</span> + <span class=\"synConstant\">123</span>;<br>  <span class=\"synComment\">#$o-&gt;{\\'SHCUT\\'} = $flds-&gt;{\\'SHCUT\\'};</span><br>  <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$p</span> = <span class=\"synIdentifier\">$o-&gt;props</span>;<br>  <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$vt</span>;<br>  <span class=\"synIdentifier\">$string</span> =~ <span class=\"synStatement\">m/</span><span class=\"synConstant\">^sought_text$</span><span class=\"synStatement\">/</span>;<br>  <span class=\"synIdentifier\">$items</span> = <span class=\"synStatement\">split</span> <span class=\"synStatement\">//</span>, <span class=\"synConstant\">\\'abc\\'</span>;<br>  <span class=\"synIdentifier\">$string</span> //= <span class=\"synConstant\">\"bar\"</span>;<br>  <span class=\"synStatement\">for</span> <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$key</span> (<span class=\"synStatement\">keys</span> <span class=\"synIdentifier\">%$p</span>)<br>  {<br>    <span class=\"synStatement\">if</span>(<span class=\"synIdentifier\">${$vt</span>.<span class=\"synConstant\">\\'::property\\'</span><span class=\"synIdentifier\">}</span>) {<br>      <span class=\"synIdentifier\">$o-&gt;{$key</span> . <span class=\"synConstant\">\\'_real\\'</span><span class=\"synIdentifier\">}</span> = <span class=\"synIdentifier\">$flds-&gt;{$key}</span>;<br>      <span class=\"synStatement\">tie</span> <span class=\"synIdentifier\">$o-&gt;{$key}</span>, <span class=\"synConstant\">\\'CMSBuilder::Property\\'</span>, <span class=\"synIdentifier\">$o</span>, <span class=\"synIdentifier\">$key</span>;<br>    }<br>  }<br>  <span class=\"synIdentifier\">$o-&gt;save</span> <span class=\"synStatement\">if</span> <span class=\"synStatement\">delete</span> <span class=\"synIdentifier\">$o-&gt;{</span><span class=\"synConstant\">\\'_save_after_load\\'</span><span class=\"synIdentifier\">}</span>;<br><br>  <span class=\"synComment\"># GH-117</span><br>  <span class=\"synStatement\">my</span> <span class=\"synIdentifier\">$g</span> = <span class=\"synStatement\">glob</span>(<span class=\"synConstant\">\"/usr/bin/*\"</span>);<br><br>  <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">$o</span>;<br>}<br><br><span class=\"synComment\">__DATA__</span><br><span class=\"synComment\">@@ layouts/default.html.ep</span><br><span class=\"synComment\">&lt;!DOCTYPE html&gt;</span><br><span class=\"synComment\">&lt;html&gt;</span><br><span class=\"synComment\">  &lt;head&gt;&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"synComment\">  &lt;body&gt;&lt;%= content %&gt;&lt;/body&gt;</span><br><span class=\"synComment\">&lt;/html&gt;</span><br><span class=\"synComment\">__END__</span><br><br><span class=\"synComment\">=head1 NAME</span><br><span class=\"synComment\">POD till the end of file</span><br>',\n    pf:\n        '<span class=\"synComment\"># from the PF FAQ: http://www.openbsd.org/faq/pf/example1.html</span><br><br><span class=\"synComment\"># macros</span><br><br><span class=\"synIdentifier\">int_if</span>=\"xl0\"<br><br><span class=\"synIdentifier\">tcp_services</span>=\"{ <span class=\"synConstant\">22</span>, <span class=\"synConstant\">113</span> }\"<br><span class=\"synIdentifier\">icmp_types</span>=\"echoreq\"<br><br><span class=\"synIdentifier\">comp3</span>=\"<span class=\"synType\">192.168.0.3</span>\"<br><br><span class=\"synComment\"># options</span><br><br><span class=\"synStatement\">set</span> block-policy return<br><span class=\"synStatement\">set</span> loginterface egress<br><span class=\"synStatement\">set</span> skip on lo<br><br><span class=\"synComment\"># FTP Proxy rules</span><br><br><span class=\"synStatement\">anchor</span> \"<span class=\"synConstant\">ftp</span>-proxy/*\"<br><br><span class=\"synStatement\">pass</span> in quick on <span class=\"synIdentifier\">$int_if</span> inet proto tcp to <span class=\"synType\">any</span> port <span class=\"synConstant\">ftp</span> <span class=\"synStatement\">\\\\</span><br>    divert-to <span class=\"synType\">127.0.0.1</span> port <span class=\"synConstant\">8021</span><br><br><span class=\"synComment\"># match rules</span><br><br>match out on egress inet from !(egress:network) to <span class=\"synType\">any</span> <span class=\"synStatement\">nat</span>-to (egress:0)<br><br><span class=\"synComment\"># filter rules</span><br><br><span class=\"synStatement\">block </span>in log<br><span class=\"synStatement\">pass</span> out quick<br><br><span class=\"synStatement\">antispoof</span> quick for { lo <span class=\"synIdentifier\">$int_if</span> }<br><br><span class=\"synStatement\">pass</span> in on egress inet proto tcp from <span class=\"synType\">any</span> to (egress) <span class=\"synStatement\">\\\\</span><br>    port <span class=\"synIdentifier\">$tcp_services</span><br><br><span class=\"synStatement\">pass</span> in on egress inet proto tcp to (egress) port <span class=\"synConstant\">80</span> <span class=\"synStatement\">rdr</span>-to <span class=\"synIdentifier\">$comp3</span><br><br><span class=\"synStatement\">pass</span> in inet proto icmp <span class=\"synType\">all</span> icmp-type <span class=\"synIdentifier\">$icmp_types</span><br><br><span class=\"synStatement\">pass</span> in on <span class=\"synIdentifier\">$int_if</span><br>',\n    php:\n        'require_once \\'Zend/Uri/Http.php\\';<br><br>namespace Location\\\\Web;<br><br>interface Factory<br>{<br>    static function _factory();<br>}<br><br>abstract class URI extends BaseURI implements Factory<br>{<br>    abstract function test();<br><br>    public static $st1 = 1;<br>    const ME = \"Yo\";<br>    var $list = NULL;<br>    private $var;<br><br>    /**<br>     * Returns a URI<br>     *<br>     * <span class=\"synPreProc\">@return </span>URI<br>     */<br>    static public function _factory($stats = array(), $uri = \\'http\\')<br>    {<br>        echo __METHOD__;<br>        $uri = explode(\\':\\', $uri, 0b10);<br>        $schemeSpecific = <span class=\"synStatement\">isset</span>($uri[1]) ? $uri[1] : \\'\\';<br>        $desc = \\'Multi<br>line description\\';<br><br>        // Security check<br>        if (!ctype_alnum($scheme)) {<br>            throw new Zend_Uri_Exception(\\'Illegal scheme\\');<br>        }<br><br>        $this-<span class=\"synError\">&gt;</span>var = 0 - self::$st;<br>        $this-<span class=\"synError\">&gt;</span>list = list(Array(\"1\"=<span class=\"synError\">&gt;</span> 2, 2=<span class=\"synError\">&gt;</span>self::ME, 3 =<span class=\"synError\">&gt;</span> \\\\Location\\\\Web\\\\URI::class));<br><br>        return [<br>            \\'uri\\'   =<span class=\"synError\">&gt;</span> $uri,<br>            \\'value\\' =<span class=\"synError\">&gt;</span> null,<br>        ];<br>    }<br>}<br><br>echo URI::ME . URI::$st1;<br><br>__halt_compiler () ; datahere<br>datahere<br>datahere */<br>datahere<br>',\n    processing:\n        '<span class=\"synPreProc\">import</span> java.util.LinkedList;<br><span class=\"synPreProc\">import</span> java.awt.Point;<br><br><span class=\"synType\">PGraphics</span> pg;<br><span class=\"synType\">String</span> load;<br><br><span class=\"synType\">void</span> <span class=\"synIdentifier\">setup</span>() {<br>  <span class=\"synIdentifier\">size</span>(<span class=\"synConstant\">displayWidth</span>, <span class=\"synConstant\">displayHeight</span>, <span class=\"synConstant\">P3D</span>);<br>  pg = <span class=\"synIdentifier\">createGraphics</span>(<span class=\"synConstant\">displayWidth</span>*<span class=\"synConstant\">2</span>,<span class=\"synConstant\">displayHeight</span>,<span class=\"synConstant\">P2D</span>);<br>  pg.beginDraw();<br>  pg.background(<span class=\"synConstant\">255</span>,<span class=\"synConstant\">255</span>,<span class=\"synConstant\">255</span>);<br>  <span class=\"synComment\">//pg.smooth(8);</span><br>  pg.endDraw();<br>}<br><span class=\"synType\">void</span> <span class=\"synIdentifier\">draw</span>(){<br>  <span class=\"synIdentifier\">background</span>(<span class=\"synConstant\">255</span>);<br>}<br>',\n    prolog:\n        '<span class=\"synConstant\">mergesort</span>([],[]). <span class=\"synComment\">% special case</span><br><span class=\"synConstant\">mergesort</span>([A],[A]).<br><span class=\"synConstant\">mergesort</span>([A,B|R],S) <span class=\"synSpecial\">:-</span><br>   split([A,B|R],L1,L2),<br>   mergesort(L1,S1),<br>   mergesort(L2,S2),<br>   merge(S1,S2,S).<br><br><span class=\"synConstant\">split</span>([],[],[]).<br><span class=\"synConstant\">split</span>([A],[A],[]).<br><span class=\"synConstant\">split</span>([A,B|R],[A|Ra],[B|Rb]) <span class=\"synSpecial\">:-</span>  split(R,Ra,Rb).<br>',\n    python:\n        '<span class=\"synPreProc\">@</span><span class=\"synIdentifier\">requires_authorization</span><br><span class=\"synStatement\">def</span> <span class=\"synIdentifier\">somefunc</span>(param1=<span class=\"synConstant\">\\'\\'</span>, param2=<span class=\"synConstant\">0</span>):<br>    <span class=\"synConstant\">r\\'\\'\\'A docstring\\'\\'\\'</span><br>    <span class=\"synStatement\">if</span> param1 &gt; param2: <span class=\"synComment\"># interesting</span><br>        <span class=\"synIdentifier\">print</span> <span class=\"synConstant\">\\'Gre</span><span class=\"synSpecial\">\\\\\\'</span><span class=\"synConstant\">ater\\'</span><br>    <span class=\"synStatement\">return</span> (param2 - param1 + <span class=\"synConstant\">1</span> + <span class=\"synConstant\">0b10l</span>) <span class=\"synStatement\">or</span> <span class=\"synIdentifier\">None</span><br><br><span class=\"synStatement\">class</span> <span class=\"synIdentifier\">SomeClass</span>:<br>    <span class=\"synStatement\">pass</span><br><br>&gt;&gt;&gt; message = <span class=\"synConstant\">\\'\\'\\'interpreter</span><br><span class=\"synConstant\">... prompt\\'\\'\\'</span><br>',\n    r:\n        '<span class=\"synPreProc\">library</span><span class=\"synSpecial\">(</span>ggplot2<span class=\"synSpecial\">)</span><br><br>centre <span class=\"synStatement\">&lt;-</span> <span class=\"synType\">function</span><span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">,</span> type<span class=\"synSpecial\">,</span> ...<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">{</span><br>  switch<span class=\"synSpecial\">(</span>type<span class=\"synSpecial\">,</span><br>         mean <span class=\"synStatement\">=</span> mean<span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">),</span><br>         median <span class=\"synStatement\">=</span> median<span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">),</span><br>         trimmed <span class=\"synStatement\">=</span> mean<span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">,</span> trim <span class=\"synStatement\">=</span> <span class=\"synConstant\">.1</span><span class=\"synSpecial\">))</span><br><span class=\"synSpecial\">}</span><br><br>myVar1<br>myVar.2<br>data<span class=\"synSpecial\">$</span>x<br>foo <span class=\"synConstant\">\"bar\"</span> baz<br><span class=\"synComment\"># test \"test\"</span><br><span class=\"synConstant\">\"test # test\"</span><br><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">123</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">10</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">0.1</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">.2</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1e-7</span><span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">1.2e+7</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span>2e<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3e+10</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">0x0</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">0xa</span><span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">0xabcdef1234567890</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">123L</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1L</span><span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">0x10</span>L<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">10000000L</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1e6</span>L<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1.1</span>L<span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">1e-3</span>L<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">4123.381E-10i</span><span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synConstant\">3.</span><span class=\"synSpecial\">)</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">3.E10</span><span class=\"synSpecial\">)</span> <span class=\"synComment\"># </span><span class=\"synTodo\">BUG:</span><span class=\"synComment\"> .E10 should be part of number</span><br><br><span class=\"synComment\"># Numbers in some different contexts</span><br><span class=\"synConstant\">1L</span><br><span class=\"synConstant\">0x40</span><br><span class=\"synConstant\">.234</span><br><span class=\"synConstant\">3.</span><br><span class=\"synConstant\">1L</span> <span class=\"synStatement\">+</span> <span class=\"synConstant\">30</span><br>plot<span class=\"synSpecial\">(</span>cars<span class=\"synSpecial\">,</span> xlim<span class=\"synStatement\">=</span><span class=\"synConstant\">20</span><span class=\"synSpecial\">)</span><br>plot<span class=\"synSpecial\">(</span>cars<span class=\"synSpecial\">,</span> xlim<span class=\"synStatement\">=</span><span class=\"synConstant\">0x20</span><span class=\"synSpecial\">)</span><br>foo<span class=\"synStatement\">&lt;-</span><span class=\"synConstant\">30</span><br>my.data.3 <span class=\"synStatement\">&lt;-</span> read<span class=\"synSpecial\">()</span> <span class=\"synComment\"># not a number</span><br>c<span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">,</span><span class=\"synConstant\">2</span><span class=\"synSpecial\">,</span><span class=\"synConstant\">3</span><span class=\"synSpecial\">)</span><br><span class=\"synConstant\">1</span><span class=\"synStatement\">%%</span><span class=\"synConstant\">2</span><br><br><span class=\"synConstant\">\"this is a quote that spans</span><br><span class=\"synConstant\">multiple lines</span><br><span class=\"synSpecial\">\\\\\"</span><br><br>is this still a quote? it should be.<br><span class=\"synComment\"># even still!</span><br><br><span class=\"synConstant\">\" # now we\\'re done.</span><br><br><span class=\"synConstant\">\\'same for</span><br><span class=\"synConstant\">single quotes #\\'</span><br><br><span class=\"synComment\"># keywords</span><br><span class=\"synConstant\">NULL</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NA</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">TRUE</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">FALSE</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">Inf</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NaN</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NA_integer_</span><span class=\"synSpecial\">,</span><br><span class=\"synConstant\">NA_real_</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NA_character_</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NA_complex_</span><span class=\"synSpecial\">,</span> <span class=\"synType\">function</span><span class=\"synSpecial\">,</span><br><span class=\"synStatement\">while</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">repeat</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">for</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">if</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">in</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">else</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">next</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">break</span><span class=\"synSpecial\">,</span><br>...<span class=\"synSpecial\">,</span> ..1<span class=\"synSpecial\">,</span> ..2<br><br><span class=\"synComment\"># not keywords</span><br>the quick brown fox jumped over the lazy dogs<br>null na true false inf nan na_integer_ na_real_<br>na_character_ na_complex_ Function While Repeat<br>For If In Else Next Break .. .... <span class=\"synConstant\">\"NULL\"</span> `NULL` <span class=\"synConstant\">\\'NULL\\'</span><br><br><span class=\"synComment\"># operators</span><br><span class=\"synStatement\">+</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">-</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">*</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">/</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">%%</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">^</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&gt;</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&gt;=</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&lt;</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&lt;=</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">==</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">!=</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">!</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&amp;</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">|</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">~</span><span class=\"synSpecial\">,</span><br><span class=\"synStatement\">-&gt;</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&lt;-</span><span class=\"synSpecial\">,</span> <span class=\"synStatement\">&lt;&lt;-</span><span class=\"synSpecial\">,</span> <span class=\"synSpecial\">$,</span> <span class=\"synSpecial\">:,</span> <span class=\"synSpecial\">::</span><br><br><span class=\"synComment\"># infix operator</span><br>foo <span class=\"synStatement\">%union%</span> bar<br><span class=\"synStatement\">%\"test\"%</span><br>`\"test\"`<br><br>',\n    rib:\n        '<span class=\"synType\">FrameBegin</span> <span class=\"synConstant\">0</span><br><span class=\"synStatement\">Display</span> <span class=\"synConstant\">\"Scene\"</span> <span class=\"synConstant\">\"framebuffer\"</span> <span class=\"synConstant\">\"rgb\"</span><br><span class=\"synStatement\">Option</span> <span class=\"synConstant\">\"searchpath\"</span> <span class=\"synConstant\">\"shader\"</span> <span class=\"synConstant\">\"+&amp;:/home/kew\"</span><br><span class=\"synStatement\">Option</span> <span class=\"synConstant\">\"trace\"</span> <span class=\"synConstant\">\"int maxdepth\"</span> [<span class=\"synConstant\">4</span>]<br><span class=\"synStatement\">Attribute</span> <span class=\"synConstant\">\"visibility\"</span> <span class=\"synConstant\">\"trace\"</span> [<span class=\"synConstant\">1</span>]<br><span class=\"synStatement\">Attribute</span> <span class=\"synConstant\">\"irradiance\"</span> <span class=\"synConstant\">\"maxerror\"</span> [<span class=\"synConstant\">0.1</span>]<br><span class=\"synStatement\">Attribute</span> <span class=\"synConstant\">\"visibility\"</span> <span class=\"synConstant\">\"transmission\"</span> <span class=\"synConstant\">\"opaque\"</span><br><span class=\"synStatement\">Format</span> <span class=\"synConstant\">640</span> <span class=\"synConstant\">480</span> <span class=\"synConstant\">1.0</span><br><span class=\"synStatement\">ShadingRate</span> <span class=\"synConstant\">2</span><br><span class=\"synStatement\">PixelFilter</span> <span class=\"synConstant\">\"catmull-rom\"</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span><br><span class=\"synStatement\">PixelSamples</span> <span class=\"synConstant\">4</span> <span class=\"synConstant\">4</span><br><span class=\"synStatement\">Projection</span> <span class=\"synConstant\">\"perspective\"</span> <span class=\"synConstant\">\"fov\"</span> <span class=\"synConstant\">49.5502811377</span><br><span class=\"synStatement\">Scale</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">1</span> <span class=\"synConstant\">-1</span><br><br><span class=\"synType\">WorldBegin</span><br><br><span class=\"synStatement\">ReadArchive</span> <span class=\"synConstant\">\"Lamp.002_Light/instance.rib\"</span><br><span class=\"synStatement\">Surface</span> <span class=\"synConstant\">\"plastic\"</span><br><span class=\"synStatement\">ReadArchive</span> <span class=\"synConstant\">\"Cube.004_Mesh/instance.rib\"</span><br><span class=\"synComment\"># ReadArchive \"Sphere.010_Mesh/instance.rib\"</span><br><span class=\"synComment\"># ReadArchive \"Sphere.009_Mesh/instance.rib\"</span><br><span class=\"synStatement\">ReadArchive</span> <span class=\"synConstant\">\"Sphere.006_Mesh/instance.rib\"</span><br><br><span class=\"synType\">WorldEnd</span><br><span class=\"synType\">FrameEnd</span><br>',\n    ruby:\n        '<span class=\"synComment\"># The Greeter class</span><br><span class=\"synPreProc\">class</span> <span class=\"synType\">Greeter</span><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">initialize</span>(name)<br>    <span class=\"synIdentifier\">@name</span> = name.capitalize<br>  <span class=\"synPreProc\">end</span><br><br>  <span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">salute</span><br>    puts <span class=\"synSpecial\">\"</span><span class=\"synConstant\">Hello </span><span class=\"synSpecial\">#{</span><span class=\"synIdentifier\">@name</span><span class=\"synSpecial\">}</span><span class=\"synConstant\">!</span><span class=\"synSpecial\">\"</span><br>  <span class=\"synPreProc\">end</span><br><span class=\"synPreProc\">end</span><br><br>g = <span class=\"synType\">Greeter</span>.new(<span class=\"synSpecial\">\"</span><span class=\"synConstant\">world</span><span class=\"synSpecial\">\"</span>)<br>g.salute<br>',\n    rust:\n        '<span class=\"synPreProc\">#[derive(</span><span class=\"synType\">Debug</span><span class=\"synPreProc\">)]</span><br><span class=\"synStatement\">pub</span> <span class=\"synStatement\">enum</span> <span class=\"synIdentifier\">State</span> {<br>    Start,<br>    Transient,<br>    Closed,<br>}<br><br><span class=\"synStatement\">impl</span> <span class=\"synType\">From</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">&amp;</span><span class=\"synSpecial\">\\'a</span> <span class=\"synType\">str</span><span class=\"synStatement\">&gt;</span> <span class=\"synStatement\">for</span> State {<br>    <span class=\"synStatement\">fn</span> <span class=\"synIdentifier\">from</span>(s: <span class=\"synType\">&amp;</span><span class=\"synSpecial\">\\'a</span> <span class=\"synType\">str</span>) <span class=\"synStatement\">-&gt;</span> <span class=\"synType\">Self</span> {<br>        <span class=\"synStatement\">match</span> s {<br>            <span class=\"synConstant\">\"start\"</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synPreProc\">State</span><span class=\"synSpecial\">::</span>Start,<br>            <span class=\"synConstant\">\"closed\"</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synPreProc\">State</span><span class=\"synSpecial\">::</span>Closed,<br>            _ <span class=\"synStatement\">=&gt;</span> <span class=\"synPreProc\">unreachable!</span>(),<br>        }<br>    }<br>}<br>',\n    sas:\n        '/**********************************************************************<br> * Program: example.sas<br> * Purpose: SAS Example for HighlightJS Plug-in<br> **********************************************************************/<br><br>%put Started at %sysfunc(putn(%sysfunc(datetime()), datetime.));<br>options<br>    errors = 20  /* Maximum number of prints of repeat errors */<br>    fullstimer   /* Detailed timer after each step execution  */<br>;<br><br>%let maindir = /path/to/maindir;<br>%let outdir  = &amp;maindir/out.;<br><br>systask command \"mkdir -p &amp;outdir.\" wait;<br>libname main \"&amp;maindir\" access = readonly;<br><br>data testing;<br>    input name $ number delimiter = \",\";<br>    datalines;<br>    John,1<br>    Mary,2<br>    Jane,3<br>    ;<br>    if number &gt; 1 then final = 0;<br>    else do;<br>        final = 1;<br>    end;<br>run;<br><br>%macro testMacro(positional, named = value);<br>    %put positional = &amp;positional.;<br>    %put named      = &amp;named.;<br>%mend testMacro;<br>%testMacro(positional, named = value);<br><br>dm \\'clear log output odsresults\\';<br><br>proc datasets lib = work kill noprint; quit;<br>libname <span class=\"synPreProc\">_all_</span> clear;<br><br>data <span class=\"synPreProc\">_null_</span>;<br>    set sashelp.macro(<br>        keep  = name<br>        where = (scope = \"global\");<br>    );<br>    call symdel(name);<br>run;<br>',\n    scala:\n        '<span class=\"synComment\">/**</span><br><span class=\"synComment\"> * A person has a name and an age.</span><br><span class=\"synComment\"> */</span><br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Person(name: <span class=\"synConstant\">String</span>, age: Int)<br><br><span class=\"synType\">abstract</span> <span class=\"synType\">class</span> Vertical <span class=\"synType\">extends</span> CaseJeu<br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Haut(a: Int) <span class=\"synType\">extends</span> Vertical<br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Bas(name: <span class=\"synConstant\">String</span>, b: Double) <span class=\"synType\">extends</span> Vertical<br><br><span class=\"synType\">sealed</span> <span class=\"synType\">trait</span> Ior[+A, +B]<br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Left[A](a: A) <span class=\"synType\">extends</span> Ior[A, Nothing]<br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Right[B](b: B) <span class=\"synType\">extends</span> Ior[Nothing, B]<br><span class=\"synType\">case</span> <span class=\"synType\">class</span> Both[A, B](a: A, b: B) <span class=\"synType\">extends</span> Ior[A, B]<br><br><span class=\"synType\">trait</span> Functor[F[_]] {<br><span class=\"synIdentifier\">  def</span> map[A, B](fa: F[A], f: A =&gt; B): F[B]<br>}<br><br><span class=\"synComment\">// beware Int.MinValue</span><br><span class=\"synIdentifier\">def</span> absoluteValue(n: Int): Int =<br>  <span class=\"synStatement\">if</span> (n &lt; <span class=\"synConstant\">0</span>) -n <span class=\"synStatement\">else</span> n<br><br><span class=\"synIdentifier\">def</span> interp(n: Int): <span class=\"synConstant\">String</span> =<br>  s<span class=\"synConstant\">\"there are $n ${color} balloons.<br>\"</span><br><br><span class=\"synType\">type</span> ξ[A] = (A, A)<br><br><span class=\"synType\">trait</span> Hist { lhs =&gt;<br><span class=\"synIdentifier\">  def</span> ⊕(rhs: Hist): Hist<br>}<br><br><span class=\"synIdentifier\">def</span> gsum[A: Ring](as: Seq[A]): A =<br>  as.foldLeft(Ring[A].zero)(_ + _)<br><br><span class=\"synType\">val</span> actions: List[Symbol] =<br>  \\'init :: \\'read :: \\'write :: \\'close :: Nil<br><br><span class=\"synType\">trait</span> Cake {<br>  <span class=\"synType\">type</span> T;<br>  <span class=\"synType\">type</span> Q<br>  <span class=\"synType\">val</span> things: Seq[T]<br><br>  <span class=\"synType\">abstract</span> <span class=\"synType\">class</span> Spindler<br><br><span class=\"synIdentifier\">  def</span> spindle(s: Spindler, ts: Seq[T], reversed: Boolean = <span class=\"synConstant\">false</span>): Seq[Q]<br>}<br><br><span class=\"synType\">val</span> colors = Map(<br>  <span class=\"synConstant\">\"red\"</span>       -&gt; <span class=\"synConstant\">0xFF0000</span>,<br>  <span class=\"synConstant\">\"turquoise\"</span> -&gt; <span class=\"synConstant\">0x00FFFF</span>,<br>  <span class=\"synConstant\">\"black\"</span>     -&gt; <span class=\"synConstant\">0x000000</span>,<br>  <span class=\"synConstant\">\"orange\"</span>    -&gt; <span class=\"synConstant\">0xFF8040</span>,<br>  <span class=\"synConstant\">\"brown\"</span>     -&gt; <span class=\"synConstant\">0x804000</span>)<br><br>lazy <span class=\"synType\">val</span> ns = <span class=\"synStatement\">for</span> {<br>  x &lt;- <span class=\"synConstant\">0</span> until <span class=\"synConstant\">100</span><br>  y &lt;- <span class=\"synConstant\">0</span> until <span class=\"synConstant\">100</span><br>} <span class=\"synType\">yield</span> (x + y) * <span class=\"synConstant\">33.33</span><br>',\n    scheme:\n        '<span class=\"synComment\">;; Calculation of Hofstadter\\'s male and female sequences as a list of pairs</span><br><br><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>hofstadter-male-female n<span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synStatement\">letrec</span> <span class=\"synSpecial\">((</span>female <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span><br>           <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span><br>           <span class=\"synConstant\">1</span><br>           <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synSpecial\">(</span>male <span class=\"synSpecial\">(</span>female <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span><br>     <span class=\"synSpecial\">(</span>male <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>n<span class=\"synSpecial\">)</span><br>         <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">=</span> n <span class=\"synConstant\">0</span><span class=\"synSpecial\">)</span><br>             <span class=\"synConstant\">0</span><br>             <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synSpecial\">(</span>female <span class=\"synSpecial\">(</span>male <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">-</span> n <span class=\"synConstant\">1</span><span class=\"synSpecial\">))))))))</span><br>  <span class=\"synSpecial\">(</span><span class=\"synStatement\">let</span> loop <span class=\"synSpecial\">((</span>i <span class=\"synConstant\">0</span><span class=\"synSpecial\">))</span><br>    <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">&gt;</span> i n<span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">\\'()</span><br>    <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">cons</span> <span class=\"synSpecial\">(</span>female i<span class=\"synSpecial\">)</span><br>            <span class=\"synSpecial\">(</span>male i<span class=\"synSpecial\">))</span><br>      <span class=\"synSpecial\">(</span>loop <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">+</span> i <span class=\"synConstant\">1</span><span class=\"synSpecial\">)))))))</span><br><br><span class=\"synSpecial\">(</span>hofstadter-male-female <span class=\"synConstant\">8</span><span class=\"synSpecial\">)</span><br><br><span class=\"synSpecial\">(</span><span class=\"synStatement\">define</span> <span class=\"synSpecial\">(</span>find-first func lst<span class=\"synSpecial\">)</span><br><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">call-with-current-continuation</span><br> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>return-immediately<span class=\"synSpecial\">)</span><br>   <span class=\"synSpecial\">(</span><span class=\"synIdentifier\">for-each</span> <span class=\"synSpecial\">(</span><span class=\"synStatement\">lambda</span> <span class=\"synSpecial\">(</span>x<span class=\"synSpecial\">)</span><br>       <span class=\"synSpecial\">(</span><span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>func x<span class=\"synSpecial\">)</span><br>           <span class=\"synSpecial\">(</span>return-immediately x<span class=\"synSpecial\">)))</span><br>         lst<span class=\"synSpecial\">)</span><br>   <span class=\"synConstant\">#f</span><span class=\"synSpecial\">)))</span><br>',\n    scilab:\n        '<span class=\"synComment\">// A comment</span><br><span class=\"synStatement\">function</span> <span class=\"synIdentifier\">I</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">foo</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">dims</span><span class=\"synSpecial\">,</span> <span class=\"synIdentifier\">varargin</span><span class=\"synSpecial\">)</span><br>  <span class=\"synIdentifier\">d</span><span class=\"synStatement\">=</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">;</span> <span class=\"synIdentifier\">matrix</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">dims</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span><span class=\"synStatement\">:</span>$<span class=\"synStatement\">-</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">),</span><span class=\"synStatement\">-</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">,</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">)]</span><br>  <span class=\"synStatement\">for</span> <span class=\"synIdentifier\">i</span><span class=\"synStatement\">=</span><span class=\"synConstant\">1</span><span class=\"synStatement\">:</span><span class=\"synIdentifier\">size</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">varargin</span><span class=\"synSpecial\">)</span><br>    <span class=\"synStatement\">if</span> <span class=\"synIdentifier\">varargin</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">i</span><span class=\"synSpecial\">)</span><span class=\"synStatement\">==</span><span class=\"synSpecial\">[]</span> <span class=\"synStatement\">then</span><br>       <span class=\"synIdentifier\">I</span><span class=\"synStatement\">=</span><span class=\"synSpecial\">[],</span><br>       <span class=\"synStatement\">return</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">end</span><br>  <span class=\"synStatement\">end</span><br><span class=\"synStatement\">endfunction</span><br><br><span class=\"synIdentifier\">b</span> <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">cos</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">a</span><span class=\"synSpecial\">)</span> <span class=\"synStatement\">+</span> <span class=\"synIdentifier\">cosh</span><span class=\"synSpecial\">(</span><span class=\"synIdentifier\">a</span><span class=\"synSpecial\">);</span><br><span class=\"synIdentifier\">bar_matrix</span> <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span> <span class=\"synConstant\">\"Hello\"</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">\"world\"</span> <span class=\"synSpecial\">];</span><br><span class=\"synIdentifier\">foo_matrix</span> <span class=\"synStatement\">=</span> <span class=\"synSpecial\">[</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">2</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">3</span><span class=\"synSpecial\">;</span> <span class=\"synConstant\">4</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">5</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">6</span><span class=\"synSpecial\">];</span><br>',\n    sml:\n        '<span class=\"synStatement\">structure</span><span class=\"synPreProc\"> List</span> : <span class=\"synPreProc\">LIST</span> <span class=\"synStatement\">=</span><br>  <span class=\"synPreProc\">struct</span><br><br>    <span class=\"synStatement\">val</span> op +  <span class=\"synStatement\">=</span> <span class=\"synPreProc\">InlineT</span>.<span class=\"synPreProc\">DfltInt</span>.+<br><br>    <span class=\"synStatement\">datatype</span> <span class=\"synType\">list</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">datatype</span> <span class=\"synType\">list</span><br><br>    <span class=\"synStatement\">exception</span> <span class=\"synConstant\">Empty</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">Empty</span><br><br>    <span class=\"synStatement\">fun</span> last <span class=\"synConstant\">[]</span> <span class=\"synStatement\">=</span> <span class=\"synStatement\">raise</span> <span class=\"synConstant\">Empty</span><br>      <span class=\"synStatement\">|</span> last <span class=\"synStatement\">[</span>x<span class=\"synStatement\">]</span> <span class=\"synStatement\">=</span> x<br>      <span class=\"synStatement\">|</span> last <span class=\"synStatement\">(_::</span>r<span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span> last r<br><br>  <span class=\"synStatement\">fun</span> loop <span class=\"synStatement\">(</span><span class=\"synConstant\">[]</span>, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">EQUAL</span><br>    <span class=\"synStatement\">|</span> loop <span class=\"synStatement\">(</span><span class=\"synConstant\">[]</span>, <span class=\"synStatement\">_)</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">LESS</span><br>    <span class=\"synStatement\">|</span> loop <span class=\"synStatement\">(_</span>, <span class=\"synConstant\">[]</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span> <span class=\"synConstant\">GREATER</span><br>    <span class=\"synStatement\">|</span> loop <span class=\"synStatement\">(</span>x <span class=\"synStatement\">::</span> xs, y <span class=\"synStatement\">::</span> ys<span class=\"synStatement\">)</span> <span class=\"synStatement\">=</span><br>      <span class=\"synStatement\">(case</span> compare <span class=\"synStatement\">(</span>x, y<span class=\"synStatement\">)</span> <span class=\"synStatement\">of</span><br>     <span class=\"synConstant\">EQUAL</span> <span class=\"synStatement\">=</span>&gt; loop <span class=\"synStatement\">(</span>xs, ys<span class=\"synStatement\">)</span><br>         <span class=\"synStatement\">|</span> unequal <span class=\"synStatement\">=</span>&gt; unequal<span class=\"synStatement\">)</span><br>    <span class=\"synStatement\">in</span><br>  loop<br>    <span class=\"synPreProc\">end</span><br><br>  <span class=\"synError\">end</span> <span class=\"synComment\">(* structure List *)</span><br><br>',\n    sql:\n        '<span class=\"synStatement\">CREATE</span> <span class=\"synSpecial\">TABLE</span> <span class=\"synConstant\">\"topic\"</span> (<br>    <span class=\"synConstant\">\"id\"</span> serial <span class=\"synStatement\">NOT</span> <span class=\"synSpecial\">NULL</span> PRIMARY KEY,<br>    <span class=\"synConstant\">\"forum_id\"</span> <span class=\"synType\">integer</span> <span class=\"synStatement\">NOT</span> <span class=\"synSpecial\">NULL</span>,<br>    <span class=\"synConstant\">\"subject\"</span> <span class=\"synType\">varchar</span>(<span class=\"synConstant\">255</span>) <span class=\"synStatement\">NOT</span> <span class=\"synSpecial\">NULL</span><br>);<br><span class=\"synStatement\">ALTER</span> <span class=\"synSpecial\">TABLE</span> <span class=\"synConstant\">\"topic\"</span><br><span class=\"synSpecial\">ADD</span> CONSTRAINT forum_id FOREIGN KEY (<span class=\"synConstant\">\"forum_id\"</span>)<br>REFERENCES <span class=\"synConstant\">\"forum\"</span> (<span class=\"synConstant\">\"id\"</span>);<br><br><span class=\"synComment\">-- Initials</span><br><span class=\"synStatement\">insert</span> <span class=\"synSpecial\">into</span> <span class=\"synConstant\">\"topic\"</span> (<span class=\"synConstant\">\"forum_id\"</span>, <span class=\"synConstant\">\"subject\"</span>)<br><span class=\"synSpecial\">values</span> (<span class=\"synConstant\">2</span>, <span class=\"synConstant\">\\'D\\'\\'artagnian\\'</span>);<br>',\n    stata:\n        '<span class=\"synPreProc\">program</span> define gr_log<br><span class=\"synPreProc\">version</span> 6.0<br><br><span class=\"synPreProc\">local</span> or = <span class=\"synPreProc\">`2\\'</span><br><span class=\"synPreProc\">local</span> xunits = <span class=\"synPreProc\">`3\\'</span><br><span class=\"synPreProc\">local</span> b1 = <span class=\"synIdentifier\">ln(</span><span class=\"synPreProc\">`or\\'</span><span class=\"synIdentifier\">)</span><br><br><span class=\"synComment\">* make summary of logistic data from equation</span><br><span class=\"synPreProc\">set</span> obs <span class=\"synPreProc\">`xunits\\'</span><br><span class=\"synPreProc\">generate</span> pgty = 1 - 1/(1 + <span class=\"synIdentifier\">exp(</span>score<span class=\"synIdentifier\">)</span>)<br><span class=\"synComment\">/**</span><br><span class=\"synComment\"> * Comment 1</span><br><span class=\"synComment\">*/</span><br><span class=\"synPreProc\">reg</span> y x<br><span class=\"synComment\">* Comment 2</span><br><span class=\"synPreProc\">reg</span> y2 x<span class=\"synComment\"> //comment 3</span><br>This is a <span class=\"synPreProc\">`loc\\'</span> <span class=\"synPreProc\">$glob</span> <span class=\"synPreProc\">${glob2}</span><br>This is a `\"<span class=\"synConstant\">string </span>\"<span class=\"synConstant\"> </span>\"<span class=\"synConstant\">\\' </span>\"<span class=\"synConstant\">string</span><span class=\"synPreProc\">`1\\'</span><span class=\"synConstant\">two</span><span class=\"synPreProc\">${hi}</span>\"<span class=\"synConstant\"> bad </span>`\"<span class=\"synConstant\">string </span>\"<span class=\"synConstant\"> </span>\"<span class=\"synConstant\">\\' good </span>`\"<span class=\"synConstant\">string </span>\"<span class=\"synConstant\"> </span>\"<span class=\"synConstant\">\\'</span><br><br><span class=\"synComment\">//Limit to just the project ados</span><br><span class=\"synPreProc\">cap</span> <span class=\"synPreProc\">adopath</span> - SITE<br><span class=\"synPreProc\">cap</span> <span class=\"synPreProc\">adopath</span> - PLUS<br><span class=\"synComment\">/*cap adopath - PERSONAL</span><br><span class=\"synComment\">cap adopath - OLDPLACE*/</span><br><span class=\"synPreProc\">adopath</span> ++ \"<span class=\"synPreProc\">${dir_base}</span><span class=\"synConstant\">/code/ado/</span>\"<br>A string `\"<span class=\"synConstant\">Wow</span>\"\\'. `\"\"<span class=\"synConstant\">one</span>\"<span class=\"synConstant\"> </span>\"<span class=\"synConstant\">two</span>\"\"\\'<br>A <span class=\"synPreProc\">`local\\'</span> em<span class=\"synPreProc\">`b\\'</span>ed<br>a <span class=\"synPreProc\">global</span> <span class=\"synPreProc\">${dir_base}</span> <span class=\"synPreProc\">$dir_base</span> em<span class=\"synPreProc\">${b}</span>ed<br><br><span class=\"synStatement\">forval</span> i=1/4{<br>  <span class=\"synStatement\">if</span> <span class=\"synPreProc\">`i\\'</span>==2{<br>    <span class=\"synPreProc\">cap</span> <span class=\"synPreProc\">reg</span> y x1, robust<br>    <span class=\"synPreProc\">local</span> x = <span class=\"synIdentifier\">ln(</span>4<span class=\"synIdentifier\">)</span><br>    <span class=\"synPreProc\">local</span> x =<span class=\"synIdentifier\">ln(</span>4<span class=\"synIdentifier\">)</span><br>    <span class=\"synPreProc\">local</span> ln = ln<br>  }<br>}<br> <br><span class=\"synComment\">* add mlibs in the new adopath to the index</span><br><span class=\"synPreProc\">mata</span>: <span class=\"synPreProc\">mata</span> mlib index<br>',\n    swift:\n        '<span class=\"synPreProc\">import</span> Foundation<br><br><span class=\"synType\">@objc</span> <span class=\"synPreProc\">class</span> <span class=\"synType\">Person</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Entity</span> {<br>  <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">name</span><span class=\"synSpecial\">:</span> <span class=\"synType\">String</span><span class=\"synIdentifier\">!</span><br>  <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">age</span><span class=\"synSpecial\">:</span>  <span class=\"synType\">Int</span><span class=\"synIdentifier\">!</span><br><br>  <span class=\"synIdentifier\">init</span>(name<span class=\"synSpecial\">:</span> <span class=\"synType\">String</span>, age<span class=\"synSpecial\">:</span> <span class=\"synType\">Int</span>) {<br>    <span class=\"synComment\">/* /* ... */ */</span><br>  }<br><br>  <span class=\"synComment\">// Return a descriptive string for this person</span><br>  <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">description</span>(offset<span class=\"synSpecial\">:</span> <span class=\"synType\">Int</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span>) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">String</span> {<br>    <span class=\"synStatement\">return</span> <span class=\"synConstant\">\"</span><span class=\"synSpecial\">\\\\(name)</span><span class=\"synConstant\"> is </span><span class=\"synSpecial\">\\\\(age + offset)</span><span class=\"synConstant\"> years old\"</span><br>  }<br>}<br>',\n    tcl:\n        '<span class=\"synStatement\">package</span> json<br><br><span class=\"synStatement\">source</span> helper.tcl<br><span class=\"synComment\"># randomness verified by a die throw</span><br><span class=\"synStatement\">set</span> ::rand <span class=\"synConstant\">4</span><br><br><span class=\"synType\">proc</span> give::recursive::count {base p} { ;<span class=\"synComment\"> # 2 mandatory params</span><br>    <span class=\"synStatement\">while</span> {<span class=\"synIdentifier\">$p</span> &gt; <span class=\"synConstant\">0</span>} {<br>        <span class=\"synStatement\">set</span> result [<span class=\"synStatement\">expr</span> <span class=\"synIdentifier\">$result</span> * <span class=\"synIdentifier\">$base</span>]; <span class=\"synStatement\">incr</span> p -<span class=\"synConstant\">1</span><br>    }<br>    <span class=\"synType\">return</span> <span class=\"synIdentifier\">$result</span><br>}<br><br><span class=\"synStatement\">set</span> a {a}; <span class=\"synStatement\">set</span> b <span class=\"synConstant\">\"bcdef\"</span>; <span class=\"synStatement\">set</span> lst [<span class=\"synStatement\">list</span> <span class=\"synConstant\">\"item\"</span>]<br><span class=\"synStatement\">puts</span> [<span class=\"synStatement\">llength</span> <span class=\"synIdentifier\">$a$b</span>]<br><br><span class=\"synStatement\">set</span> ::<span class=\"synStatement\">my</span>::tid(<span class=\"synIdentifier\">$id</span>) <span class=\"synIdentifier\">$::my::tid</span>(def)<br><span class=\"synStatement\">lappend</span> lst <span class=\"synIdentifier\">$arr</span>(<span class=\"synIdentifier\">$idx</span>) <span class=\"synIdentifier\">$::my::arr</span>(<span class=\"synIdentifier\">$idx</span>) <span class=\"synIdentifier\">$ar</span>(key)<br><span class=\"synStatement\">lreplace</span> ::<span class=\"synStatement\">my</span>::tid(<span class=\"synIdentifier\">$id</span>) <span class=\"synConstant\">4</span> <span class=\"synConstant\">4</span><br><span class=\"synStatement\">puts</span> <span class=\"synIdentifier\">$::rand</span> <span class=\"synIdentifier\">${::rand}</span> <span class=\"synIdentifier\">${::AWESOME::component::variable}</span><br><br><span class=\"synStatement\">puts</span> <span class=\"synConstant\">\"</span><span class=\"synIdentifier\">$x</span><span class=\"synConstant\"> + </span><span class=\"synIdentifier\">$y</span><span class=\"synConstant\"> is</span><span class=\"synSpecial\">\\\\t</span><span class=\"synConstant\"> </span>[<span class=\"synStatement\">expr</span> <span class=\"synIdentifier\">$x</span> + <span class=\"synIdentifier\">$y</span>]<span class=\"synConstant\">\"</span><br><br><span class=\"synType\">proc</span> isprime x {<br>    <span class=\"synStatement\">expr</span> {<span class=\"synIdentifier\">$x</span>&gt;<span class=\"synConstant\">1</span> &amp;&amp; ![<span class=\"synStatement\">regexp</span> {^(oo+?)\\\\<span class=\"synConstant\">1</span>+$} [<span class=\"synStatement\">string</span> repeat o <span class=\"synIdentifier\">$x</span>]]}<br>}<br>',\n    tex:\n        '<span class=\"synStatement\">\\\\documentclass</span><span class=\"synSpecial\">{</span><span class=\"synPreProc\">article</span><span class=\"synSpecial\">}</span><br><span class=\"synStatement\">\\\\usepackage</span><span class=\"synSpecial\">[</span><span class=\"synConstant\">koi8-r</span><span class=\"synSpecial\">]{inputenc}</span><br><span class=\"synStatement\">\\\\hoffset</span>=<span class=\"synConstant\">0pt</span><br><span class=\"synStatement\">\\\\voffset</span>=.<span class=\"synConstant\">3em</span><br><span class=\"synStatement\">\\\\tolerance</span>=400<br><span class=\"synStatement\"><br>ewcommand</span><span class=\"synSpecial\">{</span><span class=\"synStatement\">\\\\eTiX</span><span class=\"synSpecial\">}{</span><span class=\"synStatement\">\\\\TeX</span><span class=\"synSpecial\">}</span><br><span class=\"synPreProc\">\\\\begin{document}</span><br><span class=\"synPreProc\">\\\\section</span>*<span class=\"synSpecial\">{</span>Highlight.js<span class=\"synSpecial\">}</span><br><span class=\"synStatement\">\\\\begin</span><span class=\"synSpecial\">{</span><span class=\"synPreProc\">table</span><span class=\"synSpecial\">}[</span>c|c<span class=\"synSpecial\">]</span><br><span class=\"synSpecial\">$</span><span class=\"synStatement\">\\\\frac</span><span class=\"synSpecial\"> 12\\\\, + \\\\, </span><span class=\"synStatement\">\\\\frac</span><span class=\"synSpecial\"> 1{x</span><span class=\"synStatement\">^3</span><span class=\"synSpecial\">}</span><span class=\"synStatement\">\\\\text{</span>Hello \\\\! world<span class=\"synStatement\">}</span><span class=\"synSpecial\">$</span> <span class=\"synSpecial\">&amp;</span> <span class=\"synType\">\\\\textbf{</span>Goodbye<span class=\"synStatement\">\\\\~</span> world<span class=\"synType\">}</span> <span class=\"synSpecial\">\\\\\\\\</span><span class=\"synStatement\">\\\\eTiX</span> <span class=\"synSpecial\">$ </span><span class=\"synStatement\">\\\\pi=</span><span class=\"synSpecial\">400 $</span><br><span class=\"synStatement\">\\\\end</span><span class=\"synSpecial\">{</span><span class=\"synPreProc\">table</span><span class=\"synSpecial\">}</span><br>Ch<span class=\"synStatement\">\\\\\\'e</span>rie, <span class=\"synStatement\">\\\\c{c}</span>a ne me pla<span class=\"synStatement\">\\\\^\\\\i</span> t pas! <span class=\"synComment\">% comment \\\\b</span><br>G<span class=\"synStatement\">\\\\\"o</span>tterd<span class=\"synStatement\">\\\\\"a</span>mmerung~45<span class=\"synSpecial\">\\\\%</span>=34.<br><span class=\"synSpecial\">$$</span><br><span class=\"synSpecial\">    </span><span class=\"synStatement\">\\\\int\\\\limits</span><span class=\"synSpecial\">_{</span><span class=\"synStatement\">0</span><span class=\"synSpecial\">}^{</span><span class=\"synStatement\">\\\\pi</span><span class=\"synSpecial\">}</span><span class=\"synStatement\">\\\\frac</span><span class=\"synSpecial\">{4}{x-7}</span><span class=\"synStatement\">=</span><span class=\"synSpecial\">3</span><br><span class=\"synSpecial\">$$</span><br><span class=\"synPreProc\">\\\\end{document}</span><br>',\n    typescript:\n        '<span class=\"synStatement\">class</span> MyClass <span class=\"synIdentifier\">{</span><br>  <span class=\"synStatement\">public</span> <span class=\"synStatement\">static</span> myValue: <span class=\"synType\">string</span><span class=\"synStatement\">;</span><br>  <span class=\"synStatement\">constructor(</span>init: <span class=\"synType\">string</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span><br>    <span class=\"synIdentifier\">this</span>.myValue <span class=\"synStatement\">=</span> init<span class=\"synStatement\">;</span><br>  <span class=\"synIdentifier\">}</span><br><span class=\"synIdentifier\">}</span><br><span class=\"synStatement\">import</span> fs <span class=\"synStatement\">=</span> require<span class=\"synStatement\">(</span><span class=\"synConstant\">\"fs\"</span><span class=\"synStatement\">);</span><br><span class=\"synStatement\">module</span> MyModule <span class=\"synIdentifier\">{</span><br>  <span class=\"synStatement\">export</span> <span class=\"synStatement\">interface</span> MyInterface <span class=\"synStatement\">extends</span> Other <span class=\"synIdentifier\">{</span><br>    myProperty: <span class=\"synType\">any</span><span class=\"synStatement\">;</span><br>  <span class=\"synIdentifier\">}</span><br><span class=\"synIdentifier\">}</span><br><span class=\"synStatement\">declare</span> magicNumber <span class=\"synType\">number</span><span class=\"synStatement\">;</span><br>myArray.forEach<span class=\"synStatement\">(()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span> <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span> <span class=\"synComment\">// fat arrow syntax</span><br>',\n    verilog:\n        '<span class=\"synPreProc\">`timescale</span> 1ns <span class=\"synSpecial\">/</span> 1ps<br><br><span class=\"synComment\">/**</span><br><span class=\"synComment\"> * counter: a generic clearable up-counter</span><br><span class=\"synComment\"> */</span><br><br><span class=\"synStatement\">module</span> counter<br>    <span class=\"synSpecial\">#(</span><span class=\"synStatement\">parameter</span> <span class=\"synConstant\">WIDTH</span><span class=\"synSpecial\">=</span><span class=\"synConstant\">64</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NAME</span><span class=\"synSpecial\">=</span><span class=\"synConstant\">\"world\"</span><span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">(</span><br>        <span class=\"synStatement\">input</span> clk<span class=\"synSpecial\">,</span><br>        <span class=\"synStatement\">input</span> ce<span class=\"synSpecial\">,</span><br>        <span class=\"synStatement\">input</span> arst_n<span class=\"synSpecial\">,</span><br>        <span class=\"synStatement\">output</span> <span class=\"synStatement\">reg</span> <span class=\"synSpecial\">[</span><span class=\"synConstant\">WIDTH</span><span class=\"synSpecial\">-</span><span class=\"synConstant\">1</span><span class=\"synSpecial\">:</span><span class=\"synConstant\">0</span><span class=\"synSpecial\">]</span> q<br>    <span class=\"synSpecial\">);</span><br>    <br>    string name <span class=\"synSpecial\">=</span> <span class=\"synConstant\">\"counter\"</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">localparam</span> val0 <span class=\"synSpecial\">=</span> <span class=\"synConstant\">12\\'ha1f</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">localparam</span> val1 <span class=\"synSpecial\">=</span> <span class=\"synConstant\">12\\'h1fa</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">localparam</span> val2 <span class=\"synSpecial\">=</span> <span class=\"synConstant\">12\\'hfa1</span><span class=\"synSpecial\">;</span><br><br>    <span class=\"synComment\">// some child</span><br>    clock_buffer <span class=\"synSpecial\">#(</span><span class=\"synConstant\">WIDTH</span><span class=\"synSpecial\">)</span> buffer_inst <span class=\"synSpecial\">(</span><br>      <span class=\"synSpecial\">.</span>clk<span class=\"synSpecial\">(</span>clk<span class=\"synSpecial\">),</span><br>      <span class=\"synSpecial\">.</span>ce<span class=\"synSpecial\">(</span>ce<span class=\"synSpecial\">),</span><br>      <span class=\"synSpecial\">.</span>reset<span class=\"synSpecial\">(</span>arst_n<span class=\"synSpecial\">)</span><br>    <span class=\"synSpecial\">);</span><br><br>    <span class=\"synComment\">// Simple gated up-counter with async clear</span><br><br>    <span class=\"synStatement\">always</span> <span class=\"synSpecial\">@(</span><span class=\"synStatement\">posedge</span> clk <span class=\"synStatement\">or</span> <span class=\"synStatement\">negedge</span> arst_n<span class=\"synSpecial\">)</span> <span class=\"synStatement\">begin</span><br>        <span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>arst_n <span class=\"synSpecial\">==</span> <span class=\"synConstant\">1\\'b0</span><span class=\"synSpecial\">)</span> <span class=\"synStatement\">begin</span><br>            q <span class=\"synSpecial\">&lt;=</span> <span class=\"synSpecial\">{</span><span class=\"synConstant\">WIDTH</span> <span class=\"synSpecial\">{</span><span class=\"synConstant\">1\\'b0</span><span class=\"synSpecial\">}};</span><br>            <span class=\"synStatement\">end</span><br>        <span class=\"synStatement\">else</span> <span class=\"synStatement\">begin</span><br>            q <span class=\"synSpecial\">&lt;=</span> q<span class=\"synSpecial\">;</span><br>            <span class=\"synStatement\">if</span> <span class=\"synSpecial\">(</span>ce <span class=\"synSpecial\">==</span> <span class=\"synConstant\">1\\'b1</span><span class=\"synSpecial\">)</span> <span class=\"synStatement\">begin</span><br>                q <span class=\"synSpecial\">&lt;=</span> q <span class=\"synSpecial\">+</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">;</span><br>            <span class=\"synStatement\">end</span><br>        <span class=\"synStatement\">end</span><br>    <span class=\"synStatement\">end</span><br><br>    <span class=\"synStatement\">function</span> int add_one<span class=\"synSpecial\">(</span>int x<span class=\"synSpecial\">);</span><br>      return x <span class=\"synSpecial\">+</span> <span class=\"synConstant\">1</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">endfunction</span> <span class=\"synSpecial\">:</span> add_one<br><br><span class=\"synPreProc\">`ifdef</span> <span class=\"synConstant\">SIMULATION</span><br><span class=\"synStatement\">initial</span> <span class=\"synPreProc\">$display</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">\"Hello %s\"</span><span class=\"synSpecial\">,</span> <span class=\"synConstant\">NAME</span><span class=\"synSpecial\">);</span><br><span class=\"synPreProc\">`endif</span><br><span class=\"synStatement\">endmodule</span> <span class=\"synSpecial\">:</span> counter<br><br>class my_data extends uvm_data<span class=\"synSpecial\">;</span><br>  int x<span class=\"synSpecial\">,</span> y<span class=\"synSpecial\">;</span><br><br>  <span class=\"synStatement\">function</span> add_one<span class=\"synSpecial\">();</span><br>    x<span class=\"synSpecial\">++;</span><br>    y<span class=\"synSpecial\">++;</span><br>  <span class=\"synStatement\">endfunction</span> <span class=\"synSpecial\">:</span> add_one<br>endclass <span class=\"synSpecial\">:</span> my_data<br>',\n    vhdl:\n        '<span class=\"synComment\">/*</span><br><span class=\"synComment\"> * RS-trigger with assynch. reset</span><br><span class=\"synComment\"> */</span><br><br><span class=\"synStatement\">library</span> ieee<span class=\"synSpecial\">;</span><br><span class=\"synStatement\">use</span> ieee<span class=\"synSpecial\">.</span>std_logic_1164<span class=\"synSpecial\">.</span><span class=\"synStatement\">all</span><span class=\"synSpecial\">;</span><br><br><span class=\"synStatement\">entity</span> RS_trigger <span class=\"synStatement\">is</span><br>    <span class=\"synStatement\">generic</span> <span class=\"synSpecial\">(</span>T<span class=\"synSpecial\">:</span> <span class=\"synType\">Time</span> <span class=\"synSpecial\">:=</span> 0ns<span class=\"synSpecial\">);</span><br>    <span class=\"synStatement\">port</span> <span class=\"synSpecial\">(</span> R<span class=\"synSpecial\">,</span> S  <span class=\"synSpecial\">:</span> <span class=\"synStatement\">in</span>  <span class=\"synType\">std_logic</span><span class=\"synSpecial\">;</span><br>           Q<span class=\"synSpecial\">,</span> nQ <span class=\"synSpecial\">:</span> <span class=\"synStatement\">out</span> <span class=\"synType\">std_logic</span><span class=\"synSpecial\">;</span><br>           reset<span class=\"synSpecial\">,</span> clock <span class=\"synSpecial\">:</span> <span class=\"synStatement\">in</span>  <span class=\"synType\">std_logic</span> <span class=\"synSpecial\">);</span><br><span class=\"synStatement\">end</span> RS_trigger<span class=\"synSpecial\">;</span><br><br><span class=\"synStatement\">architecture</span> behaviour <span class=\"synStatement\">of</span> RS_trigger <span class=\"synStatement\">is</span><br>    <span class=\"synStatement\">signal</span> QT<span class=\"synSpecial\">:</span> <span class=\"synType\">std_logic</span><span class=\"synSpecial\">;</span> <span class=\"synComment\">-- Q(t)</span><br><span class=\"synStatement\">begin</span><br>    <span class=\"synStatement\">process</span><span class=\"synSpecial\">(</span>clock<span class=\"synSpecial\">,</span> reset<span class=\"synSpecial\">)</span> <span class=\"synStatement\">is</span><br>        <span class=\"synStatement\">subtype</span> RS <span class=\"synStatement\">is</span> <span class=\"synType\">std_logic_vector</span> <span class=\"synSpecial\">(</span><span class=\"synConstant\">1</span> <span class=\"synStatement\">downto</span> <span class=\"synConstant\">0</span><span class=\"synSpecial\">);</span><br>    <span class=\"synStatement\">begin</span><br>        <span class=\"synStatement\">if</span> reset <span class=\"synSpecial\">=</span> <span class=\"synConstant\">\\'0\\'</span> <span class=\"synStatement\">then</span><br>            QT <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">\\'0\\'</span><span class=\"synSpecial\">;</span><br>        <span class=\"synStatement\">else</span><br>            <span class=\"synStatement\">if</span> rising_edge<span class=\"synSpecial\">(</span>C<span class=\"synSpecial\">)</span> <span class=\"synStatement\">then</span><br>                <span class=\"synStatement\">if</span> <span class=\"synSpecial\">not</span> <span class=\"synSpecial\">(</span>R<span class=\"synType\">\\'stable</span><span class=\"synSpecial\">(</span>T<span class=\"synSpecial\">)</span> <span class=\"synSpecial\">and</span> S<span class=\"synType\">\\'stable</span><span class=\"synSpecial\">(</span>T<span class=\"synSpecial\">))</span> <span class=\"synStatement\">then</span><br>                    QT <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">\\'X\\'</span><span class=\"synSpecial\">;</span><br>                <span class=\"synStatement\">else</span><br>                    <span class=\"synStatement\">case</span> RS\\'<span class=\"synSpecial\">(</span>R<span class=\"synSpecial\">&amp;</span>S<span class=\"synSpecial\">)</span> <span class=\"synStatement\">is</span><br>                        <span class=\"synStatement\">when</span> <span class=\"synConstant\">\"01\"</span> <span class=\"synSpecial\">=&gt;</span> QT <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">\\'1\\'</span><span class=\"synSpecial\">;</span><br>                        <span class=\"synStatement\">when</span> <span class=\"synConstant\">\"10\"</span> <span class=\"synSpecial\">=&gt;</span> QT <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">\\'0\\'</span><span class=\"synSpecial\">;</span><br>                        <span class=\"synStatement\">when</span> <span class=\"synConstant\">\"11\"</span> <span class=\"synSpecial\">=&gt;</span> QT <span class=\"synSpecial\">&lt;=</span> <span class=\"synConstant\">\\'X\\'</span><span class=\"synSpecial\">;</span><br>                        <span class=\"synStatement\">when</span> <span class=\"synStatement\">others</span> <span class=\"synSpecial\">=&gt;</span> <span class=\"synStatement\">null</span><span class=\"synSpecial\">;</span><br>                    <span class=\"synStatement\">end</span> <span class=\"synStatement\">case</span><span class=\"synSpecial\">;</span><br>                <span class=\"synStatement\">end</span> <span class=\"synStatement\">if</span><span class=\"synSpecial\">;</span><br>            <span class=\"synStatement\">end</span> <span class=\"synStatement\">if</span><span class=\"synSpecial\">;</span><br>        <span class=\"synStatement\">end</span> <span class=\"synStatement\">if</span><span class=\"synSpecial\">;</span><br>    <span class=\"synStatement\">end</span> <span class=\"synStatement\">process</span><span class=\"synSpecial\">;</span><br><br>    Q  <span class=\"synSpecial\">&lt;=</span> QT<span class=\"synSpecial\">;</span><br>    nQ <span class=\"synSpecial\">&lt;=</span> <span class=\"synSpecial\">not</span> QT<span class=\"synSpecial\">;</span><br><span class=\"synStatement\">end</span> <span class=\"synStatement\">architecture</span> behaviour<span class=\"synSpecial\">;</span><br>',\n    vim:\n        '<span class=\"synStatement\">if</span> foo <span class=\"synStatement\">&gt;</span> <span class=\"synConstant\">2</span> <span class=\"synStatement\">||</span> <span class=\"synIdentifier\">has</span><span class=\"synSpecial\">(</span><span class=\"synConstant\">\"gui_running\"</span><span class=\"synSpecial\">)</span><br>  <span class=\"synStatement\">syntax</span> <span class=\"synType\">on</span><br>  <span class=\"synStatement\">set</span> <span class=\"synPreProc\">hlsearch</span><br><span class=\"synStatement\">endif</span><br><br><span class=\"synStatement\">set</span> <span class=\"synPreProc\">autoindent</span><br><br><span class=\"synComment\">\" switch on highlighting</span><br><span class=\"synStatement\">function</span> UnComment<span class=\"synSpecial\">(</span>fl, ll<span class=\"synSpecial\">)</span><br>  <span class=\"synStatement\">while</span> idx <span class=\"synStatement\">&gt;=</span> <span class=\"synIdentifier\">a:ll</span><br>    <span class=\"synStatement\">let</span> <span class=\"synIdentifier\">srclines</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">getline</span><span class=\"synSpecial\">(</span>idx<span class=\"synSpecial\">)</span><br>    <span class=\"synStatement\">let</span> <span class=\"synIdentifier\">dstlines</span><span class=\"synStatement\">=</span><span class=\"synIdentifier\">substitute</span><span class=\"synSpecial\">(</span>srclines, b:comment, <span class=\"synConstant\">\"\"</span>, <span class=\"synConstant\">\"\"</span><span class=\"synSpecial\">)</span><br>    <span class=\"synStatement\">call</span> <span class=\"synIdentifier\">setline</span><span class=\"synSpecial\">(</span>idx, dstlines<span class=\"synSpecial\">)</span><br>  <span class=\"synStatement\">endwhile</span><br><span class=\"synStatement\">endfunction</span><br><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">conf</span> <span class=\"synStatement\">=</span> <span class=\"synSpecial\">{</span><span class=\"synConstant\">\\'command\\'</span>: <span class=\"synConstant\">\\'git\\'</span><span class=\"synSpecial\">}</span><br>',\n    xml:\n        '<span class=\"synIdentifier\">&lt;!</span><span class=\"synStatement\">DOCTYPE</span> html<span class=\"synIdentifier\">&gt;</span><br><span class=\"synIdentifier\">&lt;title&gt;</span>Title<span class=\"synIdentifier\">&lt;/title&gt;</span><br><br><span class=\"synIdentifier\">&lt;style&gt;</span>body {width: 500px;}<span class=\"synIdentifier\">&lt;/style&gt;</span><br><br><span class=\"synIdentifier\">&lt;script </span><span class=\"synType\">type</span>=<span class=\"synConstant\">\"application/javascript\"</span><span class=\"synIdentifier\">&gt;</span><br>  function $init() {return true;}<br><span class=\"synIdentifier\">&lt;/script&gt;</span><br><br><span class=\"synIdentifier\">&lt;body&gt;</span><br>  <span class=\"synIdentifier\">&lt;p </span><span class=\"synType\">checked</span><span class=\"synIdentifier\"> </span><span class=\"synType\">class</span>=<span class=\"synConstant\">\"title\"</span><span class=\"synIdentifier\"> </span><span class=\"synType\">id</span>=<span class=\"synConstant\">\\'title\\'</span><span class=\"synIdentifier\">&gt;</span>Title<span class=\"synIdentifier\">&lt;/p&gt;</span><br>  <span class=\"synComment\">&lt;!-- here goes the rest of the page --&gt;</span><br><span class=\"synIdentifier\">&lt;/body&gt;</span><br>',\n    xquery:\n        '<span class=\"synStatement\">xquery</span> <span class=\"synStatement\">version</span> <span class=\"synConstant\">\"3.1\"</span><span class=\"synStatement\">;</span><br><span class=\"synComment\">(:~</span><br><span class=\"synComment\"> : </span><span class=\"synSpecial\">@author</span><span class=\"synComment\"> Duncan Paterson</span><br><span class=\"synComment\"> : @version 1.0:)</span><br><br><span class=\"synStatement\">declare</span> <span class=\"synStatement\">variable</span> <span class=\"synIdentifier\">$local:num</span> := math:log10(<span class=\"synConstant\">12345</span>)<span class=\"synStatement\">;</span><br><br>(<br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">$map</span> := map { <span class=\"synConstant\">\\'R\\'</span>: <span class=\"synConstant\">\\'red\\'</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">\\'G\\'</span>: <span class=\"synConstant\">\\'green\\'</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">\\'B\\'</span>: <span class=\"synConstant\">\\'blue\\'</span> }<br><span class=\"synStatement\">return</span> (<br>  <span class=\"synIdentifier\">$map</span>?*          <span class=\"synComment\">(: 1. returns all values; same as: map:keys($map) ! $map(.) :)</span><span class=\"synStatement\">,</span><br>  <span class=\"synIdentifier\">$map</span>?R          <span class=\"synComment\">(: 2. returns the value associated with the key \\'R\\'; same as: $map(\\'R\\') :)</span><span class=\"synStatement\">,</span><br>  <span class=\"synIdentifier\">$map</span>?(<span class=\"synConstant\">\\'G\\'</span><span class=\"synStatement\">,</span><span class=\"synConstant\">\\'B\\'</span>)  <span class=\"synComment\">(: 3. returns the values associated with the key \\'G\\' and \\'B\\' :)</span><br>)<span class=\"synStatement\">,</span><br><br><span class=\"synStatement\">declare</span> <span class=\"synStatement\">function</span> local:city(<span class=\"synIdentifier\">$country</span> <span class=\"synStatement\">as</span> <span class=\"synStatement\">node</span>()*) <span class=\"synStatement\">as</span> <span class=\"synStatement\">element</span> (country) {<br><span class=\"synStatement\">for</span> <span class=\"synIdentifier\">$country</span> <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">doc</span>(<span class=\"synConstant\">\\'factbook\\'</span>)//country<br><span class=\"synStatement\">where</span> <span class=\"synIdentifier\">$country</span>/@population &gt; <span class=\"synConstant\">100000000</span><br><span class=\"synStatement\">let</span> <span class=\"synIdentifier\">$name</span> := <span class=\"synIdentifier\">$country</span>/<span class=\"synIdentifier\">name</span>[<span class=\"synConstant\">1</span>]<br><span class=\"synStatement\">for</span> <span class=\"synIdentifier\">$city</span> <span class=\"synStatement\">in</span> <span class=\"synIdentifier\">$country</span>//city[population <span class=\"synStatement\">gt</span> <span class=\"synConstant\">1000000</span>]<br>group <span class=\"synStatement\">by</span> <span class=\"synIdentifier\">$name</span><br><span class=\"synStatement\">return</span><br>   <span class=\"synStatement\">element</span> country { <span class=\"synStatement\">attribute</span> type { <span class=\"synIdentifier\">$name</span> }<span class=\"synStatement\">,</span><br>    <span class=\"synIdentifier\">$city</span>/<span class=\"synIdentifier\">name</span> }<br>}<span class=\"synStatement\">;</span><br><br><span class=\"synStatement\">return</span><br>(<span class=\"synConstant\">\\'A\\'</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">\\'B\\'</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">\\'C\\'</span>) =&gt; <span class=\"synIdentifier\">count</span>()<span class=\"synStatement\">,</span><br><br><span class=\"synIdentifier\">&lt;root&gt;</span>{local:city(.) + <span class=\"synIdentifier\">$local:num</span>}<span class=\"synIdentifier\">&lt;/root&gt;</span><br>',\n    yaml:\n        '<span class=\"synPreProc\">---</span><br><span class=\"synComment\"># comment</span><br><span class=\"synIdentifier\">string_1</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"Bar\"</span><br><span class=\"synIdentifier\">string_2</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">\\'bar\\'</span><br><span class=\"synIdentifier\">string_3</span><span class=\"synSpecial\">:</span> bar<br><span class=\"synIdentifier\">inline_keys_ignored</span><span class=\"synSpecial\">:</span> sompath/name/file.jpg<br><span class=\"synIdentifier\">keywords_in_yaml</span><span class=\"synSpecial\">:</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">true</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">false</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">TRUE</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">FALSE</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">21</span><br>  <span class=\"synStatement\">- </span><span class=\"synConstant\">21.0</span><br>  <span class=\"synStatement\">- </span><span class=\"synType\">!!str</span> <span class=\"synConstant\">123</span><br><span class=\"synConstant\">\"quoted_key\"</span><span class=\"synSpecial\">:</span> <span class=\"synType\">&amp;foobar</span><br>  <span class=\"synIdentifier\">bar</span><span class=\"synSpecial\">:</span> foo<br>  <span class=\"synIdentifier\">foo</span><span class=\"synSpecial\">:</span><br>  <span class=\"synConstant\">\"foo\"</span><span class=\"synSpecial\">:</span> bar<br><br><span class=\"synIdentifier\">reference</span><span class=\"synSpecial\">:</span> <span class=\"synType\">*foobar</span><br><br><span class=\"synIdentifier\">multiline_1</span><span class=\"synSpecial\">:</span> |<br>  Multiline<br>  String<br><span class=\"synIdentifier\">multiline_2</span><span class=\"synSpecial\">:</span> &gt;<br>  Multiline<br>  String<br><span class=\"synIdentifier\">multiline_3</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"</span><br><span class=\"synConstant\">  Multiline string</span><br><span class=\"synConstant\">  \"</span><br><br><span class=\"synIdentifier\">ansible_variables</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">\"foo {{variable}}\"</span><br><br><span class=\"synIdentifier\">array_nested</span><span class=\"synSpecial\">:</span><br><span class=\"synStatement\">- </span>a<br><span class=\"synStatement\">- </span><span class=\"synIdentifier\">b</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">1</span><br>  <span class=\"synIdentifier\">c</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">2</span><br><span class=\"synStatement\">- </span>b<br><span class=\"synStatement\">- </span>comment<br>'\n};","export default {\n  default: {\n    preCodeBgcolor: { hex: \"#f5f5f5\" },\n    preCodeColor: { hex: \"#646464\" },\n    synCommentColor: { hex: \"#4f80e5\" },\n    synConstantColor: { hex: \"#ff6666\" },\n    synIdentifierColor: { hex: \"#51cfcf\" },\n    synPreProcColor: { hex: \"#9355e6\" },\n    synSpecialColor: { hex: \"#c000c0\" },\n    synStatementColor: { hex: \"#d88a17\" },\n    synTypeColor: { hex: \"#3ec63e\" }\n  },\n  tomorrow: {\n    preCodeBgcolor: { hex: \"#ffffff\" },\n    preCodeColor: { hex: \"#4d4d4c\" },\n    synCommentColor: { hex: \"#8e908c\" },\n    synConstantColor: { hex: \"#718c00\" },\n    synIdentifierColor: { hex: \"#8959a8\" },\n    synPreProcColor: { hex: \"#eab700\" },\n    synSpecialColor: { hex: \"#f5871f\" },\n    synStatementColor: { hex: \"#8959a8\" },\n    synTypeColor: { hex: \"#8959a8\" }\n  },\n  \"tomorrow night\": {\n    preCodeBgcolor: { hex: \"#1d1f21\" },\n    preCodeColor: { hex: \"#C5C8C6\" },\n    synCommentColor: { hex: \"#969896\" },\n    synConstantColor: { hex: \"#b5bd68\" },\n    synIdentifierColor: { hex: \"#b294bb\" },\n    synPreProcColor: { hex: \"#f0c674\" },\n    synSpecialColor: { hex: \"#F08D49\" },\n    synStatementColor: { hex: \"#b294bb\" },\n    synTypeColor: { hex: \"#b294bb\" }\n  },\n  monokai: {\n    preCodeBgcolor: { hex: \"#272822\" },\n    preCodeColor: { hex: \"#F8F8F2\" },\n    synCommentColor: { hex: \"#75715E\" },\n    synConstantColor: { hex: \"#A6E22E\" },\n    synIdentifierColor: { hex: \"#F8F8F2\" },\n    synPreProcColor: { hex: \"#F92672\" },\n    synSpecialColor: { hex: \"#FD971F\" },\n    synStatementColor: { hex: \"#F92672\" },\n    synTypeColor: { hex: \"#66D9EF\" }\n  },\n  solarized: {\n    preCodeBgcolor: { hex: \"#fdf6e3\" },\n    preCodeColor: { hex: \"#657b83\" },\n    synCommentColor: { hex: \"#93a1a1\" },\n    synConstantColor: { hex: \"#2aa198\" },\n    synIdentifierColor: { hex: \"#6c71c4\" },\n    synPreProcColor: { hex: \"#b58900\" },\n    synSpecialColor: { hex: \"#cb4b16\" },\n    synStatementColor: { hex: \"#859900\" },\n    synTypeColor: { hex: \"#839496\" }\n  }\n};\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.VueColor=t():e.VueColor=t()}(\"undefined\"!=typeof self?self:this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=22)}([function(e,t){function n(e,t){var n=e[1]||\"\",a=e[3];if(!a)return n;if(t&&\"function\"==typeof btoa){var i=r(a);return[n].concat(a.sources.map(function(e){return\"/*# sourceURL=\"+a.sourceRoot+e+\" */\"})).concat([i]).join(\"\\n\")}return[n].join(\"\\n\")}function r(e){return\"\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+r+\"}\":r}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];\"number\"==typeof i&&(r[i]=!0)}for(a=0;a<e.length;a++){var o=e[a];\"number\"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]=\"(\"+o[2]+\") and (\"+n+\")\"),t.push(o))}},t}},function(e,t,n){function r(e){for(var t=0;t<e.length;t++){var n=e[t],r=u[n.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](n.parts[a]);for(;a<n.parts.length;a++)r.parts.push(i(n.parts[a]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{for(var o=[],a=0;a<n.parts.length;a++)o.push(i(n.parts[a]));u[n.id]={id:n.id,refs:1,parts:o}}}}function a(){var e=document.createElement(\"style\");return e.type=\"text/css\",d.appendChild(e),e}function i(e){var t,n,r=document.querySelector(\"style[\"+b+'~=\"'+e.id+'\"]');if(r){if(p)return v;r.parentNode.removeChild(r)}if(x){var i=f++;r=h||(h=a()),t=o.bind(null,r,i,!1),n=o.bind(null,r,i,!0)}else r=a(),t=s.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}function o(e,t,n,r){var a=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=m(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function s(e,t){var n=t.css,r=t.media,a=t.sourceMap;if(r&&e.setAttribute(\"media\",r),g.ssrId&&e.setAttribute(b,t.id),a&&(n+=\"\\n/*# sourceURL=\"+a.sources[0]+\" */\",n+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var c=\"undefined\"!=typeof document;if(\"undefined\"!=typeof DEBUG&&DEBUG&&!c)throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");var l=n(26),u={},d=c&&(document.head||document.getElementsByTagName(\"head\")[0]),h=null,f=0,p=!1,v=function(){},g=null,b=\"data-vue-ssr-id\",x=\"undefined\"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());e.exports=function(e,t,n,a){p=n,g=a||{};var i=l(e,t);return r(i),function(t){for(var n=[],a=0;a<i.length;a++){var o=i[a],s=u[o.id];s.refs--,n.push(s)}t?(i=l(e,t),r(i)):i=[];for(var a=0;a<n.length;a++){var s=n[a];if(0===s.refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete u[s.id]}}}};var m=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t){e.exports=function(e,t,n,r,a,i){var o,s=e=e||{},c=typeof e.default;\"object\"!==c&&\"function\"!==c||(o=e,s=e.default);var l=\"function\"==typeof s?s.options:s;t&&(l.render=t.render,l.staticRenderFns=t.staticRenderFns,l._compiled=!0),n&&(l.functional=!0),a&&(l._scopeId=a);var u;if(i?(u=function(e){e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,e||\"undefined\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},l._ssrRegister=u):r&&(u=r),u){var d=l.functional,h=d?l.render:l.beforeCreate;d?(l._injectStyles=u,l.render=function(e,t){return u.call(t),h(e,t)}):l.beforeCreate=h?[].concat(h,u):[u]}return{esModule:o,exports:s,options:l}}},function(e,t,n){\"use strict\";function r(e,t){var n,r=e&&e.a;!(n=e&&e.hsl?(0,i.default)(e.hsl):e&&e.hex&&e.hex.length>0?(0,i.default)(e.hex):(0,i.default)(e))||void 0!==n._a&&null!==n._a||n.setAlpha(r||1);var a=n.toHsl(),o=n.toHsv();return 0===a.s&&(o.h=a.h=e.h||e.hsl&&e.hsl.h||t||0),{hsl:a,hex:n.toHexString().toUpperCase(),hex8:n.toHex8String().toUpperCase(),rgba:n.toRgb(),hsv:o,oldHue:e.h||t||a.h,source:e.source,a:e.a||n.getAlpha()}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(27),i=function(e){return e&&e.__esModule?e:{default:e}}(a);t.default={props:[\"value\"],data:function(){return{val:r(this.value)}},computed:{colors:{get:function(){return this.val},set:function(e){this.val=e,this.$emit(\"input\",e)}}},watch:{value:function(e){this.val=r(e)}},methods:{colorChange:function(e,t){this.oldHue=this.colors.hsl.h,this.colors=r(e,t||this.oldHue)},isValidHex:function(e){return(0,i.default)(e).isValid()},simpleCheckForValidColor:function(e){for(var t=[\"r\",\"g\",\"b\",\"a\",\"h\",\"s\",\"l\",\"v\"],n=0,r=0,a=0;a<t.length;a++){var i=t[a];e[i]&&(n++,isNaN(e[i])||r++)}if(n===r)return e},paletteUpperCase:function(e){return e.map(function(e){return e.toUpperCase()})},isTransparent:function(e){return 0===(0,i.default)(e).getAlpha()}}}},function(e,t,n){\"use strict\";function r(e){c||n(28)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(10),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(30),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/common/EditableInput.vue\",t.default=d.exports},function(e,t,n){\"use strict\";function r(e){c||n(43)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(14),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(45),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/common/Hue.vue\",t.default=d.exports},function(e,t,n){\"use strict\";function r(e){c||n(55)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(17),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(60),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/common/Saturation.vue\",t.default=d.exports},function(e,t,n){\"use strict\";function r(e){c||n(61)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(18),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(66),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/common/Alpha.vue\",t.default=d.exports},function(e,t,n){\"use strict\";function r(e){c||n(63)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(19),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(65),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/common/Checkboard.vue\",t.default=d.exports},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(3),i=r(a),o=n(4),s=r(o),c=[\"#4D4D4D\",\"#999999\",\"#FFFFFF\",\"#F44E3B\",\"#FE9200\",\"#FCDC00\",\"#DBDF00\",\"#A4DD00\",\"#68CCCA\",\"#73D8FF\",\"#AEA1FF\",\"#FDA1FF\",\"#333333\",\"#808080\",\"#CCCCCC\",\"#D33115\",\"#E27300\",\"#FCC400\",\"#B0BC00\",\"#68BC00\",\"#16A5A5\",\"#009CE0\",\"#7B64FF\",\"#FA28FF\",\"#000000\",\"#666666\",\"#B3B3B3\",\"#9F0500\",\"#C45100\",\"#FB9E00\",\"#808900\",\"#194D33\",\"#0C797D\",\"#0062B1\",\"#653294\",\"#AB149E\"];t.default={name:\"Compact\",mixins:[i.default],props:{palette:{type:Array,default:function(){return c}}},components:{\"ed-in\":s.default},computed:{pick:function(){return this.colors.hex.toUpperCase()}},methods:{handlerClick:function(e){this.colorChange({hex:e,source:\"hex\"})}}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={name:\"editableInput\",props:{label:String,labelText:String,desc:String,value:[String,Number],max:Number,min:Number,arrowOffset:{type:Number,default:1}},computed:{val:{get:function(){return this.value},set:function(e){if(!(void 0!==this.max&&+e>this.max))return e;this.$refs.input.value=this.max}},labelId:function(){return\"input__label__\"+this.label+\"__\"+Math.random().toString().slice(2,5)},labelSpanText:function(){return this.labelText||this.label}},methods:{update:function(e){this.handleChange(e.target.value)},handleChange:function(e){var t={};t[this.label]=e,void 0===t.hex&&void 0===t[\"#\"]?this.$emit(\"change\",t):e.length>5&&this.$emit(\"change\",t)},handleKeyDown:function(e){var t=this.val,n=Number(t);if(n){var r=this.arrowOffset||1;38===e.keyCode&&(t=n+r,this.handleChange(t),e.preventDefault()),40===e.keyCode&&(t=n-r,this.handleChange(t),e.preventDefault())}}}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(3),a=function(e){return e&&e.__esModule?e:{default:e}}(r),i=[\"#FFFFFF\",\"#F2F2F2\",\"#E6E6E6\",\"#D9D9D9\",\"#CCCCCC\",\"#BFBFBF\",\"#B3B3B3\",\"#A6A6A6\",\"#999999\",\"#8C8C8C\",\"#808080\",\"#737373\",\"#666666\",\"#595959\",\"#4D4D4D\",\"#404040\",\"#333333\",\"#262626\",\"#0D0D0D\",\"#000000\"];t.default={name:\"Grayscale\",mixins:[a.default],props:{palette:{type:Array,default:function(){return i}}},components:{},computed:{pick:function(){return this.colors.hex.toUpperCase()}},methods:{handlerClick:function(e){this.colorChange({hex:e,source:\"hex\"})}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(4),i=r(a),o=n(3),s=r(o);t.default={name:\"Material\",mixins:[s.default],components:{\"ed-in\":i.default},methods:{onChange:function(e){e&&(e.hex?this.isValidHex(e.hex)&&this.colorChange({hex:e.hex,source:\"hex\"}):(e.r||e.g||e.b)&&this.colorChange({r:e.r||this.colors.rgba.r,g:e.g||this.colors.rgba.g,b:e.b||this.colors.rgba.b,a:e.a||this.colors.rgba.a,source:\"rgba\"}))}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(3),i=r(a),o=n(5),s=r(o);t.default={name:\"Slider\",mixins:[i.default],props:{swatches:{type:Array,default:function(){return[\".80\",\".65\",\".50\",\".35\",\".20\"]}}},components:{hue:s.default},computed:{activeOffset:function(){var e=this.swatches.includes(\"0\"),t=this.swatches.includes(\"1\"),n=this.colors.hsl;return Math.round(100*n.s)/100==.5?Math.round(100*n.l)/100:e&&0===n.l?0:t&&1===n.l?1:-1}},methods:{hueChange:function(e){this.colorChange(e)},handleSwClick:function(e,t){this.colorChange({h:this.colors.hsl.h,s:.5,l:t,source:\"hsl\"})}}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={name:\"Hue\",props:{value:Object,direction:{type:String,default:\"horizontal\"}},data:function(){return{oldHue:0,pullDirection:\"\"}},computed:{colors:function(){var e=this.value.hsl.h;return 0!==e&&e-this.oldHue>0&&(this.pullDirection=\"right\"),0!==e&&e-this.oldHue<0&&(this.pullDirection=\"left\"),this.oldHue=e,this.value},directionClass:function(){return{\"vc-hue--horizontal\":\"horizontal\"===this.direction,\"vc-hue--vertical\":\"vertical\"===this.direction}},pointerTop:function(){return\"vertical\"===this.direction?0===this.colors.hsl.h&&\"right\"===this.pullDirection?0:-100*this.colors.hsl.h/360+100+\"%\":0},pointerLeft:function(){return\"vertical\"===this.direction?0:0===this.colors.hsl.h&&\"right\"===this.pullDirection?\"100%\":100*this.colors.hsl.h/360+\"%\"}},methods:{handleChange:function(e,t){!t&&e.preventDefault();var n,r,a=this.$refs.container,i=a.clientWidth,o=a.clientHeight,s=a.getBoundingClientRect().left+window.pageXOffset,c=a.getBoundingClientRect().top+window.pageYOffset,l=e.pageX||(e.touches?e.touches[0].pageX:0),u=e.pageY||(e.touches?e.touches[0].pageY:0),d=l-s,h=u-c;\"vertical\"===this.direction?(h<0?n=360:h>o?n=0:(r=-100*h/o+100,n=360*r/100),this.colors.hsl.h!==n&&this.$emit(\"change\",{h:n,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:\"hsl\"})):(d<0?n=0:d>i?n=360:(r=100*d/i,n=360*r/100),this.colors.hsl.h!==n&&this.$emit(\"change\",{h:n,s:this.colors.hsl.s,l:this.colors.hsl.l,a:this.colors.hsl.a,source:\"hsl\"}))},handleMouseDown:function(e){this.handleChange(e,!0),window.addEventListener(\"mousemove\",this.handleChange),window.addEventListener(\"mouseup\",this.handleMouseUp)},handleMouseUp:function(e){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener(\"mousemove\",this.handleChange),window.removeEventListener(\"mouseup\",this.handleMouseUp)}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(50),i=r(a),o=n(3),s=r(o),c=[\"red\",\"pink\",\"purple\",\"deepPurple\",\"indigo\",\"blue\",\"lightBlue\",\"cyan\",\"teal\",\"green\",\"lightGreen\",\"lime\",\"yellow\",\"amber\",\"orange\",\"deepOrange\",\"brown\",\"blueGrey\",\"black\"],l=[\"900\",\"700\",\"500\",\"300\",\"100\"],u=function(){var e=[];return c.forEach(function(t){var n=[];\"black\"===t.toLowerCase()||\"white\"===t.toLowerCase()?n=n.concat([\"#000000\",\"#FFFFFF\"]):l.forEach(function(e){var r=i.default[t][e];n.push(r.toUpperCase())}),e.push(n)}),e}();t.default={name:\"Swatches\",mixins:[s.default],props:{palette:{type:Array,default:function(){return u}}},computed:{pick:function(){return this.colors.hex}},methods:{equal:function(e){return e.toLowerCase()===this.colors.hex.toLowerCase()},handlerClick:function(e){this.colorChange({hex:e,source:\"hex\"})}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(3),i=r(a),o=n(4),s=r(o),c=n(6),l=r(c),u=n(5),d=r(u),h=n(7),f=r(h);t.default={name:\"Photoshop\",mixins:[i.default],props:{head:{type:String,default:\"Color Picker\"},disableFields:{type:Boolean,default:!1},hasResetButton:{type:Boolean,default:!1},acceptLabel:{type:String,default:\"OK\"},cancelLabel:{type:String,default:\"Cancel\"},resetLabel:{type:String,default:\"Reset\"},newLabel:{type:String,default:\"new\"},currentLabel:{type:String,default:\"current\"}},components:{saturation:l.default,hue:d.default,alpha:f.default,\"ed-in\":s.default},data:function(){return{currentColor:\"#FFF\"}},computed:{hsv:function(){var e=this.colors.hsv;return{h:e.h.toFixed(),s:(100*e.s).toFixed(),v:(100*e.v).toFixed()}},hex:function(){var e=this.colors.hex;return e&&e.replace(\"#\",\"\")}},created:function(){this.currentColor=this.colors.hex},methods:{childChange:function(e){this.colorChange(e)},inputChange:function(e){e&&(e[\"#\"]?this.isValidHex(e[\"#\"])&&this.colorChange({hex:e[\"#\"],source:\"hex\"}):e.r||e.g||e.b||e.a?this.colorChange({r:e.r||this.colors.rgba.r,g:e.g||this.colors.rgba.g,b:e.b||this.colors.rgba.b,a:e.a||this.colors.rgba.a,source:\"rgba\"}):(e.h||e.s||e.v)&&this.colorChange({h:e.h||this.colors.hsv.h,s:e.s/100||this.colors.hsv.s,v:e.v/100||this.colors.hsv.v,source:\"hsv\"}))},clickCurrentColor:function(){this.colorChange({hex:this.currentColor,source:\"hex\"})},handleAccept:function(){this.$emit(\"ok\")},handleCancel:function(){this.$emit(\"cancel\")},handleReset:function(){this.$emit(\"reset\")}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(57),i=r(a),o=n(58),s=r(o);t.default={name:\"Saturation\",props:{value:Object},computed:{colors:function(){return this.value},bgColor:function(){return\"hsl(\"+this.colors.hsv.h+\", 100%, 50%)\"},pointerTop:function(){return-100*this.colors.hsv.v+1+100+\"%\"},pointerLeft:function(){return 100*this.colors.hsv.s+\"%\"}},methods:{throttle:(0,s.default)(function(e,t){e(t)},20,{leading:!0,trailing:!1}),handleChange:function(e,t){!t&&e.preventDefault();var n=this.$refs.container,r=n.clientWidth,a=n.clientHeight,o=n.getBoundingClientRect().left+window.pageXOffset,s=n.getBoundingClientRect().top+window.pageYOffset,c=e.pageX||(e.touches?e.touches[0].pageX:0),l=e.pageY||(e.touches?e.touches[0].pageY:0),u=(0,i.default)(c-o,0,r),d=(0,i.default)(l-s,0,a),h=u/r,f=(0,i.default)(-d/a+1,0,1);this.throttle(this.onChange,{h:this.colors.hsv.h,s:h,v:f,a:this.colors.hsv.a,source:\"hsva\"})},onChange:function(e){this.$emit(\"change\",e)},handleMouseDown:function(e){window.addEventListener(\"mousemove\",this.handleChange),window.addEventListener(\"mouseup\",this.handleChange),window.addEventListener(\"mouseup\",this.handleMouseUp)},handleMouseUp:function(e){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener(\"mousemove\",this.handleChange),window.removeEventListener(\"mouseup\",this.handleChange),window.removeEventListener(\"mouseup\",this.handleMouseUp)}}}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(8),a=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default={name:\"Alpha\",props:{value:Object,onChange:Function},components:{checkboard:a.default},computed:{colors:function(){return this.value},gradientColor:function(){var e=this.colors.rgba,t=[e.r,e.g,e.b].join(\",\");return\"linear-gradient(to right, rgba(\"+t+\", 0) 0%, rgba(\"+t+\", 1) 100%)\"}},methods:{handleChange:function(e,t){!t&&e.preventDefault();var n,r=this.$refs.container,a=r.clientWidth,i=r.getBoundingClientRect().left+window.pageXOffset,o=e.pageX||(e.touches?e.touches[0].pageX:0),s=o-i;n=s<0?0:s>a?1:Math.round(100*s/a)/100,this.colors.a!==n&&this.$emit(\"change\",{h:this.colors.hsl.h,s:this.colors.hsl.s,l:this.colors.hsl.l,a:n,source:\"rgba\"})},handleMouseDown:function(e){this.handleChange(e,!0),window.addEventListener(\"mousemove\",this.handleChange),window.addEventListener(\"mouseup\",this.handleMouseUp)},handleMouseUp:function(){this.unbindEventListeners()},unbindEventListeners:function(){window.removeEventListener(\"mousemove\",this.handleChange),window.removeEventListener(\"mouseup\",this.handleMouseUp)}}}},function(e,t,n){\"use strict\";function r(e,t,n){if(\"undefined\"==typeof document)return null;var r=document.createElement(\"canvas\");r.width=r.height=2*n;var a=r.getContext(\"2d\");return a?(a.fillStyle=e,a.fillRect(0,0,r.width,r.height),a.fillStyle=t,a.fillRect(0,0,n,n),a.translate(n,n),a.fillRect(0,0,n,n),r.toDataURL()):null}function a(e,t,n){var a=e+\",\"+t+\",\"+n;if(i[a])return i[a];var o=r(e,t,n);return i[a]=o,o}Object.defineProperty(t,\"__esModule\",{value:!0});var i={};t.default={name:\"Checkboard\",props:{size:{type:[Number,String],default:8},white:{type:String,default:\"#fff\"},grey:{type:String,default:\"#e6e6e6\"}},computed:{bgStyle:function(){return{\"background-image\":\"url(\"+a(this.white,this.grey,this.size)+\")\"}}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(3),i=r(a),o=n(4),s=r(o),c=n(6),l=r(c),u=n(5),d=r(u),h=n(7),f=r(h),p=n(8),v=r(p),g=[\"#D0021B\",\"#F5A623\",\"#F8E71C\",\"#8B572A\",\"#7ED321\",\"#417505\",\"#BD10E0\",\"#9013FE\",\"#4A90E2\",\"#50E3C2\",\"#B8E986\",\"#000000\",\"#4A4A4A\",\"#9B9B9B\",\"#FFFFFF\",\"rgba(0,0,0,0)\"];t.default={name:\"Sketch\",mixins:[i.default],components:{saturation:l.default,hue:d.default,alpha:f.default,\"ed-in\":s.default,checkboard:v.default},props:{presetColors:{type:Array,default:function(){return g}},disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},computed:{hex:function(){var e=void 0;return e=this.colors.a<1?this.colors.hex8:this.colors.hex,e.replace(\"#\",\"\")},activeColor:function(){var e=this.colors.rgba;return\"rgba(\"+[e.r,e.g,e.b,e.a].join(\",\")+\")\"}},methods:{handlePreset:function(e){this.colorChange({hex:e,source:\"hex\"})},childChange:function(e){this.colorChange(e)},inputChange:function(e){e&&(e.hex?this.isValidHex(e.hex)&&this.colorChange({hex:e.hex,source:\"hex\"}):(e.r||e.g||e.b||e.a)&&this.colorChange({r:e.r||this.colors.rgba.r,g:e.g||this.colors.rgba.g,b:e.b||this.colors.rgba.b,a:e.a||this.colors.rgba.a,source:\"rgba\"}))}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(3),i=r(a),o=n(4),s=r(o),c=n(6),l=r(c),u=n(5),d=r(u),h=n(7),f=r(h),p=n(8),v=r(p);t.default={name:\"Chrome\",mixins:[i.default],props:{disableAlpha:{type:Boolean,default:!1},disableFields:{type:Boolean,default:!1}},components:{saturation:l.default,hue:d.default,alpha:f.default,\"ed-in\":s.default,checkboard:v.default},data:function(){return{fieldsIndex:0,highlight:!1}},computed:{hsl:function(){var e=this.colors.hsl,t=e.h,n=e.s,r=e.l;return{h:t.toFixed(),s:(100*n).toFixed()+\"%\",l:(100*r).toFixed()+\"%\"}},activeColor:function(){var e=this.colors.rgba;return\"rgba(\"+[e.r,e.g,e.b,e.a].join(\",\")+\")\"},hasAlpha:function(){return this.colors.a<1}},methods:{childChange:function(e){this.colorChange(e)},inputChange:function(e){if(e)if(e.hex)this.isValidHex(e.hex)&&this.colorChange({hex:e.hex,source:\"hex\"});else if(e.r||e.g||e.b||e.a)this.colorChange({r:e.r||this.colors.rgba.r,g:e.g||this.colors.rgba.g,b:e.b||this.colors.rgba.b,a:e.a||this.colors.rgba.a,source:\"rgba\"});else if(e.h||e.s||e.l){var t=e.s?e.s.replace(\"%\",\"\")/100:this.colors.hsl.s,n=e.l?e.l.replace(\"%\",\"\")/100:this.colors.hsl.l;this.colorChange({h:e.h||this.colors.hsl.h,s:t,l:n,source:\"hsl\"})}},toggleViews:function(){if(this.fieldsIndex>=2)return void(this.fieldsIndex=0);this.fieldsIndex++},showHighlight:function(){this.highlight=!0},hideHighlight:function(){this.highlight=!1}}}},function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}var a=n(23),i=r(a),o=n(32),s=r(o),c=n(36),l=r(c),u=n(40),d=r(u),h=n(47),f=r(h),p=n(52),v=r(p),g=n(68),b=r(g),x=n(72),m=r(x),_=n(7),w=r(_),C=n(8),y=r(C),k=n(4),F=r(k),A=n(5),S=r(A),M=n(6),E=r(M),L=n(3),R=r(L),j={version:\"2.7.0\",Compact:i.default,Grayscale:s.default,Material:l.default,Slider:d.default,Swatches:f.default,Photoshop:v.default,Sketch:b.default,Chrome:m.default,Alpha:w.default,Checkboard:y.default,EditableInput:F.default,Hue:S.default,Saturation:E.default,ColorMixin:R.default};e.exports=j},function(e,t,n){\"use strict\";function r(e){c||n(24)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(9),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(31),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Compact.vue\",t.default=d.exports},function(e,t,n){var r=n(25);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"6ce8a5a8\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-compact {\\n  padding-top: 5px;\\n  padding-left: 5px;\\n  width: 240px;\\n  border-radius: 2px;\\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\\n  background-color: #fff;\\n}\\n.vc-compact-colors {\\n  overflow: hidden;\\n  padding: 0;\\n  margin: 0;\\n}\\n.vc-compact-color-item {\\n  list-style: none;\\n  width: 15px;\\n  height: 15px;\\n  float: left;\\n  margin-right: 5px;\\n  margin-bottom: 5px;\\n  position: relative;\\n  cursor: pointer;\\n}\\n.vc-compact-color-item--white {\\n  box-shadow: inset 0 0 0 1px #ddd;\\n}\\n.vc-compact-color-item--white .vc-compact-dot {\\n  background: #000;\\n}\\n.vc-compact-dot {\\n  position: absolute;\\n  top: 5px;\\n  right: 5px;\\n  bottom: 5px;\\n  left: 5px;\\n  border-radius: 50%;\\n  opacity: 1;\\n  background: #fff;\\n}\\n\",\"\"])},function(e,t){e.exports=function(e,t){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=i[0],s=i[1],c=i[2],l=i[3],u={id:e+\":\"+a,css:s,media:c,sourceMap:l};r[o]?r[o].parts.push(u):n.push(r[o]={id:o,parts:[u]})}return n}},function(e,t,n){var r;!function(a){function i(e,t){if(e=e||\"\",t=t||{},e instanceof i)return e;if(!(this instanceof i))return new i(e,t);var n=o(e);this._originalInput=e,this._r=n.r,this._g=n.g,this._b=n.b,this._a=n.a,this._roundA=q(100*this._a)/100,this._format=t.format||n.format,this._gradientType=t.gradientType,this._r<1&&(this._r=q(this._r)),this._g<1&&(this._g=q(this._g)),this._b<1&&(this._b=q(this._b)),this._ok=n.ok,this._tc_id=U++}function o(e){var t={r:0,g:0,b:0},n=1,r=null,a=null,i=null,o=!1,c=!1;return\"string\"==typeof e&&(e=z(e)),\"object\"==typeof e&&($(e.r)&&$(e.g)&&$(e.b)?(t=s(e.r,e.g,e.b),o=!0,c=\"%\"===String(e.r).substr(-1)?\"prgb\":\"rgb\"):$(e.h)&&$(e.s)&&$(e.v)?(r=D(e.s),a=D(e.v),t=d(e.h,r,a),o=!0,c=\"hsv\"):$(e.h)&&$(e.s)&&$(e.l)&&(r=D(e.s),i=D(e.l),t=l(e.h,r,i),o=!0,c=\"hsl\"),e.hasOwnProperty(\"a\")&&(n=e.a)),n=M(n),{ok:o,format:e.format||c,r:V(255,X(t.r,0)),g:V(255,X(t.g,0)),b:V(255,X(t.b,0)),a:n}}function s(e,t,n){return{r:255*E(e,255),g:255*E(t,255),b:255*E(n,255)}}function c(e,t,n){e=E(e,255),t=E(t,255),n=E(n,255);var r,a,i=X(e,t,n),o=V(e,t,n),s=(i+o)/2;if(i==o)r=a=0;else{var c=i-o;switch(a=s>.5?c/(2-i-o):c/(i+o),i){case e:r=(t-n)/c+(t<n?6:0);break;case t:r=(n-e)/c+2;break;case n:r=(e-t)/c+4}r/=6}return{h:r,s:a,l:s}}function l(e,t,n){function r(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}var a,i,o;if(e=E(e,360),t=E(t,100),n=E(n,100),0===t)a=i=o=n;else{var s=n<.5?n*(1+t):n+t-n*t,c=2*n-s;a=r(c,s,e+1/3),i=r(c,s,e),o=r(c,s,e-1/3)}return{r:255*a,g:255*i,b:255*o}}function u(e,t,n){e=E(e,255),t=E(t,255),n=E(n,255);var r,a,i=X(e,t,n),o=V(e,t,n),s=i,c=i-o;if(a=0===i?0:c/i,i==o)r=0;else{switch(i){case e:r=(t-n)/c+(t<n?6:0);break;case t:r=(n-e)/c+2;break;case n:r=(e-t)/c+4}r/=6}return{h:r,s:a,v:s}}function d(e,t,n){e=6*E(e,360),t=E(t,100),n=E(n,100);var r=a.floor(e),i=e-r,o=n*(1-t),s=n*(1-i*t),c=n*(1-(1-i)*t),l=r%6;return{r:255*[n,s,o,o,c,n][l],g:255*[c,n,n,s,o,o][l],b:255*[o,o,c,n,n,s][l]}}function h(e,t,n,r){var a=[B(q(e).toString(16)),B(q(t).toString(16)),B(q(n).toString(16))];return r&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0):a.join(\"\")}function f(e,t,n,r,a){var i=[B(q(e).toString(16)),B(q(t).toString(16)),B(q(n).toString(16)),B(H(r))];return a&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)&&i[3].charAt(0)==i[3].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join(\"\")}function p(e,t,n,r){return[B(H(r)),B(q(e).toString(16)),B(q(t).toString(16)),B(q(n).toString(16))].join(\"\")}function v(e,t){t=0===t?0:t||10;var n=i(e).toHsl();return n.s-=t/100,n.s=L(n.s),i(n)}function g(e,t){t=0===t?0:t||10;var n=i(e).toHsl();return n.s+=t/100,n.s=L(n.s),i(n)}function b(e){return i(e).desaturate(100)}function x(e,t){t=0===t?0:t||10;var n=i(e).toHsl();return n.l+=t/100,n.l=L(n.l),i(n)}function m(e,t){t=0===t?0:t||10;var n=i(e).toRgb();return n.r=X(0,V(255,n.r-q(-t/100*255))),n.g=X(0,V(255,n.g-q(-t/100*255))),n.b=X(0,V(255,n.b-q(-t/100*255))),i(n)}function _(e,t){t=0===t?0:t||10;var n=i(e).toHsl();return n.l-=t/100,n.l=L(n.l),i(n)}function w(e,t){var n=i(e).toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,i(n)}function C(e){var t=i(e).toHsl();return t.h=(t.h+180)%360,i(t)}function y(e){var t=i(e).toHsl(),n=t.h;return[i(e),i({h:(n+120)%360,s:t.s,l:t.l}),i({h:(n+240)%360,s:t.s,l:t.l})]}function k(e){var t=i(e).toHsl(),n=t.h;return[i(e),i({h:(n+90)%360,s:t.s,l:t.l}),i({h:(n+180)%360,s:t.s,l:t.l}),i({h:(n+270)%360,s:t.s,l:t.l})]}function F(e){var t=i(e).toHsl(),n=t.h;return[i(e),i({h:(n+72)%360,s:t.s,l:t.l}),i({h:(n+216)%360,s:t.s,l:t.l})]}function A(e,t,n){t=t||6,n=n||30;var r=i(e).toHsl(),a=360/n,o=[i(e)];for(r.h=(r.h-(a*t>>1)+720)%360;--t;)r.h=(r.h+a)%360,o.push(i(r));return o}function S(e,t){t=t||6;for(var n=i(e).toHsv(),r=n.h,a=n.s,o=n.v,s=[],c=1/t;t--;)s.push(i({h:r,s:a,v:o})),o=(o+c)%1;return s}function M(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function E(e,t){j(e)&&(e=\"100%\");var n=O(e);return e=V(t,X(0,parseFloat(e))),n&&(e=parseInt(e*t,10)/100),a.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function L(e){return V(1,X(0,e))}function R(e){return parseInt(e,16)}function j(e){return\"string\"==typeof e&&-1!=e.indexOf(\".\")&&1===parseFloat(e)}function O(e){return\"string\"==typeof e&&-1!=e.indexOf(\"%\")}function B(e){return 1==e.length?\"0\"+e:\"\"+e}function D(e){return e<=1&&(e=100*e+\"%\"),e}function H(e){return a.round(255*parseFloat(e)).toString(16)}function P(e){return R(e)/255}function $(e){return!!K.CSS_UNIT.exec(e)}function z(e){e=e.replace(T,\"\").replace(I,\"\").toLowerCase();var t=!1;if(W[e])e=W[e],t=!0;else if(\"transparent\"==e)return{r:0,g:0,b:0,a:0,format:\"name\"};var n;return(n=K.rgb.exec(e))?{r:n[1],g:n[2],b:n[3]}:(n=K.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=K.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=K.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=K.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=K.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=K.hex8.exec(e))?{r:R(n[1]),g:R(n[2]),b:R(n[3]),a:P(n[4]),format:t?\"name\":\"hex8\"}:(n=K.hex6.exec(e))?{r:R(n[1]),g:R(n[2]),b:R(n[3]),format:t?\"name\":\"hex\"}:(n=K.hex4.exec(e))?{r:R(n[1]+\"\"+n[1]),g:R(n[2]+\"\"+n[2]),b:R(n[3]+\"\"+n[3]),a:P(n[4]+\"\"+n[4]),format:t?\"name\":\"hex8\"}:!!(n=K.hex3.exec(e))&&{r:R(n[1]+\"\"+n[1]),g:R(n[2]+\"\"+n[2]),b:R(n[3]+\"\"+n[3]),format:t?\"name\":\"hex\"}}function N(e){var t,n;return e=e||{level:\"AA\",size:\"small\"},t=(e.level||\"AA\").toUpperCase(),n=(e.size||\"small\").toLowerCase(),\"AA\"!==t&&\"AAA\"!==t&&(t=\"AA\"),\"small\"!==n&&\"large\"!==n&&(n=\"small\"),{level:t,size:n}}var T=/^\\s+/,I=/\\s+$/,U=0,q=a.round,V=a.min,X=a.max,G=a.random;i.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,t,n,r,i,o,s=this.toRgb();return e=s.r/255,t=s.g/255,n=s.b/255,r=e<=.03928?e/12.92:a.pow((e+.055)/1.055,2.4),i=t<=.03928?t/12.92:a.pow((t+.055)/1.055,2.4),o=n<=.03928?n/12.92:a.pow((n+.055)/1.055,2.4),.2126*r+.7152*i+.0722*o},setAlpha:function(e){return this._a=M(e),this._roundA=q(100*this._a)/100,this},toHsv:function(){var e=u(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=u(this._r,this._g,this._b),t=q(360*e.h),n=q(100*e.s),r=q(100*e.v);return 1==this._a?\"hsv(\"+t+\", \"+n+\"%, \"+r+\"%)\":\"hsva(\"+t+\", \"+n+\"%, \"+r+\"%, \"+this._roundA+\")\"},toHsl:function(){var e=c(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=c(this._r,this._g,this._b),t=q(360*e.h),n=q(100*e.s),r=q(100*e.l);return 1==this._a?\"hsl(\"+t+\", \"+n+\"%, \"+r+\"%)\":\"hsla(\"+t+\", \"+n+\"%, \"+r+\"%, \"+this._roundA+\")\"},toHex:function(e){return h(this._r,this._g,this._b,e)},toHexString:function(e){return\"#\"+this.toHex(e)},toHex8:function(e){return f(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return\"#\"+this.toHex8(e)},toRgb:function(){return{r:q(this._r),g:q(this._g),b:q(this._b),a:this._a}},toRgbString:function(){return 1==this._a?\"rgb(\"+q(this._r)+\", \"+q(this._g)+\", \"+q(this._b)+\")\":\"rgba(\"+q(this._r)+\", \"+q(this._g)+\", \"+q(this._b)+\", \"+this._roundA+\")\"},toPercentageRgb:function(){return{r:q(100*E(this._r,255))+\"%\",g:q(100*E(this._g,255))+\"%\",b:q(100*E(this._b,255))+\"%\",a:this._a}},toPercentageRgbString:function(){return 1==this._a?\"rgb(\"+q(100*E(this._r,255))+\"%, \"+q(100*E(this._g,255))+\"%, \"+q(100*E(this._b,255))+\"%)\":\"rgba(\"+q(100*E(this._r,255))+\"%, \"+q(100*E(this._g,255))+\"%, \"+q(100*E(this._b,255))+\"%, \"+this._roundA+\")\"},toName:function(){return 0===this._a?\"transparent\":!(this._a<1)&&(Y[h(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var t=\"#\"+p(this._r,this._g,this._b,this._a),n=t,r=this._gradientType?\"GradientType = 1, \":\"\";if(e){var a=i(e);n=\"#\"+p(a._r,a._g,a._b,a._a)}return\"progid:DXImageTransform.Microsoft.gradient(\"+r+\"startColorstr=\"+t+\",endColorstr=\"+n+\")\"},toString:function(e){var t=!!e;e=e||this._format;var n=!1,r=this._a<1&&this._a>=0;return t||!r||\"hex\"!==e&&\"hex6\"!==e&&\"hex3\"!==e&&\"hex4\"!==e&&\"hex8\"!==e&&\"name\"!==e?(\"rgb\"===e&&(n=this.toRgbString()),\"prgb\"===e&&(n=this.toPercentageRgbString()),\"hex\"!==e&&\"hex6\"!==e||(n=this.toHexString()),\"hex3\"===e&&(n=this.toHexString(!0)),\"hex4\"===e&&(n=this.toHex8String(!0)),\"hex8\"===e&&(n=this.toHex8String()),\"name\"===e&&(n=this.toName()),\"hsl\"===e&&(n=this.toHslString()),\"hsv\"===e&&(n=this.toHsvString()),n||this.toHexString()):\"name\"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return i(this.toString())},_applyModification:function(e,t){var n=e.apply(null,[this].concat([].slice.call(t)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(x,arguments)},brighten:function(){return this._applyModification(m,arguments)},darken:function(){return this._applyModification(_,arguments)},desaturate:function(){return this._applyModification(v,arguments)},saturate:function(){return this._applyModification(g,arguments)},greyscale:function(){return this._applyModification(b,arguments)},spin:function(){return this._applyModification(w,arguments)},_applyCombination:function(e,t){return e.apply(null,[this].concat([].slice.call(t)))},analogous:function(){return this._applyCombination(A,arguments)},complement:function(){return this._applyCombination(C,arguments)},monochromatic:function(){return this._applyCombination(S,arguments)},splitcomplement:function(){return this._applyCombination(F,arguments)},triad:function(){return this._applyCombination(y,arguments)},tetrad:function(){return this._applyCombination(k,arguments)}},i.fromRatio=function(e,t){if(\"object\"==typeof e){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=\"a\"===r?e[r]:D(e[r]));e=n}return i(e,t)},i.equals=function(e,t){return!(!e||!t)&&i(e).toRgbString()==i(t).toRgbString()},i.random=function(){return i.fromRatio({r:G(),g:G(),b:G()})},i.mix=function(e,t,n){n=0===n?0:n||50;var r=i(e).toRgb(),a=i(t).toRgb(),o=n/100;return i({r:(a.r-r.r)*o+r.r,g:(a.g-r.g)*o+r.g,b:(a.b-r.b)*o+r.b,a:(a.a-r.a)*o+r.a})},i.readability=function(e,t){var n=i(e),r=i(t);return(a.max(n.getLuminance(),r.getLuminance())+.05)/(a.min(n.getLuminance(),r.getLuminance())+.05)},i.isReadable=function(e,t,n){var r,a,o=i.readability(e,t);switch(a=!1,r=N(n),r.level+r.size){case\"AAsmall\":case\"AAAlarge\":a=o>=4.5;break;case\"AAlarge\":a=o>=3;break;case\"AAAsmall\":a=o>=7}return a},i.mostReadable=function(e,t,n){var r,a,o,s,c=null,l=0;n=n||{},a=n.includeFallbackColors,o=n.level,s=n.size;for(var u=0;u<t.length;u++)(r=i.readability(e,t[u]))>l&&(l=r,c=i(t[u]));return i.isReadable(e,c,{level:o,size:s})||!a?c:(n.includeFallbackColors=!1,i.mostReadable(e,[\"#fff\",\"#000\"],n))};var W=i.names={aliceblue:\"f0f8ff\",antiquewhite:\"faebd7\",aqua:\"0ff\",aquamarine:\"7fffd4\",azure:\"f0ffff\",beige:\"f5f5dc\",bisque:\"ffe4c4\",black:\"000\",blanchedalmond:\"ffebcd\",blue:\"00f\",blueviolet:\"8a2be2\",brown:\"a52a2a\",burlywood:\"deb887\",burntsienna:\"ea7e5d\",cadetblue:\"5f9ea0\",chartreuse:\"7fff00\",chocolate:\"d2691e\",coral:\"ff7f50\",cornflowerblue:\"6495ed\",cornsilk:\"fff8dc\",crimson:\"dc143c\",cyan:\"0ff\",darkblue:\"00008b\",darkcyan:\"008b8b\",darkgoldenrod:\"b8860b\",darkgray:\"a9a9a9\",darkgreen:\"006400\",darkgrey:\"a9a9a9\",darkkhaki:\"bdb76b\",darkmagenta:\"8b008b\",darkolivegreen:\"556b2f\",darkorange:\"ff8c00\",darkorchid:\"9932cc\",darkred:\"8b0000\",darksalmon:\"e9967a\",darkseagreen:\"8fbc8f\",darkslateblue:\"483d8b\",darkslategray:\"2f4f4f\",darkslategrey:\"2f4f4f\",darkturquoise:\"00ced1\",darkviolet:\"9400d3\",deeppink:\"ff1493\",deepskyblue:\"00bfff\",dimgray:\"696969\",dimgrey:\"696969\",dodgerblue:\"1e90ff\",firebrick:\"b22222\",floralwhite:\"fffaf0\",forestgreen:\"228b22\",fuchsia:\"f0f\",gainsboro:\"dcdcdc\",ghostwhite:\"f8f8ff\",gold:\"ffd700\",goldenrod:\"daa520\",gray:\"808080\",green:\"008000\",greenyellow:\"adff2f\",grey:\"808080\",honeydew:\"f0fff0\",hotpink:\"ff69b4\",indianred:\"cd5c5c\",indigo:\"4b0082\",ivory:\"fffff0\",khaki:\"f0e68c\",lavender:\"e6e6fa\",lavenderblush:\"fff0f5\",lawngreen:\"7cfc00\",lemonchiffon:\"fffacd\",lightblue:\"add8e6\",lightcoral:\"f08080\",lightcyan:\"e0ffff\",lightgoldenrodyellow:\"fafad2\",lightgray:\"d3d3d3\",lightgreen:\"90ee90\",lightgrey:\"d3d3d3\",lightpink:\"ffb6c1\",lightsalmon:\"ffa07a\",lightseagreen:\"20b2aa\",lightskyblue:\"87cefa\",lightslategray:\"789\",lightslategrey:\"789\",lightsteelblue:\"b0c4de\",lightyellow:\"ffffe0\",lime:\"0f0\",limegreen:\"32cd32\",linen:\"faf0e6\",magenta:\"f0f\",maroon:\"800000\",mediumaquamarine:\"66cdaa\",mediumblue:\"0000cd\",mediumorchid:\"ba55d3\",mediumpurple:\"9370db\",mediumseagreen:\"3cb371\",mediumslateblue:\"7b68ee\",mediumspringgreen:\"00fa9a\",mediumturquoise:\"48d1cc\",mediumvioletred:\"c71585\",midnightblue:\"191970\",mintcream:\"f5fffa\",mistyrose:\"ffe4e1\",moccasin:\"ffe4b5\",navajowhite:\"ffdead\",navy:\"000080\",oldlace:\"fdf5e6\",olive:\"808000\",olivedrab:\"6b8e23\",orange:\"ffa500\",orangered:\"ff4500\",orchid:\"da70d6\",palegoldenrod:\"eee8aa\",palegreen:\"98fb98\",paleturquoise:\"afeeee\",palevioletred:\"db7093\",papayawhip:\"ffefd5\",peachpuff:\"ffdab9\",peru:\"cd853f\",pink:\"ffc0cb\",plum:\"dda0dd\",powderblue:\"b0e0e6\",purple:\"800080\",rebeccapurple:\"663399\",red:\"f00\",rosybrown:\"bc8f8f\",royalblue:\"4169e1\",saddlebrown:\"8b4513\",salmon:\"fa8072\",sandybrown:\"f4a460\",seagreen:\"2e8b57\",seashell:\"fff5ee\",sienna:\"a0522d\",silver:\"c0c0c0\",skyblue:\"87ceeb\",slateblue:\"6a5acd\",slategray:\"708090\",slategrey:\"708090\",snow:\"fffafa\",springgreen:\"00ff7f\",steelblue:\"4682b4\",tan:\"d2b48c\",teal:\"008080\",thistle:\"d8bfd8\",tomato:\"ff6347\",turquoise:\"40e0d0\",violet:\"ee82ee\",wheat:\"f5deb3\",white:\"fff\",whitesmoke:\"f5f5f5\",yellow:\"ff0\",yellowgreen:\"9acd32\"},Y=i.hexNames=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[e[n]]=n);return t}(W),K=function(){var e=\"(?:[-\\\\+]?\\\\d*\\\\.\\\\d+%?)|(?:[-\\\\+]?\\\\d+%?)\",t=\"[\\\\s|\\\\(]+(\"+e+\")[,|\\\\s]+(\"+e+\")[,|\\\\s]+(\"+e+\")\\\\s*\\\\)?\",n=\"[\\\\s|\\\\(]+(\"+e+\")[,|\\\\s]+(\"+e+\")[,|\\\\s]+(\"+e+\")[,|\\\\s]+(\"+e+\")\\\\s*\\\\)?\";return{CSS_UNIT:new RegExp(e),rgb:new RegExp(\"rgb\"+t),rgba:new RegExp(\"rgba\"+n),hsl:new RegExp(\"hsl\"+t),hsla:new RegExp(\"hsla\"+n),hsv:new RegExp(\"hsv\"+t),hsva:new RegExp(\"hsva\"+n),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();void 0!==e&&e.exports?e.exports=i:void 0!==(r=function(){return i}.call(t,n,t,e))&&(e.exports=r)}(Math)},function(e,t,n){var r=n(29);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"0f73e73c\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-editable-input {\\n  position: relative;\\n}\\n.vc-input__input {\\n  padding: 0;\\n  border: 0;\\n  outline: none;\\n}\\n.vc-input__label {\\n  text-transform: capitalize;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-editable-input\"},[n(\"input\",{directives:[{name:\"model\",rawName:\"v-model\",value:e.val,expression:\"val\"}],ref:\"input\",staticClass:\"vc-input__input\",attrs:{\"aria-labelledby\":e.labelId},domProps:{value:e.val},on:{keydown:e.handleKeyDown,input:[function(t){t.target.composing||(e.val=t.target.value)},e.update]}}),e._v(\" \"),n(\"span\",{staticClass:\"vc-input__label\",attrs:{for:e.label,id:e.labelId}},[e._v(e._s(e.labelSpanText))]),e._v(\" \"),n(\"span\",{staticClass:\"vc-input__desc\"},[e._v(e._s(e.desc))])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-compact\",attrs:{role:\"application\",\"aria-label\":\"Compact color picker\"}},[n(\"ul\",{staticClass:\"vc-compact-colors\",attrs:{role:\"listbox\"}},e._l(e.paletteUpperCase(e.palette),function(t){return n(\"li\",{key:t,staticClass:\"vc-compact-color-item\",class:{\"vc-compact-color-item--white\":\"#FFFFFF\"===t},style:{background:t},attrs:{role:\"option\",\"aria-label\":\"color:\"+t,\"aria-selected\":t===e.pick},on:{click:function(n){e.handlerClick(t)}}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t===e.pick,expression:\"c === pick\"}],staticClass:\"vc-compact-dot\"})])}))])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(33)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(11),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(35),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Grayscale.vue\",t.default=d.exports},function(e,t,n){var r=n(34);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"21ddbb74\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-grayscale {\\n  width: 125px;\\n  border-radius: 2px;\\n  box-shadow: 0 2px 15px rgba(0,0,0,.12), 0 2px 10px rgba(0,0,0,.16);\\n  background-color: #fff;\\n}\\n.vc-grayscale-colors {\\n  border-radius: 2px;\\n  overflow: hidden;\\n  padding: 0;\\n  margin: 0;\\n}\\n.vc-grayscale-color-item {\\n  list-style: none;\\n  width: 25px;\\n  height: 25px;\\n  float: left;\\n  position: relative;\\n  cursor: pointer;\\n}\\n.vc-grayscale-color-item--white .vc-grayscale-dot {\\n  background: #000;\\n}\\n.vc-grayscale-dot {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  width: 6px;\\n  height: 6px;\\n  margin: -3px 0 0 -2px;\\n  border-radius: 50%;\\n  opacity: 1;\\n  background: #fff;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-grayscale\",attrs:{role:\"application\",\"aria-label\":\"Grayscale color picker\"}},[n(\"ul\",{staticClass:\"vc-grayscale-colors\",attrs:{role:\"listbox\"}},e._l(e.paletteUpperCase(e.palette),function(t){return n(\"li\",{key:t,staticClass:\"vc-grayscale-color-item\",class:{\"vc-grayscale-color-item--white\":\"#FFFFFF\"==t},style:{background:t},attrs:{role:\"option\",\"aria-label\":\"Color:\"+t,\"aria-selected\":t===e.pick},on:{click:function(n){e.handlerClick(t)}}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:t===e.pick,expression:\"c === pick\"}],staticClass:\"vc-grayscale-dot\"})])}))])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(37)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(12),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(39),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Material.vue\",t.default=d.exports},function(e,t,n){var r=n(38);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"1ff3af73\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,'\\n.vc-material {\\n  width: 98px;\\n  height: 98px;\\n  padding: 16px;\\n  font-family: \"Roboto\";\\n  position: relative;\\n  border-radius: 2px;\\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\\n  background-color: #fff;\\n}\\n.vc-material .vc-input__input {\\n  width: 100%;\\n  margin-top: 12px;\\n  font-size: 15px;\\n  color: #333;\\n  height: 30px;\\n}\\n.vc-material .vc-input__label {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  font-size: 11px;\\n  color: #999;\\n  text-transform: capitalize;\\n}\\n.vc-material-hex {\\n  border-bottom-width: 2px;\\n  border-bottom-style: solid;\\n}\\n.vc-material-split {\\n  display: flex;\\n  margin-right: -10px;\\n  padding-top: 11px;\\n}\\n.vc-material-third {\\n  flex: 1;\\n  padding-right: 10px;\\n}\\n',\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-material\",attrs:{role:\"application\",\"aria-label\":\"Material color picker\"}},[n(\"ed-in\",{staticClass:\"vc-material-hex\",style:{borderColor:e.colors.hex},attrs:{label:\"hex\"},on:{change:e.onChange},model:{value:e.colors.hex,callback:function(t){e.$set(e.colors,\"hex\",t)},expression:\"colors.hex\"}}),e._v(\" \"),n(\"div\",{staticClass:\"vc-material-split\"},[n(\"div\",{staticClass:\"vc-material-third\"},[n(\"ed-in\",{attrs:{label:\"r\"},on:{change:e.onChange},model:{value:e.colors.rgba.r,callback:function(t){e.$set(e.colors.rgba,\"r\",t)},expression:\"colors.rgba.r\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-material-third\"},[n(\"ed-in\",{attrs:{label:\"g\"},on:{change:e.onChange},model:{value:e.colors.rgba.g,callback:function(t){e.$set(e.colors.rgba,\"g\",t)},expression:\"colors.rgba.g\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-material-third\"},[n(\"ed-in\",{attrs:{label:\"b\"},on:{change:e.onChange},model:{value:e.colors.rgba.b,callback:function(t){e.$set(e.colors.rgba,\"b\",t)},expression:\"colors.rgba.b\"}})],1)])],1)},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(41)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(13),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(46),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Slider.vue\",t.default=d.exports},function(e,t,n){var r=n(42);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"7982aa43\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-slider {\\n  position: relative;\\n  width: 410px;\\n}\\n.vc-slider-hue-warp {\\n  height: 12px;\\n  position: relative;\\n}\\n.vc-slider-hue-warp .vc-hue-picker {\\n  width: 14px;\\n  height: 14px;\\n  border-radius: 6px;\\n  transform: translate(-7px, -2px);\\n  background-color: rgb(248, 248, 248);\\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\\n}\\n.vc-slider-swatches {\\n  display: flex;\\n  margin-top: 20px;\\n}\\n.vc-slider-swatch {\\n  margin-right: 1px;\\n  flex: 1;\\n  width: 20%;\\n}\\n.vc-slider-swatch:first-child {\\n  margin-right: 1px;\\n}\\n.vc-slider-swatch:first-child .vc-slider-swatch-picker {\\n  border-radius: 2px 0px 0px 2px;\\n}\\n.vc-slider-swatch:last-child {\\n  margin-right: 0;\\n}\\n.vc-slider-swatch:last-child .vc-slider-swatch-picker {\\n  border-radius: 0px 2px 2px 0px;\\n}\\n.vc-slider-swatch-picker {\\n  cursor: pointer;\\n  height: 12px;\\n}\\n.vc-slider-swatch-picker--active {\\n  transform: scaleY(1.8);\\n  border-radius: 3.6px/2px;\\n}\\n.vc-slider-swatch-picker--white {\\n  box-shadow: inset 0 0 0 1px #ddd;\\n}\\n.vc-slider-swatch-picker--active.vc-slider-swatch-picker--white {\\n  box-shadow: inset 0 0 0 0.6px #ddd;\\n}\\n\",\"\"])},function(e,t,n){var r=n(44);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"7c5f1a1c\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-hue {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n  border-radius: 2px;\\n}\\n.vc-hue--horizontal {\\n  background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n}\\n.vc-hue--vertical {\\n  background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n}\\n.vc-hue-container {\\n  cursor: pointer;\\n  margin: 0 2px;\\n  position: relative;\\n  height: 100%;\\n}\\n.vc-hue-pointer {\\n  z-index: 2;\\n  position: absolute;\\n}\\n.vc-hue-picker {\\n  cursor: pointer;\\n  margin-top: 1px;\\n  width: 4px;\\n  border-radius: 1px;\\n  height: 8px;\\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\\n  background: #fff;\\n  transform: translateX(-2px) ;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{class:[\"vc-hue\",e.directionClass]},[n(\"div\",{ref:\"container\",staticClass:\"vc-hue-container\",attrs:{role:\"slider\",\"aria-valuenow\":e.colors.hsl.h,\"aria-valuemin\":\"0\",\"aria-valuemax\":\"360\"},on:{mousedown:e.handleMouseDown,touchmove:e.handleChange,touchstart:e.handleChange}},[n(\"div\",{staticClass:\"vc-hue-pointer\",style:{top:e.pointerTop,left:e.pointerLeft},attrs:{role:\"presentation\"}},[n(\"div\",{staticClass:\"vc-hue-picker\"})])])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-slider\",attrs:{role:\"application\",\"aria-label\":\"Slider color picker\"}},[n(\"div\",{staticClass:\"vc-slider-hue-warp\"},[n(\"hue\",{on:{change:e.hueChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-slider-swatches\",attrs:{role:\"group\"}},e._l(e.swatches,function(t,r){return n(\"div\",{key:r,staticClass:\"vc-slider-swatch\",attrs:{\"data-index\":r,\"aria-label\":\"color:\"+e.colors.hex,role:\"button\"},on:{click:function(n){e.handleSwClick(r,t)}}},[n(\"div\",{staticClass:\"vc-slider-swatch-picker\",class:{\"vc-slider-swatch-picker--active\":t==e.activeOffset,\"vc-slider-swatch-picker--white\":\"1\"===t},style:{background:\"hsl(\"+e.colors.hsl.h+\", 50%, \"+100*t+\"%)\"}})])}))])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(48)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(15),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(51),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Swatches.vue\",t.default=d.exports},function(e,t,n){var r=n(49);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"10f839a2\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-swatches {\\n  width: 320px;\\n  height: 240px;\\n  overflow-y: scroll;\\n  background-color: #fff;\\n  box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\\n}\\n.vc-swatches-box {\\n  padding: 16px 0 6px 16px;\\n  overflow: hidden;\\n}\\n.vc-swatches-color-group {\\n  padding-bottom: 10px;\\n  width: 40px;\\n  float: left;\\n  margin-right: 10px;\\n}\\n.vc-swatches-color-it {\\n  box-sizing: border-box;\\n  width: 40px;\\n  height: 24px;\\n  cursor: pointer;\\n  background: #880e4f;\\n  margin-bottom: 1px;\\n  overflow: hidden;\\n  -ms-border-radius: 2px 2px 0 0;\\n  -moz-border-radius: 2px 2px 0 0;\\n  -o-border-radius: 2px 2px 0 0;\\n  -webkit-border-radius: 2px 2px 0 0;\\n  border-radius: 2px 2px 0 0;\\n}\\n.vc-swatches-color--white {\\n  border: 1px solid #DDD;\\n}\\n.vc-swatches-pick {\\n  fill: rgb(255, 255, 255);\\n  margin-left: 8px;\\n  display: block;\\n}\\n.vc-swatches-color--white .vc-swatches-pick {\\n  fill: rgb(51, 51, 51);\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"red\",function(){return r}),n.d(t,\"pink\",function(){return a}),n.d(t,\"purple\",function(){return i}),n.d(t,\"deepPurple\",function(){return o}),n.d(t,\"indigo\",function(){return s}),n.d(t,\"blue\",function(){return c}),n.d(t,\"lightBlue\",function(){return l}),n.d(t,\"cyan\",function(){return u}),n.d(t,\"teal\",function(){return d}),n.d(t,\"green\",function(){return h}),n.d(t,\"lightGreen\",function(){return f}),n.d(t,\"lime\",function(){return p}),n.d(t,\"yellow\",function(){return v}),n.d(t,\"amber\",function(){return g}),n.d(t,\"orange\",function(){return b}),n.d(t,\"deepOrange\",function(){return x}),n.d(t,\"brown\",function(){return m}),n.d(t,\"grey\",function(){return _}),n.d(t,\"blueGrey\",function(){return w}),n.d(t,\"darkText\",function(){return C}),n.d(t,\"lightText\",function(){return y}),n.d(t,\"darkIcons\",function(){return k}),n.d(t,\"lightIcons\",function(){return F}),n.d(t,\"white\",function(){return A}),n.d(t,\"black\",function(){return S});var r={50:\"#ffebee\",100:\"#ffcdd2\",200:\"#ef9a9a\",300:\"#e57373\",400:\"#ef5350\",500:\"#f44336\",600:\"#e53935\",700:\"#d32f2f\",800:\"#c62828\",900:\"#b71c1c\",a100:\"#ff8a80\",a200:\"#ff5252\",a400:\"#ff1744\",a700:\"#d50000\"},a={50:\"#fce4ec\",100:\"#f8bbd0\",200:\"#f48fb1\",300:\"#f06292\",400:\"#ec407a\",500:\"#e91e63\",600:\"#d81b60\",700:\"#c2185b\",800:\"#ad1457\",900:\"#880e4f\",a100:\"#ff80ab\",a200:\"#ff4081\",a400:\"#f50057\",a700:\"#c51162\"},i={50:\"#f3e5f5\",100:\"#e1bee7\",200:\"#ce93d8\",300:\"#ba68c8\",400:\"#ab47bc\",500:\"#9c27b0\",600:\"#8e24aa\",700:\"#7b1fa2\",800:\"#6a1b9a\",900:\"#4a148c\",a100:\"#ea80fc\",a200:\"#e040fb\",a400:\"#d500f9\",a700:\"#aa00ff\"},o={50:\"#ede7f6\",100:\"#d1c4e9\",200:\"#b39ddb\",300:\"#9575cd\",400:\"#7e57c2\",500:\"#673ab7\",600:\"#5e35b1\",700:\"#512da8\",800:\"#4527a0\",900:\"#311b92\",a100:\"#b388ff\",a200:\"#7c4dff\",a400:\"#651fff\",a700:\"#6200ea\"},s={50:\"#e8eaf6\",100:\"#c5cae9\",200:\"#9fa8da\",300:\"#7986cb\",400:\"#5c6bc0\",500:\"#3f51b5\",600:\"#3949ab\",700:\"#303f9f\",800:\"#283593\",900:\"#1a237e\",a100:\"#8c9eff\",a200:\"#536dfe\",a400:\"#3d5afe\",a700:\"#304ffe\"},c={50:\"#e3f2fd\",100:\"#bbdefb\",200:\"#90caf9\",300:\"#64b5f6\",400:\"#42a5f5\",500:\"#2196f3\",600:\"#1e88e5\",700:\"#1976d2\",800:\"#1565c0\",900:\"#0d47a1\",a100:\"#82b1ff\",a200:\"#448aff\",a400:\"#2979ff\",a700:\"#2962ff\"},l={50:\"#e1f5fe\",100:\"#b3e5fc\",200:\"#81d4fa\",300:\"#4fc3f7\",400:\"#29b6f6\",500:\"#03a9f4\",600:\"#039be5\",700:\"#0288d1\",800:\"#0277bd\",900:\"#01579b\",a100:\"#80d8ff\",a200:\"#40c4ff\",a400:\"#00b0ff\",a700:\"#0091ea\"},u={50:\"#e0f7fa\",100:\"#b2ebf2\",200:\"#80deea\",300:\"#4dd0e1\",400:\"#26c6da\",500:\"#00bcd4\",600:\"#00acc1\",700:\"#0097a7\",800:\"#00838f\",900:\"#006064\",a100:\"#84ffff\",a200:\"#18ffff\",a400:\"#00e5ff\",a700:\"#00b8d4\"},d={50:\"#e0f2f1\",100:\"#b2dfdb\",200:\"#80cbc4\",300:\"#4db6ac\",400:\"#26a69a\",500:\"#009688\",600:\"#00897b\",700:\"#00796b\",800:\"#00695c\",900:\"#004d40\",a100:\"#a7ffeb\",a200:\"#64ffda\",a400:\"#1de9b6\",a700:\"#00bfa5\"},h={50:\"#e8f5e9\",100:\"#c8e6c9\",200:\"#a5d6a7\",300:\"#81c784\",400:\"#66bb6a\",500:\"#4caf50\",600:\"#43a047\",700:\"#388e3c\",800:\"#2e7d32\",900:\"#1b5e20\",a100:\"#b9f6ca\",a200:\"#69f0ae\",a400:\"#00e676\",a700:\"#00c853\"},f={50:\"#f1f8e9\",100:\"#dcedc8\",200:\"#c5e1a5\",300:\"#aed581\",400:\"#9ccc65\",500:\"#8bc34a\",600:\"#7cb342\",700:\"#689f38\",800:\"#558b2f\",900:\"#33691e\",a100:\"#ccff90\",a200:\"#b2ff59\",a400:\"#76ff03\",a700:\"#64dd17\"},p={50:\"#f9fbe7\",100:\"#f0f4c3\",200:\"#e6ee9c\",300:\"#dce775\",400:\"#d4e157\",500:\"#cddc39\",600:\"#c0ca33\",700:\"#afb42b\",800:\"#9e9d24\",900:\"#827717\",a100:\"#f4ff81\",a200:\"#eeff41\",a400:\"#c6ff00\",a700:\"#aeea00\"},v={50:\"#fffde7\",100:\"#fff9c4\",200:\"#fff59d\",300:\"#fff176\",400:\"#ffee58\",500:\"#ffeb3b\",600:\"#fdd835\",700:\"#fbc02d\",800:\"#f9a825\",900:\"#f57f17\",a100:\"#ffff8d\",a200:\"#ffff00\",a400:\"#ffea00\",a700:\"#ffd600\"},g={50:\"#fff8e1\",100:\"#ffecb3\",200:\"#ffe082\",300:\"#ffd54f\",400:\"#ffca28\",500:\"#ffc107\",600:\"#ffb300\",700:\"#ffa000\",800:\"#ff8f00\",900:\"#ff6f00\",a100:\"#ffe57f\",a200:\"#ffd740\",a400:\"#ffc400\",a700:\"#ffab00\"},b={50:\"#fff3e0\",100:\"#ffe0b2\",200:\"#ffcc80\",300:\"#ffb74d\",400:\"#ffa726\",500:\"#ff9800\",600:\"#fb8c00\",700:\"#f57c00\",800:\"#ef6c00\",900:\"#e65100\",a100:\"#ffd180\",a200:\"#ffab40\",a400:\"#ff9100\",a700:\"#ff6d00\"},x={50:\"#fbe9e7\",100:\"#ffccbc\",200:\"#ffab91\",300:\"#ff8a65\",400:\"#ff7043\",500:\"#ff5722\",600:\"#f4511e\",700:\"#e64a19\",800:\"#d84315\",900:\"#bf360c\",a100:\"#ff9e80\",a200:\"#ff6e40\",a400:\"#ff3d00\",a700:\"#dd2c00\"},m={50:\"#efebe9\",100:\"#d7ccc8\",200:\"#bcaaa4\",300:\"#a1887f\",400:\"#8d6e63\",500:\"#795548\",600:\"#6d4c41\",700:\"#5d4037\",800:\"#4e342e\",900:\"#3e2723\"},_={50:\"#fafafa\",100:\"#f5f5f5\",200:\"#eeeeee\",300:\"#e0e0e0\",400:\"#bdbdbd\",500:\"#9e9e9e\",600:\"#757575\",700:\"#616161\",800:\"#424242\",900:\"#212121\"},w={50:\"#eceff1\",100:\"#cfd8dc\",200:\"#b0bec5\",300:\"#90a4ae\",400:\"#78909c\",500:\"#607d8b\",600:\"#546e7a\",700:\"#455a64\",800:\"#37474f\",900:\"#263238\"},C={primary:\"rgba(0, 0, 0, 0.87)\",secondary:\"rgba(0, 0, 0, 0.54)\",disabled:\"rgba(0, 0, 0, 0.38)\",dividers:\"rgba(0, 0, 0, 0.12)\"},y={primary:\"rgba(255, 255, 255, 1)\",secondary:\"rgba(255, 255, 255, 0.7)\",disabled:\"rgba(255, 255, 255, 0.5)\",dividers:\"rgba(255, 255, 255, 0.12)\"},k={active:\"rgba(0, 0, 0, 0.54)\",inactive:\"rgba(0, 0, 0, 0.38)\"},F={active:\"rgba(255, 255, 255, 1)\",inactive:\"rgba(255, 255, 255, 0.5)\"},A=\"#ffffff\",S=\"#000000\";t.default={red:r,pink:a,purple:i,deepPurple:o,indigo:s,blue:c,lightBlue:l,cyan:u,teal:d,green:h,lightGreen:f,lime:p,yellow:v,amber:g,orange:b,deepOrange:x,brown:m,grey:_,blueGrey:w,darkText:C,lightText:y,darkIcons:k,lightIcons:F,white:A,black:S}},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-swatches\",attrs:{role:\"application\",\"aria-label\":\"Swatches color picker\",\"data-pick\":e.pick}},[n(\"div\",{staticClass:\"vc-swatches-box\",attrs:{role:\"listbox\"}},e._l(e.palette,function(t,r){return n(\"div\",{key:r,staticClass:\"vc-swatches-color-group\"},e._l(t,function(t){return n(\"div\",{key:t,class:[\"vc-swatches-color-it\",{\"vc-swatches-color--white\":\"#FFFFFF\"===t}],style:{background:t},attrs:{role:\"option\",\"aria-label\":\"Color:\"+t,\"aria-selected\":e.equal(t),\"data-color\":t},on:{click:function(n){e.handlerClick(t)}}},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:e.equal(t),expression:\"equal(c)\"}],staticClass:\"vc-swatches-pick\"},[n(\"svg\",{staticStyle:{width:\"24px\",height:\"24px\"},attrs:{viewBox:\"0 0 24 24\"}},[n(\"path\",{attrs:{d:\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"}})])])])}))}))])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(53)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(16),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(67),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Photoshop.vue\",t.default=d.exports},function(e,t,n){var r=n(54);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"080365d4\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,'\\n.vc-photoshop {\\n  background: #DCDCDC;\\n  border-radius: 4px;\\n  box-shadow: 0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15);\\n  box-sizing: initial;\\n  width: 513px;\\n  font-family: Roboto;\\n}\\n.vc-photoshop__disable-fields {\\n  width: 390px;\\n}\\n.vc-ps-head {\\n  background-image: linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%);\\n  border-bottom: 1px solid #B1B1B1;\\n  box-shadow: inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02);\\n  height: 23px;\\n  line-height: 24px;\\n  border-radius: 4px 4px 0 0;\\n  font-size: 13px;\\n  color: #4D4D4D;\\n  text-align: center;\\n}\\n.vc-ps-body {\\n  padding: 15px;\\n  display: flex;\\n}\\n.vc-ps-saturation-wrap {\\n  width: 256px;\\n  height: 256px;\\n  position: relative;\\n  border: 2px solid #B3B3B3;\\n  border-bottom: 2px solid #F0F0F0;\\n  overflow: hidden;\\n}\\n.vc-ps-saturation-wrap .vc-saturation-circle {\\n  width: 12px;\\n  height: 12px;\\n}\\n.vc-ps-hue-wrap {\\n  position: relative;\\n  height: 256px;\\n  width: 19px;\\n  margin-left: 10px;\\n  border: 2px solid #B3B3B3;\\n  border-bottom: 2px solid #F0F0F0;\\n}\\n.vc-ps-hue-pointer {\\n  position: relative;\\n}\\n.vc-ps-hue-pointer--left,\\n.vc-ps-hue-pointer--right {\\n  position: absolute;\\n  width: 0;\\n  height: 0;\\n  border-style: solid;\\n  border-width: 5px 0 5px 8px;\\n  border-color: transparent transparent transparent #555;\\n}\\n.vc-ps-hue-pointer--left:after,\\n.vc-ps-hue-pointer--right:after {\\n  content: \"\";\\n  width: 0;\\n  height: 0;\\n  border-style: solid;\\n  border-width: 4px 0 4px 6px;\\n  border-color: transparent transparent transparent #fff;\\n  position: absolute;\\n  top: 1px;\\n  left: 1px;\\n  transform: translate(-8px, -5px);\\n}\\n.vc-ps-hue-pointer--left {\\n  transform: translate(-13px, -4px);\\n}\\n.vc-ps-hue-pointer--right {\\n  transform: translate(20px, -4px) rotate(180deg);\\n}\\n.vc-ps-controls {\\n  width: 180px;\\n  margin-left: 10px;\\n  display: flex;\\n}\\n.vc-ps-controls__disable-fields {\\n  width: auto;\\n}\\n.vc-ps-actions {\\n  margin-left: 20px;\\n  flex: 1;\\n}\\n.vc-ps-ac-btn {\\n  cursor: pointer;\\n  background-image: linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%);\\n  border: 1px solid #878787;\\n  border-radius: 2px;\\n  height: 20px;\\n  box-shadow: 0 1px 0 0 #EAEAEA;\\n  font-size: 14px;\\n  color: #000;\\n  line-height: 20px;\\n  text-align: center;\\n  margin-bottom: 10px;\\n}\\n.vc-ps-previews {\\n  width: 60px;\\n}\\n.vc-ps-previews__swatches {\\n  border: 1px solid #B3B3B3;\\n  border-bottom: 1px solid #F0F0F0;\\n  margin-bottom: 2px;\\n  margin-top: 1px;\\n}\\n.vc-ps-previews__pr-color {\\n  height: 34px;\\n  box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;\\n}\\n.vc-ps-previews__label {\\n  font-size: 14px;\\n  color: #000;\\n  text-align: center;\\n}\\n.vc-ps-fields {\\n  padding-top: 5px;\\n  padding-bottom: 9px;\\n  width: 80px;\\n  position: relative;\\n}\\n.vc-ps-fields .vc-input__input {\\n  margin-left: 40%;\\n  width: 40%;\\n  height: 18px;\\n  border: 1px solid #888888;\\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\\n  margin-bottom: 5px;\\n  font-size: 13px;\\n  padding-left: 3px;\\n  margin-right: 10px;\\n}\\n.vc-ps-fields .vc-input__label, .vc-ps-fields .vc-input__desc {\\n  top: 0;\\n  text-transform: uppercase;\\n  font-size: 13px;\\n  height: 18px;\\n  line-height: 22px;\\n  position: absolute;\\n}\\n.vc-ps-fields .vc-input__label {\\n  left: 0;\\n  width: 34px;\\n}\\n.vc-ps-fields .vc-input__desc {\\n  right: 0;\\n  width: 0;\\n}\\n.vc-ps-fields__divider {\\n  height: 5px;\\n}\\n.vc-ps-fields__hex .vc-input__input {\\n  margin-left: 20%;\\n  width: 80%;\\n  height: 18px;\\n  border: 1px solid #888888;\\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC;\\n  margin-bottom: 6px;\\n  font-size: 13px;\\n  padding-left: 3px;\\n}\\n.vc-ps-fields__hex .vc-input__label {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 14px;\\n  text-transform: uppercase;\\n  font-size: 13px;\\n  height: 18px;\\n  line-height: 22px;\\n}\\n',\"\"])},function(e,t,n){var r=n(56);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"b5380e52\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-saturation,\\n.vc-saturation--white,\\n.vc-saturation--black {\\n  cursor: pointer;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n.vc-saturation--white {\\n  background: linear-gradient(to right, #fff, rgba(255,255,255,0));\\n}\\n.vc-saturation--black {\\n  background: linear-gradient(to top, #000, rgba(0,0,0,0));\\n}\\n.vc-saturation-pointer {\\n  cursor: pointer;\\n  position: absolute;\\n}\\n.vc-saturation-circle {\\n  cursor: head;\\n  width: 4px;\\n  height: 4px;\\n  box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3), 0 0 1px 2px rgba(0,0,0,.4);\\n  border-radius: 50%;\\n  transform: translate(-2px, -2px);\\n}\\n\",\"\"])},function(e,t){function n(e,t,n){return t<n?e<t?t:e>n?n:e:e<n?n:e>t?t:e}e.exports=n},function(e,t,n){(function(t){function n(e,t,n){function r(t){var n=v,r=g;return v=g=void 0,k=t,x=e.apply(r,n)}function i(e){return k=e,m=setTimeout(u,t),F?r(e):x}function o(e){var n=e-_,r=e-k,a=t-n;return A?C(a,b-r):a}function l(e){var n=e-_,r=e-k;return void 0===_||n>=t||n<0||A&&r>=b}function u(){var e=y();if(l(e))return d(e);m=setTimeout(u,o(e))}function d(e){return m=void 0,S&&v?r(e):(v=g=void 0,x)}function h(){void 0!==m&&clearTimeout(m),k=0,v=_=g=m=void 0}function f(){return void 0===m?x:d(y())}function p(){var e=y(),n=l(e);if(v=arguments,g=this,_=e,n){if(void 0===m)return i(_);if(A)return m=setTimeout(u,t),r(_)}return void 0===m&&(m=setTimeout(u,t)),x}var v,g,b,x,m,_,k=0,F=!1,A=!1,S=!0;if(\"function\"!=typeof e)throw new TypeError(c);return t=s(t)||0,a(n)&&(F=!!n.leading,A=\"maxWait\"in n,b=A?w(s(n.maxWait)||0,t):b,S=\"trailing\"in n?!!n.trailing:S),p.cancel=h,p.flush=f,p}function r(e,t,r){var i=!0,o=!0;if(\"function\"!=typeof e)throw new TypeError(c);return a(r)&&(i=\"leading\"in r?!!r.leading:i,o=\"trailing\"in r?!!r.trailing:o),n(e,t,{leading:i,maxWait:t,trailing:o})}function a(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function i(e){return!!e&&\"object\"==typeof e}function o(e){return\"symbol\"==typeof e||i(e)&&_.call(e)==u}function s(e){if(\"number\"==typeof e)return e;if(o(e))return l;if(a(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=a(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(d,\"\");var n=f.test(e);return n||p.test(e)?v(e.slice(2),n?2:8):h.test(e)?l:+e}var c=\"Expected a function\",l=NaN,u=\"[object Symbol]\",d=/^\\s+|\\s+$/g,h=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,p=/^0o[0-7]+$/i,v=parseInt,g=\"object\"==typeof t&&t&&t.Object===Object&&t,b=\"object\"==typeof self&&self&&self.Object===Object&&self,x=g||b||Function(\"return this\")(),m=Object.prototype,_=m.toString,w=Math.max,C=Math.min,y=function(){return x.Date.now()};e.exports=r}).call(t,n(59))},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{ref:\"container\",staticClass:\"vc-saturation\",style:{background:e.bgColor},on:{mousedown:e.handleMouseDown,touchmove:e.handleChange,touchstart:e.handleChange}},[n(\"div\",{staticClass:\"vc-saturation--white\"}),e._v(\" \"),n(\"div\",{staticClass:\"vc-saturation--black\"}),e._v(\" \"),n(\"div\",{staticClass:\"vc-saturation-pointer\",style:{top:e.pointerTop,left:e.pointerLeft}},[n(\"div\",{staticClass:\"vc-saturation-circle\"})])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){var r=n(62);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"4dc1b086\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-alpha {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n}\\n.vc-alpha-checkboard-wrap {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n  overflow: hidden;\\n}\\n.vc-alpha-gradient {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n}\\n.vc-alpha-container {\\n  cursor: pointer;\\n  position: relative;\\n  z-index: 2;\\n  height: 100%;\\n  margin: 0 3px;\\n}\\n.vc-alpha-pointer {\\n  z-index: 2;\\n  position: absolute;\\n}\\n.vc-alpha-picker {\\n  cursor: pointer;\\n  width: 4px;\\n  border-radius: 1px;\\n  height: 8px;\\n  box-shadow: 0 0 2px rgba(0, 0, 0, .6);\\n  background: #fff;\\n  margin-top: 1px;\\n  transform: translateX(-2px);\\n}\\n\",\"\"])},function(e,t,n){var r=n(64);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"7e15c05b\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-checkerboard {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n  background-size: contain;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement;return(e._self._c||t)(\"div\",{staticClass:\"vc-checkerboard\",style:e.bgStyle})},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"vc-alpha\"},[n(\"div\",{staticClass:\"vc-alpha-checkboard-wrap\"},[n(\"checkboard\")],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-alpha-gradient\",style:{background:e.gradientColor}}),e._v(\" \"),n(\"div\",{ref:\"container\",staticClass:\"vc-alpha-container\",on:{mousedown:e.handleMouseDown,touchmove:e.handleChange,touchstart:e.handleChange}},[n(\"div\",{staticClass:\"vc-alpha-pointer\",style:{left:100*e.colors.a+\"%\"}},[n(\"div\",{staticClass:\"vc-alpha-picker\"})])])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{class:[\"vc-photoshop\",e.disableFields?\"vc-photoshop__disable-fields\":\"\"],attrs:{role:\"application\",\"aria-label\":\"PhotoShop color picker\"}},[n(\"div\",{staticClass:\"vc-ps-head\",attrs:{role:\"heading\"}},[e._v(e._s(e.head))]),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-body\"},[n(\"div\",{staticClass:\"vc-ps-saturation-wrap\"},[n(\"saturation\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-hue-wrap\"},[n(\"hue\",{attrs:{direction:\"vertical\"},on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}},[n(\"div\",{staticClass:\"vc-ps-hue-pointer\"},[n(\"i\",{staticClass:\"vc-ps-hue-pointer--left\"}),n(\"i\",{staticClass:\"vc-ps-hue-pointer--right\"})])])],1),e._v(\" \"),n(\"div\",{class:[\"vc-ps-controls\",e.disableFields?\"vc-ps-controls__disable-fields\":\"\"]},[n(\"div\",{staticClass:\"vc-ps-previews\"},[n(\"div\",{staticClass:\"vc-ps-previews__label\"},[e._v(e._s(e.newLabel))]),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-previews__swatches\"},[n(\"div\",{staticClass:\"vc-ps-previews__pr-color\",style:{background:e.colors.hex},attrs:{\"aria-label\":\"New color is \"+e.colors.hex}}),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-previews__pr-color\",style:{background:e.currentColor},attrs:{\"aria-label\":\"Current color is \"+e.currentColor},on:{click:e.clickCurrentColor}})]),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-previews__label\"},[e._v(e._s(e.currentLabel))])]),e._v(\" \"),e.disableFields?e._e():n(\"div\",{staticClass:\"vc-ps-actions\"},[n(\"div\",{staticClass:\"vc-ps-ac-btn\",attrs:{role:\"button\",\"aria-label\":e.acceptLabel},on:{click:e.handleAccept}},[e._v(e._s(e.acceptLabel))]),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-ac-btn\",attrs:{role:\"button\",\"aria-label\":e.cancelLabel},on:{click:e.handleCancel}},[e._v(e._s(e.cancelLabel))]),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-fields\"},[n(\"ed-in\",{attrs:{label:\"h\",desc:\"°\",value:e.hsv.h},on:{change:e.inputChange}}),e._v(\" \"),n(\"ed-in\",{attrs:{label:\"s\",desc:\"%\",value:e.hsv.s,max:100},on:{change:e.inputChange}}),e._v(\" \"),n(\"ed-in\",{attrs:{label:\"v\",desc:\"%\",value:e.hsv.v,max:100},on:{change:e.inputChange}}),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-fields__divider\"}),e._v(\" \"),n(\"ed-in\",{attrs:{label:\"r\",value:e.colors.rgba.r},on:{change:e.inputChange}}),e._v(\" \"),n(\"ed-in\",{attrs:{label:\"g\",value:e.colors.rgba.g},on:{change:e.inputChange}}),e._v(\" \"),n(\"ed-in\",{attrs:{label:\"b\",value:e.colors.rgba.b},on:{change:e.inputChange}}),e._v(\" \"),n(\"div\",{staticClass:\"vc-ps-fields__divider\"}),e._v(\" \"),n(\"ed-in\",{staticClass:\"vc-ps-fields__hex\",attrs:{label:\"#\",value:e.hex},on:{change:e.inputChange}})],1),e._v(\" \"),e.hasResetButton?n(\"div\",{staticClass:\"vc-ps-ac-btn\",attrs:{\"aria-label\":\"reset\"},on:{click:e.handleReset}},[e._v(e._s(e.resetLabel))]):e._e()])])])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(69)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(20),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(71),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Sketch.vue\",t.default=d.exports},function(e,t,n){var r=n(70);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"612c6604\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-sketch {\\n  position: relative;\\n  width: 200px;\\n  padding: 10px 10px 0;\\n  box-sizing: initial;\\n  background: #fff;\\n  border-radius: 4px;\\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, .15), 0 8px 16px rgba(0, 0, 0, .15);\\n}\\n.vc-sketch-saturation-wrap {\\n  width: 100%;\\n  padding-bottom: 75%;\\n  position: relative;\\n  overflow: hidden;\\n}\\n.vc-sketch-controls {\\n  display: flex;\\n}\\n.vc-sketch-sliders {\\n  padding: 4px 0;\\n  flex: 1;\\n}\\n.vc-sketch-sliders .vc-hue,\\n.vc-sketch-sliders .vc-alpha-gradient {\\n  border-radius: 2px;\\n}\\n.vc-sketch-hue-wrap {\\n  position: relative;\\n  height: 10px;\\n}\\n.vc-sketch-alpha-wrap {\\n  position: relative;\\n  height: 10px;\\n  margin-top: 4px;\\n  overflow: hidden;\\n}\\n.vc-sketch-color-wrap {\\n  width: 24px;\\n  height: 24px;\\n  position: relative;\\n  margin-top: 4px;\\n  margin-left: 4px;\\n  border-radius: 3px;\\n}\\n.vc-sketch-active-color {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  border-radius: 2px;\\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15), inset 0 0 4px rgba(0, 0, 0, .25);\\n  z-index: 2;\\n}\\n.vc-sketch-color-wrap .vc-checkerboard {\\n  background-size: auto;\\n}\\n.vc-sketch-field {\\n  display: flex;\\n  padding-top: 4px;\\n}\\n.vc-sketch-field .vc-input__input {\\n  width: 90%;\\n  padding: 4px 0 3px 10%;\\n  border: none;\\n  box-shadow: inset 0 0 0 1px #ccc;\\n  font-size: 10px;\\n}\\n.vc-sketch-field .vc-input__label {\\n  display: block;\\n  text-align: center;\\n  font-size: 11px;\\n  color: #222;\\n  padding-top: 3px;\\n  padding-bottom: 4px;\\n  text-transform: capitalize;\\n}\\n.vc-sketch-field--single {\\n  flex: 1;\\n  padding-left: 6px;\\n}\\n.vc-sketch-field--double {\\n  flex: 2;\\n}\\n.vc-sketch-presets {\\n  margin-right: -10px;\\n  margin-left: -10px;\\n  padding-left: 10px;\\n  padding-top: 10px;\\n  border-top: 1px solid #eee;\\n}\\n.vc-sketch-presets-color {\\n  border-radius: 3px;\\n  overflow: hidden;\\n  position: relative;\\n  display: inline-block;\\n  margin: 0 10px 10px 0;\\n  vertical-align: top;\\n  cursor: pointer;\\n  width: 16px;\\n  height: 16px;\\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15);\\n}\\n.vc-sketch-presets-color .vc-checkerboard {\\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .15);\\n  border-radius: 3px;\\n}\\n.vc-sketch__disable-alpha .vc-sketch-color-wrap {\\n  height: 10px;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{class:[\"vc-sketch\",e.disableAlpha?\"vc-sketch__disable-alpha\":\"\"],attrs:{role:\"application\",\"aria-label\":\"Sketch color picker\"}},[n(\"div\",{staticClass:\"vc-sketch-saturation-wrap\"},[n(\"saturation\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-controls\"},[n(\"div\",{staticClass:\"vc-sketch-sliders\"},[n(\"div\",{staticClass:\"vc-sketch-hue-wrap\"},[n(\"hue\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),e.disableAlpha?e._e():n(\"div\",{staticClass:\"vc-sketch-alpha-wrap\"},[n(\"alpha\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1)]),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-color-wrap\"},[n(\"div\",{staticClass:\"vc-sketch-active-color\",style:{background:e.activeColor},attrs:{\"aria-label\":\"Current color is \"+e.activeColor}}),e._v(\" \"),n(\"checkboard\")],1)]),e._v(\" \"),e.disableFields?e._e():n(\"div\",{staticClass:\"vc-sketch-field\"},[n(\"div\",{staticClass:\"vc-sketch-field--double\"},[n(\"ed-in\",{attrs:{label:\"hex\",value:e.hex},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-field--single\"},[n(\"ed-in\",{attrs:{label:\"r\",value:e.colors.rgba.r},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-field--single\"},[n(\"ed-in\",{attrs:{label:\"g\",value:e.colors.rgba.g},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-field--single\"},[n(\"ed-in\",{attrs:{label:\"b\",value:e.colors.rgba.b},on:{change:e.inputChange}})],1),e._v(\" \"),e.disableAlpha?e._e():n(\"div\",{staticClass:\"vc-sketch-field--single\"},[n(\"ed-in\",{attrs:{label:\"a\",value:e.colors.a,\"arrow-offset\":.01,max:1},on:{change:e.inputChange}})],1)]),e._v(\" \"),n(\"div\",{staticClass:\"vc-sketch-presets\",attrs:{role:\"group\",\"aria-label\":\"A color preset, pick one to set as current color\"}},[e._l(e.presetColors,function(t){return[e.isTransparent(t)?n(\"div\",{key:t,staticClass:\"vc-sketch-presets-color\",attrs:{\"aria-label\":\"Color:\"+t},on:{click:function(n){e.handlePreset(t)}}},[n(\"checkboard\")],1):n(\"div\",{key:t,staticClass:\"vc-sketch-presets-color\",style:{background:t},attrs:{\"aria-label\":\"Color:\"+t},on:{click:function(n){e.handlePreset(t)}}})]})],2)])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i},function(e,t,n){\"use strict\";function r(e){c||n(73)}Object.defineProperty(t,\"__esModule\",{value:!0});var a=n(21),i=n.n(a);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,function(){return a[e]})}(o);var s=n(75),c=!1,l=n(2),u=r,d=l(i.a,s.a,!1,u,null,null);d.options.__file=\"src/components/Chrome.vue\",t.default=d.exports},function(e,t,n){var r=n(74);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]),r.locals&&(e.exports=r.locals);n(1)(\"1cd16048\",r,!1,{})},function(e,t,n){t=e.exports=n(0)(!1),t.push([e.i,\"\\n.vc-chrome {\\n  background: #fff;\\n  border-radius: 2px;\\n  box-shadow: 0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3);\\n  box-sizing: initial;\\n  width: 225px;\\n  font-family: Menlo;\\n  background-color: #fff;\\n}\\n.vc-chrome-controls {\\n  display: flex;\\n}\\n.vc-chrome-color-wrap {\\n  position: relative;\\n  width: 36px;\\n}\\n.vc-chrome-active-color {\\n  position: relative;\\n  width: 30px;\\n  height: 30px;\\n  border-radius: 15px;\\n  overflow: hidden;\\n  z-index: 1;\\n}\\n.vc-chrome-color-wrap .vc-checkerboard {\\n  width: 30px;\\n  height: 30px;\\n  border-radius: 15px;\\n  background-size: auto;\\n}\\n.vc-chrome-sliders {\\n  flex: 1;\\n}\\n.vc-chrome-fields-wrap {\\n  display: flex;\\n  padding-top: 16px;\\n}\\n.vc-chrome-fields {\\n  display: flex;\\n  margin-left: -6px;\\n  flex: 1;\\n}\\n.vc-chrome-field {\\n  padding-left: 6px;\\n  width: 100%;\\n}\\n.vc-chrome-toggle-btn {\\n  width: 32px;\\n  text-align: right;\\n  position: relative;\\n}\\n.vc-chrome-toggle-icon {\\n  margin-right: -4px;\\n  margin-top: 12px;\\n  cursor: pointer;\\n  position: relative;\\n  z-index: 2;\\n}\\n.vc-chrome-toggle-icon-highlight {\\n  position: absolute;\\n  width: 24px;\\n  height: 28px;\\n  background: #eee;\\n  border-radius: 4px;\\n  top: 10px;\\n  left: 12px;\\n}\\n.vc-chrome-hue-wrap {\\n  position: relative;\\n  height: 10px;\\n  margin-bottom: 8px;\\n}\\n.vc-chrome-alpha-wrap {\\n  position: relative;\\n  height: 10px;\\n}\\n.vc-chrome-hue-wrap .vc-hue {\\n  border-radius: 2px;\\n}\\n.vc-chrome-alpha-wrap .vc-alpha-gradient {\\n  border-radius: 2px;\\n}\\n.vc-chrome-hue-wrap .vc-hue-picker, .vc-chrome-alpha-wrap .vc-alpha-picker {\\n  width: 12px;\\n  height: 12px;\\n  border-radius: 6px;\\n  transform: translate(-6px, -2px);\\n  background-color: rgb(248, 248, 248);\\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\\n}\\n.vc-chrome-body {\\n  padding: 16px 16px 12px;\\n  background-color: #fff;\\n}\\n.vc-chrome-saturation-wrap {\\n  width: 100%;\\n  padding-bottom: 55%;\\n  position: relative;\\n  border-radius: 2px 2px 0 0;\\n  overflow: hidden;\\n}\\n.vc-chrome-saturation-wrap .vc-saturation-circle {\\n  width: 12px;\\n  height: 12px;\\n}\\n.vc-chrome-fields .vc-input__input {\\n  font-size: 11px;\\n  color: #333;\\n  width: 100%;\\n  border-radius: 2px;\\n  border: none;\\n  box-shadow: inset 0 0 0 1px #dadada;\\n  height: 21px;\\n  text-align: center;\\n}\\n.vc-chrome-fields .vc-input__label {\\n  text-transform: uppercase;\\n  font-size: 11px;\\n  line-height: 11px;\\n  color: #969696;\\n  text-align: center;\\n  display: block;\\n  margin-top: 12px;\\n}\\n.vc-chrome__disable-alpha .vc-chrome-active-color {\\n  width: 18px;\\n  height: 18px;\\n}\\n.vc-chrome__disable-alpha .vc-chrome-color-wrap {\\n  width: 30px;\\n}\\n.vc-chrome__disable-alpha .vc-chrome-hue-wrap {\\n  margin-top: 4px;\\n  margin-bottom: 4px;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{class:[\"vc-chrome\",e.disableAlpha?\"vc-chrome__disable-alpha\":\"\"],attrs:{role:\"application\",\"aria-label\":\"Chrome color picker\"}},[n(\"div\",{staticClass:\"vc-chrome-saturation-wrap\"},[n(\"saturation\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-body\"},[n(\"div\",{staticClass:\"vc-chrome-controls\"},[n(\"div\",{staticClass:\"vc-chrome-color-wrap\"},[n(\"div\",{staticClass:\"vc-chrome-active-color\",style:{background:e.activeColor},attrs:{\"aria-label\":\"current color is \"+e.colors.hex}}),e._v(\" \"),e.disableAlpha?e._e():n(\"checkboard\")],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-sliders\"},[n(\"div\",{staticClass:\"vc-chrome-hue-wrap\"},[n(\"hue\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1),e._v(\" \"),e.disableAlpha?e._e():n(\"div\",{staticClass:\"vc-chrome-alpha-wrap\"},[n(\"alpha\",{on:{change:e.childChange},model:{value:e.colors,callback:function(t){e.colors=t},expression:\"colors\"}})],1)])]),e._v(\" \"),e.disableFields?e._e():n(\"div\",{staticClass:\"vc-chrome-fields-wrap\"},[n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:0===e.fieldsIndex,expression:\"fieldsIndex === 0\"}],staticClass:\"vc-chrome-fields\"},[n(\"div\",{staticClass:\"vc-chrome-field\"},[e.hasAlpha?e._e():n(\"ed-in\",{attrs:{label:\"hex\",value:e.colors.hex},on:{change:e.inputChange}}),e._v(\" \"),e.hasAlpha?n(\"ed-in\",{attrs:{label:\"hex\",value:e.colors.hex8},on:{change:e.inputChange}}):e._e()],1)]),e._v(\" \"),n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:1===e.fieldsIndex,expression:\"fieldsIndex === 1\"}],staticClass:\"vc-chrome-fields\"},[n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"r\",value:e.colors.rgba.r},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"g\",value:e.colors.rgba.g},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"b\",value:e.colors.rgba.b},on:{change:e.inputChange}})],1),e._v(\" \"),e.disableAlpha?e._e():n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"a\",value:e.colors.a,\"arrow-offset\":.01,max:1},on:{change:e.inputChange}})],1)]),e._v(\" \"),n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:2===e.fieldsIndex,expression:\"fieldsIndex === 2\"}],staticClass:\"vc-chrome-fields\"},[n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"h\",value:e.hsl.h},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"s\",value:e.hsl.s},on:{change:e.inputChange}})],1),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"l\",value:e.hsl.l},on:{change:e.inputChange}})],1),e._v(\" \"),e.disableAlpha?e._e():n(\"div\",{staticClass:\"vc-chrome-field\"},[n(\"ed-in\",{attrs:{label:\"a\",value:e.colors.a,\"arrow-offset\":.01,max:1},on:{change:e.inputChange}})],1)]),e._v(\" \"),n(\"div\",{staticClass:\"vc-chrome-toggle-btn\",attrs:{role:\"button\",\"aria-label\":\"Change another color definition\"},on:{click:e.toggleViews}},[n(\"div\",{staticClass:\"vc-chrome-toggle-icon\"},[n(\"svg\",{staticStyle:{width:\"24px\",height:\"24px\"},attrs:{viewBox:\"0 0 24 24\"},on:{mouseover:e.showHighlight,mouseenter:e.showHighlight,mouseout:e.hideHighlight}},[n(\"path\",{attrs:{fill:\"#333\",d:\"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z\"}})])]),e._v(\" \"),n(\"div\",{directives:[{name:\"show\",rawName:\"v-show\",value:e.highlight,expression:\"highlight\"}],staticClass:\"vc-chrome-toggle-icon-highlight\"})])])])])},a=[];r._withStripped=!0;var i={render:r,staticRenderFns:a};t.a=i}])});","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports[\"vue-js-modal\"]=t():e[\"vue-js-modal\"]=t()}(window,function(){return function(n){var i={};function o(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}return o.m=n,o.c=i,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,\"a\",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p=\"/dist/\",o(o.s=11)}([function(e,t,n){var i=n(6);\"string\"==typeof i&&(i=[[e.i,i,\"\"]]),i.locals&&(e.exports=i.locals);(0,n(4).default)(\"27d83796\",i,!1,{})},function(e,t,n){var i=n(8);\"string\"==typeof i&&(i=[[e.i,i,\"\"]]),i.locals&&(e.exports=i.locals);(0,n(4).default)(\"0e783494\",i,!1,{})},function(e,t,n){var i=n(10);\"string\"==typeof i&&(i=[[e.i,i,\"\"]]),i.locals&&(e.exports=i.locals);(0,n(4).default)(\"17757f60\",i,!1,{})},function(e,t){e.exports=function(n){var a=[];return a.toString=function(){return this.map(function(e){var t=function(e,t){var n=e[1]||\"\",i=e[3];if(!i)return n;if(t&&\"function\"==typeof btoa){var o=(a=i,\"\"),r=i.sources.map(function(e){return\"/*# sourceURL=\"+i.sourceRoot+e+\" */\"});return[n].concat(r).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(e,n);return e[2]?\"@media \"+e[2]+\"{\"+t+\"}\":t}).join(\"\")},a.i=function(e,t){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var n={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(n[o]=!0)}for(i=0;i<e.length;i++){var r=e[i];\"number\"==typeof r[0]&&n[r[0]]||(t&&!r[2]?r[2]=t:t&&(r[2]=\"(\"+r[2]+\") and (\"+t+\")\"),a.push(r))}},a}},function(e,t,n){\"use strict\";function l(e,t){for(var n=[],i={},o=0;o<t.length;o++){var r=t[o],a=r[0],s={id:e+\":\"+o,css:r[1],media:r[2],sourceMap:r[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}n.r(t),n.d(t,\"default\",function(){return p});var i=\"undefined\"!=typeof document;if(\"undefined\"!=typeof DEBUG&&DEBUG&&!i)throw new Error(\"vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\");var d={},o=i&&(document.head||document.getElementsByTagName(\"head\")[0]),r=null,a=0,u=!1,s=function(){},c=null,h=\"data-vue-ssr-id\",f=\"undefined\"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function p(a,e,t,n){u=t,c=n||{};var s=l(a,e);return v(s),function(e){for(var t=[],n=0;n<s.length;n++){var i=s[n];(o=d[i.id]).refs--,t.push(o)}e?v(s=l(a,e)):s=[];for(n=0;n<t.length;n++){var o;if(0===(o=t[n]).refs){for(var r=0;r<o.parts.length;r++)o.parts[r]();delete d[o.id]}}}}function v(e){for(var t=0;t<e.length;t++){var n=e[t],i=d[n.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](n.parts[o]);for(;o<n.parts.length;o++)i.parts.push(g(n.parts[o]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{var r=[];for(o=0;o<n.parts.length;o++)r.push(g(n.parts[o]));d[n.id]={id:n.id,refs:1,parts:r}}}}function m(){var e=document.createElement(\"style\");return e.type=\"text/css\",o.appendChild(e),e}function g(t){var n,i,e=document.querySelector(\"style[\"+h+'~=\"'+t.id+'\"]');if(e){if(u)return s;e.parentNode.removeChild(e)}if(f){var o=a++;e=r||(r=m()),n=w.bind(null,e,o,!1),i=w.bind(null,e,o,!0)}else e=m(),n=function(e,t){var n=t.css,i=t.media,o=t.sourceMap;i&&e.setAttribute(\"media\",i);c.ssrId&&e.setAttribute(h,t.id);o&&(n+=\"\\n/*# sourceURL=\"+o.sources[0]+\" */\",n+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,e),i=function(){e.parentNode.removeChild(e)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join(\"\\n\")});function w(e,t,n,i){var o=n?\"\":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}},function(e,t,n){\"use strict\";var i=n(0);n.n(i).a},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\"\\n.vue-modal-resizer {\\n  display: block;\\n  overflow: hidden;\\n  position: absolute;\\n  width: 12px;\\n  height: 12px;\\n  right: 0;\\n  bottom: 0;\\n  z-index: 9999999;\\n  background: transparent;\\n  cursor: se-resize;\\n}\\n.vue-modal-resizer::after {\\n  display: block;\\n  position: absolute;\\n  content: '';\\n  background: transparent;\\n  left: 0;\\n  top: 0;\\n  width: 0;\\n  height: 0;\\n  border-bottom: 10px solid #ddd;\\n  border-left: 10px solid transparent;\\n}\\n.vue-modal-resizer.clicked::after {\\n  border-bottom: 10px solid #369be9;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var i=n(1);n.n(i).a},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\"\\n.v--modal-block-scroll {\\n  overflow: hidden;\\n  width: 100vw;\\n}\\n.v--modal-overlay {\\n  position: fixed;\\n  box-sizing: border-box;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100vh;\\n  background: rgba(0, 0, 0, 0.2);\\n  z-index: 999;\\n  opacity: 1;\\n}\\n.v--modal-overlay.scrollable {\\n  height: 100%;\\n  min-height: 100vh;\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch;\\n}\\n.v--modal-overlay .v--modal-background-click {\\n  width: 100%;\\n  height: 100%;\\n}\\n.v--modal-overlay .v--modal-box {\\n  position: relative;\\n  overflow: hidden;\\n  box-sizing: border-box;\\n}\\n.v--modal-overlay.scrollable .v--modal-box {\\n  margin-bottom: 2px;\\n}\\n.v--modal {\\n  background-color: white;\\n  text-align: left;\\n  border-radius: 3px;\\n  box-shadow: 0 20px 60px -2px rgba(27, 33, 58, 0.4);\\n  padding: 0;\\n}\\n.v--modal.v--modal-fullscreen {\\n  width: 100vw;\\n  height: 100vh;\\n  margin: 0;\\n  left: 0;\\n  top: 0;\\n}\\n.v--modal-top-right {\\n  display: block;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n.overlay-fade-enter-active,\\n.overlay-fade-leave-active {\\n  transition: all 0.2s;\\n}\\n.overlay-fade-enter,\\n.overlay-fade-leave-active {\\n  opacity: 0;\\n}\\n.nice-modal-fade-enter-active,\\n.nice-modal-fade-leave-active {\\n  transition: all 0.4s;\\n}\\n.nice-modal-fade-enter,\\n.nice-modal-fade-leave-active {\\n  opacity: 0;\\n  transform: translateY(-20px);\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";var i=n(2);n.n(i).a},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\"\\n.vue-dialog div {\\n  box-sizing: border-box;\\n}\\n.vue-dialog .dialog-flex {\\n  width: 100%;\\n  height: 100%;\\n}\\n.vue-dialog .dialog-content {\\n  flex: 1 0 auto;\\n  width: 100%;\\n  padding: 15px;\\n  font-size: 14px;\\n}\\n.vue-dialog .dialog-c-title {\\n  font-weight: 600;\\n  padding-bottom: 15px;\\n}\\n.vue-dialog .dialog-c-text {\\n}\\n.vue-dialog .vue-dialog-buttons {\\n  display: flex;\\n  flex: 0 1 auto;\\n  width: 100%;\\n  border-top: 1px solid #eee;\\n}\\n.vue-dialog .vue-dialog-buttons-none {\\n  width: 100%;\\n  padding-bottom: 15px;\\n}\\n.vue-dialog-button {\\n  font-size: 12px !important;\\n  background: transparent;\\n  padding: 0;\\n  margin: 0;\\n  border: 0;\\n  cursor: pointer;\\n  box-sizing: border-box;\\n  line-height: 40px;\\n  height: 40px;\\n  color: inherit;\\n  font: inherit;\\n  outline: none;\\n}\\n.vue-dialog-button:hover {\\n  background: rgba(0, 0, 0, 0.01);\\n}\\n.vue-dialog-button:active {\\n  background: rgba(0, 0, 0, 0.025);\\n}\\n.vue-dialog-button:not(:first-of-type) {\\n  border-left: 1px solid #eee;\\n}\\n\",\"\"])},function(e,t,n){\"use strict\";n.r(t);var i=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"transition\",{attrs:{name:t.overlayTransition}},[t.visibility.overlay?n(\"div\",{ref:\"overlay\",class:t.overlayClass,attrs:{\"aria-expanded\":t.visibility.overlay.toString(),\"data-modal\":t.name}},[n(\"div\",{staticClass:\"v--modal-background-click\",on:{mousedown:function(e){return e.target!==e.currentTarget?null:t.handleBackgroundClick(e)},touchstart:function(e){return e.target!==e.currentTarget?null:t.handleBackgroundClick(e)}}},[n(\"div\",{staticClass:\"v--modal-top-right\"},[t._t(\"top-right\")],2),t._v(\" \"),n(\"transition\",{attrs:{name:t.transition},on:{\"before-enter\":t.beforeTransitionEnter,\"after-enter\":t.afterTransitionEnter,\"after-leave\":t.afterTransitionLeave}},[t.visibility.modal?n(\"div\",{ref:\"modal\",class:t.modalClass,style:t.modalStyle},[t._t(\"default\"),t._v(\" \"),t.resizable&&!t.isAutoHeight?n(\"resizer\",{attrs:{\"min-width\":t.minWidth,\"min-height\":t.minHeight},on:{resize:t.handleModalResize}}):t._e()],2):t._e()])],1)]):t._e()])},o=function(){var e=this.$createElement;return(this._self._c||e)(\"div\",{class:this.className})};o._withStripped=i._withStripped=!0;var s=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0;return function(){return(e++).toString()}}(),u=function(e,t,n){return n<e?e:t<n?t:n},r=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return function(o){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},t=Object.keys(r);\"function\"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.forEach(function(e){var t,n,i;t=o,i=r[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i})}return o}({id:s(),timestamp:Date.now(),canceled:!1},e)},a={name:\"VueJsModalResizer\",props:{minHeight:{type:Number,default:0},minWidth:{type:Number,default:0}},data:function(){return{clicked:!1,size:{}}},mounted:function(){this.$el.addEventListener(\"mousedown\",this.start,!1)},computed:{className:function(){return{\"vue-modal-resizer\":!0,clicked:this.clicked}}},methods:{start:function(e){this.clicked=!0,window.addEventListener(\"mousemove\",this.mousemove,!1),window.addEventListener(\"mouseup\",this.stop,!1),e.stopPropagation(),e.preventDefault()},stop:function(){this.clicked=!1,window.removeEventListener(\"mousemove\",this.mousemove,!1),window.removeEventListener(\"mouseup\",this.stop,!1),this.$emit(\"resize-stop\",{element:this.$el.parentElement,size:this.size})},mousemove:function(e){this.resize(e)},resize:function(e){var t=this.$el.parentElement;if(t){var n=e.clientX-t.offsetLeft,i=e.clientY-t.offsetTop;n=u(this.minWidth,window.innerWidth,n),i=u(this.minHeight,window.innerHeight,i),this.size={width:n,height:i},t.style.width=n+\"px\",t.style.height=i+\"px\",this.$emit(\"resize\",{element:t,size:this.size})}}}};n(5);function l(e,t,n,i,o,r,a,s){var l,d=\"function\"==typeof e?e.options:e;if(t&&(d.render=t,d.staticRenderFns=n,d._compiled=!0),i&&(d.functional=!0),r&&(d._scopeId=\"data-v-\"+r),a?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\"undefined\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=l):o&&(l=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(d.functional){d._injectStyles=l;var u=d.render;d.render=function(e,t){return l.call(t),u(e,t)}}else{var c=d.beforeCreate;d.beforeCreate=c?[].concat(c,l):[l]}return{exports:e,options:d}}var d=l(a,o,[],!1,null,null,null);d.options.__file=\"src/Resizer.vue\";var c=d.exports;function h(e){return(h=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}var f=\"[-+]?[0-9]*.?[0-9]+\",p=[{name:\"px\",regexp:new RegExp(\"^\".concat(f,\"px$\"))},{name:\"%\",regexp:new RegExp(\"^\".concat(f,\"%$\"))},{name:\"px\",regexp:new RegExp(\"^\".concat(f,\"$\"))}],v=function(e){switch(h(e)){case\"number\":return{type:\"px\",value:e};case\"string\":return function(e){if(\"auto\"===e)return{type:e,value:0};for(var t=0;t<p.length;t++){var n=p[t];if(n.regexp.test(e))return{type:n.name,value:parseFloat(e)}}return{type:\"\",value:e}}(e);default:return{type:\"\",value:e}}},m=function(e){if(\"string\"!=typeof e)return 0<=e;var t=v(e);return(\"%\"===t.type||\"px\"===t.type)&&0<t.value};var g={name:\"VueJsModal\",props:{name:{required:!0,type:String},delay:{type:Number,default:0},resizable:{type:Boolean,default:!1},adaptive:{type:Boolean,default:!1},draggable:{type:[Boolean,String],default:!1},scrollable:{type:Boolean,default:!1},reset:{type:Boolean,default:!1},overlayTransition:{type:String,default:\"overlay-fade\"},transition:{type:String},clickToClose:{type:Boolean,default:!0},classes:{type:[String,Array],default:\"v--modal\"},minWidth:{type:Number,default:0,validator:function(e){return 0<=e}},minHeight:{type:Number,default:0,validator:function(e){return 0<=e}},maxWidth:{type:Number,default:1/0},maxHeight:{type:Number,default:1/0},width:{type:[Number,String],default:600,validator:m},height:{type:[Number,String],default:300,validator:function(e){return\"auto\"===e||m(e)}},pivotX:{type:Number,default:.5,validator:function(e){return 0<=e&&e<=1}},pivotY:{type:Number,default:.5,validator:function(e){return 0<=e&&e<=1}}},components:{Resizer:c},data:function(){return{visible:!1,visibility:{modal:!1,overlay:!1},shift:{left:0,top:0},modal:{width:0,widthType:\"px\",height:0,heightType:\"px\",renderedHeight:0},window:{width:0,height:0},mutationObserver:null}},created:function(){this.setInitialSize()},beforeMount:function(){var t=this;if(T.event.$on(\"toggle\",this.handleToggleEvent),window.addEventListener(\"resize\",this.handleWindowResize),this.handleWindowResize(),this.scrollable&&!this.isAutoHeight&&console.warn('Modal \"'.concat(this.name,'\" has scrollable flag set to true ')+'but height is not \"auto\" ('.concat(this.height,\")\")),this.isAutoHeight){var e=function(){if(\"undefined\"!=typeof window)for(var e=[\"\",\"WebKit\",\"Moz\",\"O\",\"Ms\"],t=0;t<e.length;t++){var n=e[t]+\"MutationObserver\";if(n in window)return window[n]}return!1}();e&&(this.mutationObserver=new e(function(e){t.updateRenderedHeight()}))}this.clickToClose&&window.addEventListener(\"keyup\",this.handleEscapeKeyUp)},beforeDestroy:function(){T.event.$off(\"toggle\",this.handleToggleEvent),window.removeEventListener(\"resize\",this.handleWindowResize),this.clickToClose&&window.removeEventListener(\"keyup\",this.handleEscapeKeyUp),this.scrollable&&document.body.classList.remove(\"v--modal-block-scroll\")},computed:{isAutoHeight:function(){return\"auto\"===this.modal.heightType},position:function(){var e=this.window,t=this.shift,n=this.pivotX,i=this.pivotY,o=this.trueModalWidth,r=this.trueModalHeight,a=e.width-o,s=e.height-r,l=t.left+n*a,d=t.top+i*s;return{left:parseInt(u(0,a,l)),top:parseInt(u(0,s,d))}},trueModalWidth:function(){var e=this.window,t=this.modal,n=this.adaptive,i=this.minWidth,o=this.maxWidth,r=\"%\"===t.widthType?e.width/100*t.width:t.width,a=Math.min(e.width,o);return n?u(i,a,r):r},trueModalHeight:function(){var e=this.window,t=this.modal,n=this.isAutoHeight,i=this.adaptive,o=this.maxHeight,r=\"%\"===t.heightType?e.height/100*t.height:t.height;if(n)return this.modal.renderedHeight;var a=Math.min(e.height,o);return i?u(this.minHeight,a,r):r},overlayClass:function(){return{\"v--modal-overlay\":!0,scrollable:this.scrollable&&this.isAutoHeight}},modalClass:function(){return[\"v--modal-box\",this.classes]},modalStyle:function(){return{top:this.position.top+\"px\",left:this.position.left+\"px\",width:this.trueModalWidth+\"px\",height:this.isAutoHeight?\"auto\":this.trueModalHeight+\"px\"}}},watch:{visible:function(e){var t=this;e?(this.visibility.overlay=!0,setTimeout(function(){t.visibility.modal=!0,t.$nextTick(function(){t.addDraggableListeners(),t.callAfterEvent(!0)})},this.delay)):(this.visibility.modal=!1,setTimeout(function(){t.visibility.overlay=!1,t.$nextTick(function(){t.removeDraggableListeners(),t.callAfterEvent(!1)})},this.delay))}},methods:{handleToggleEvent:function(e,t,n){if(this.name===e){var i=void 0===t?!this.visible:t;this.toggle(i,n)}},setInitialSize:function(){var e=this.modal,t=v(this.width),n=v(this.height);e.width=t.value,e.widthType=t.type,e.height=n.value,e.heightType=n.type},handleEscapeKeyUp:function(e){27===e.which&&this.visible&&this.$modal.hide(this.name)},handleWindowResize:function(){this.window.width=window.innerWidth,this.window.height=window.innerHeight},createModalEvent:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return r(function(o){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},t=Object.keys(r);\"function\"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.forEach(function(e){var t,n,i;t=o,i=r[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i})}return o}({name:this.name,ref:this.$refs.modal},e))},handleModalResize:function(e){this.modal.widthType=\"px\",this.modal.width=e.size.width,this.modal.heightType=\"px\",this.modal.height=e.size.height;var t=this.modal.size;this.$emit(\"resize\",this.createModalEvent({size:t}))},toggle:function(e,t){var n=this.reset,i=this.scrollable,o=this.visible;if(o!==e){var r=o?\"before-close\":\"before-open\";\"before-open\"===r?(document.activeElement&&\"BODY\"!==document.activeElement.tagName&&document.activeElement.blur&&document.activeElement.blur(),n&&(this.setInitialSize(),this.shift.left=0,this.shift.top=0),i&&document.body.classList.add(\"v--modal-block-scroll\")):i&&document.body.classList.remove(\"v--modal-block-scroll\");var a=!1,s=this.createModalEvent({stop:function(){a=!0},state:e,params:t});this.$emit(r,s),a||(this.visible=e)}},getDraggableElement:function(){var e=\"string\"!=typeof this.draggable?\".v--modal-box\":this.draggable;return e?this.$refs.overlay.querySelector(e):null},handleBackgroundClick:function(){this.clickToClose&&this.toggle(!1)},callAfterEvent:function(e){e?this.connectObserver():this.disconnectObserver();var t=e?\"opened\":\"closed\",n=this.createModalEvent({state:e});this.$emit(t,n)},addDraggableListeners:function(){var r=this;if(this.draggable){var e=this.getDraggableElement();if(e){var a=0,s=0,l=0,d=0,u=function(e){return e.touches&&0<e.touches.length?e.touches[0]:e},t=function(e){var t=e.target;if(!t||\"INPUT\"!==t.nodeName){var n=u(e),i=n.clientX,o=n.clientY;document.addEventListener(\"mousemove\",c),document.addEventListener(\"touchmove\",c),document.addEventListener(\"mouseup\",h),document.addEventListener(\"touchend\",h),a=i,s=o,l=r.shift.left,d=r.shift.top}},c=function(e){var t=u(e),n=t.clientX,i=t.clientY;r.shift.left=l+n-a,r.shift.top=d+i-s,e.preventDefault()},h=function e(t){document.removeEventListener(\"mousemove\",c),document.removeEventListener(\"touchmove\",c),document.removeEventListener(\"mouseup\",e),document.removeEventListener(\"touchend\",e),t.preventDefault()};e.addEventListener(\"mousedown\",t),e.addEventListener(\"touchstart\",t)}}},removeDraggableListeners:function(){},updateRenderedHeight:function(){this.$refs.modal&&(this.modal.renderedHeight=this.$refs.modal.getBoundingClientRect().height)},connectObserver:function(){this.mutationObserver&&this.mutationObserver.observe(this.$refs.overlay,{childList:!0,attributes:!0,subtree:!0})},disconnectObserver:function(){this.mutationObserver&&this.mutationObserver.disconnect()},beforeTransitionEnter:function(){this.connectObserver()},afterTransitionEnter:function(){},afterTransitionLeave:function(){}}},b=(n(7),l(g,i,[],!1,null,null,null));b.options.__file=\"src/Modal.vue\";var y=b.exports,w=function(){var n=this,e=n.$createElement,i=n._self._c||e;return i(\"modal\",{attrs:{name:\"dialog\",height:\"auto\",classes:[\"v--modal\",\"vue-dialog\",this.params.class],width:n.width,\"pivot-y\":.3,adaptive:!0,clickToClose:n.clickToClose,transition:n.transition},on:{\"before-open\":n.beforeOpened,\"before-close\":n.beforeClosed,opened:function(e){n.$emit(\"opened\",e)},closed:function(e){n.$emit(\"closed\",e)}}},[i(\"div\",{staticClass:\"dialog-content\"},[n.params.title?i(\"div\",{staticClass:\"dialog-c-title\",domProps:{innerHTML:n._s(n.params.title||\"\")}}):n._e(),n._v(\" \"),n.params.component?i(n.params.component,n._b({tag:\"component\"},\"component\",n.params.props,!1)):i(\"div\",{staticClass:\"dialog-c-text\",domProps:{innerHTML:n._s(n.params.text||\"\")}})],1),n._v(\" \"),n.buttons?i(\"div\",{staticClass:\"vue-dialog-buttons\"},n._l(n.buttons,function(e,t){return i(\"button\",{key:t,class:e.class||\"vue-dialog-button\",style:n.buttonStyle,attrs:{type:\"button\"},domProps:{innerHTML:n._s(e.title)},on:{click:function(e){e.stopPropagation(),n.click(t,e)}}},[n._v(\"\\n      \"+n._s(e.title)+\"\\n    \")])})):i(\"div\",{staticClass:\"vue-dialog-buttons-none\"})])};w._withStripped=!0;var x={name:\"VueJsDialog\",props:{width:{type:[Number,String],default:400},clickToClose:{type:Boolean,default:!0},transition:{type:String,default:\"fade\"}},data:function(){return{params:{},defaultButtons:[{title:\"CLOSE\"}]}},computed:{buttons:function(){return this.params.buttons||this.defaultButtons},buttonStyle:function(){return{flex:\"1 1 \".concat(100/this.buttons.length,\"%\")}}},methods:{beforeOpened:function(e){window.addEventListener(\"keyup\",this.onKeyUp),this.params=e.params||{},this.$emit(\"before-opened\",e)},beforeClosed:function(e){window.removeEventListener(\"keyup\",this.onKeyUp),this.params={},this.$emit(\"before-closed\",e)},click:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:\"click\",i=this.buttons[e];i&&\"function\"==typeof i.handler?i.handler(e,t,{source:n}):this.$modal.hide(\"dialog\")},onKeyUp:function(e){if(13===e.which&&0<this.buttons.length){var t=1===this.buttons.length?0:this.buttons.findIndex(function(e){return e.default});-1!==t&&this.click(t,e,\"keypress\")}}}},_=(n(9),l(x,w,[],!1,null,null,null));_.options.__file=\"src/Dialog.vue\";var E=_.exports,k=function(){var n=this,e=n.$createElement,i=n._self._c||e;return i(\"div\",{attrs:{id:\"modals-container\"}},n._l(n.modals,function(t){return i(\"modal\",n._g(n._b({key:t.id,on:{closed:function(e){n.remove(t.id)}}},\"modal\",t.modalAttrs,!1),t.modalListeners),[i(t.component,n._g(n._b({tag:\"component\",on:{close:function(e){n.$modal.hide(t.modalAttrs.name)}}},\"component\",t.componentAttrs,!1),n.$listeners))],1)}))};k._withStripped=!0;var S=l({data:function(){return{modals:[]}},created:function(){this.$root._dynamicContainer=this},methods:{add:function(e){var t=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},o=3<arguments.length?arguments[3]:void 0,r=s(),a=i.name||\"_dynamic_modal_\"+r;this.modals.push({id:r,modalAttrs:function(o){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},t=Object.keys(r);\"function\"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.forEach(function(e){var t,n,i;t=o,i=r[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i})}return o}({},i,{name:a}),modalListeners:o,component:e,componentAttrs:n}),this.$nextTick(function(){t.$modal.show(a)})},remove:function(e){for(var t in this.modals)if(this.modals[t].id===e)return void this.modals.splice(t,1)}}},k,[],!1,null,null,null);S.options.__file=\"src/ModalsContainer.vue\";var C=S.exports,O={install:function(a){var s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};this.installed||(this.installed=!0,this.event=new a,this.rootInstance=null,this.componentName=s.componentName||\"Modal\",a.prototype.$modal={show:function(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};if(\"string\"!=typeof e){var o=n&&n.root?n.root:O.rootInstance,r=function(e,t,n){if(!n._dynamicContainer&&t.injectModalsContainer){var i=document.createElement(\"div\");document.body.appendChild(i),new e({parent:n,render:function(e){return e(C)}}).$mount(i)}return n._dynamicContainer}(a,s,o);r?r.add(e,t,n,i):console.warn(\"[vue-js-modal] In order to render dynamic modals, a <modals-container> component must be present on the page\")}else O.event.$emit(\"toggle\",e,!0,t)},hide:function(e,t){O.event.$emit(\"toggle\",e,!1,t)},toggle:function(e,t){O.event.$emit(\"toggle\",e,void 0,t)}},a.component(this.componentName,y),s.dialog&&a.component(\"VDialog\",E),s.dynamic&&(a.component(\"ModalsContainer\",C),a.mixin({beforeMount:function(){null===O.rootInstance&&(O.rootInstance=this.$root)}})))}};var T=t.default=O}])});","import fileTypeSrc from \"./FileTypeSrc\";\nimport colorTheme from \"./Theme\";\nimport { Chrome } from \"vue-color\";\nimport VModal from \"vue-js-modal\";\n\nVue.use(VModal, { dynamic: true, injectModalsContainer: true });\n\nfunction updateCss(targetClass, prop, val) {\n  [].slice.call(document.styleSheets[0].cssRules).some(cssRule => {\n    if (cssRule.selectorText === targetClass) {\n      cssRule.style[prop] = val;\n      return true;\n    }\n    return false;\n  });\n}\n\nconst app = new Vue({\n  components: {\n    \"color-picker\": Chrome\n  },\n  el: \"#app\",\n  data: {\n    langs: Object.keys(fileTypeSrc),\n    themes: Object.keys(colorTheme),\n    selectedLang: \"javascript\",\n    selectedTheme: \"default\",\n    colorSetting: {},\n    visibleColorPicker: 1\n  },\n  methods: {\n    showModal: function() {\n      this.$modal.show(\n        {\n          template: `\n<div style=\"margin:30px;\">\n  <p>こちらをデザインCSSに設定してください。</p>\n  <blockquote>\n    <textarea id=\"cssForHighlight\" class=\"hlhb-css-textarea\" spellcheck=\"false\" readonly>{{ cssForHighlight }}</textarea>\n  </blockquote>\n  <div class=\"modal-footer\">\n    <a @click=\"copyCSS\" href=\"#!\" class=\"waves-effect waves-green btn-flat\">コピーする</a>\n  </div>\n</div>`,\n          props: [\"cssForHighlight\", \"copyCSS\"]\n        },\n        {\n          cssForHighlight: this.cssForHighlight,\n          copyCSS: this.copyCSS\n        },\n        {\n          height: \"auto\"\n        }\n      );\n    },\n    copyCSS: function() {\n      document.getElementById(\"cssForHighlight\").select();\n      document.execCommand(\"copy\");\n      this.copied = true;\n    }\n  },\n  computed: {\n    srcHtml: function() {\n      return fileTypeSrc[this.selectedLang];\n    },\n    colorSettings: function() {\n      return [\n        {\n          name: \".entry-content pre.code\",\n          hex: this.colorSetting.preCodeBgcolor.hex,\n          prop: \"backgroundColor\"\n        },\n        {\n          name: \".entry-content pre.code\",\n          hex: this.colorSetting.preCodeColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synComment\",\n          hex: this.colorSetting.synCommentColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synConstant\",\n          hex: this.colorSetting.synConstantColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synIdentifier\",\n          hex: this.colorSetting.synIdentifierColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synPreProc\",\n          hex: this.colorSetting.synPreProcColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synSpecial\",\n          hex: this.colorSetting.synSpecialColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synStatement\",\n          hex: this.colorSetting.synStatementColor.hex,\n          prop: \"color\"\n        },\n        {\n          name: \".synType\",\n          hex: this.colorSetting.synTypeColor.hex,\n          prop: \"color\"\n        }\n      ];\n    },\n    cssForHighlight: function() {\n      return `.entry-content pre.code {\n    background-color: ${this.colorSetting.preCodeBgcolor.hex};\n    color: ${this.colorSetting.preCodeColor.hex};\n}\n.synComment { color: ${this.colorSetting.synCommentColor.hex}; }\n.synConstant { color: ${this.colorSetting.synConstantColor.hex}; }\n.synIdentifier { color: ${this.colorSetting.synIdentifierColor.hex}; }\n.synPreProc { color: ${this.colorSetting.synPreProcColor.hex}; }\n.synSpecial { color: ${this.colorSetting.synSpecialColor.hex}; }\n.synStatement { color: ${this.colorSetting.synStatementColor.hex}; }\n.synType { color: ${this.colorSetting.synTypeColor.hex}; }`;\n    }\n  },\n  watch: {\n    selectedTheme: {\n      handler: function(val, oldVal) {\n        const newSetting = colorTheme[val];\n        if (!newSetting) {\n          newSetting = colorTheme[\"default\"];\n        }\n        this.colorSetting = Object.assign({}, newSetting);\n      },\n      immediate: true\n    },\n    \"colorSetting.preCodeBgcolor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".entry-content\", \"backgroundColor\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.preCodeColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\"pre.code\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synCommentColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synComment\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synConstantColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synConstant\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synIdentifierColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synIdentifier\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synPreProcColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synPreProc\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synSpecialColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synSpecial\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synStatementColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synStatement\", \"color\", val);\n      },\n      immediate: true\n    },\n    \"colorSetting.synTypeColor.hex\": {\n      handler: function(val, oldVal) {\n        updateCss(\".synType\", \"color\", val);\n      },\n      immediate: true\n    }\n  }\n});\n"]}