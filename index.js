const langSrc = {
  actionscript:
    '<span class="synIdentifier">package</span> org.example.dummy {<br>    <span class="synIdentifier">import</span> org.dummy.*;<br><br>    <span class="synComment">/*define package inline interface*/</span><br>    <span class="synIdentifier">public</span> <span class="synIdentifier">interface</span> IFooBarzable {<br>        <span class="synIdentifier">public</span> <span class="synIdentifier">function</span> foo(... pairs):<span class="synStatement">Array</span>;<br>    }<br><br>    <span class="synIdentifier">public</span> <span class="synIdentifier">class</span> FooBar <span class="synIdentifier">implements</span> IFooBarzable {<br>        <span class="synIdentifier">static</span> <span class="synIdentifier">private</span> <span class="synStatement">var</span> cnt:<span class="synConstant">uint</span> = <span class="synConstant">0</span>;<br>        <span class="synIdentifier">private</span> <span class="synStatement">var</span> bar:<span class="synStatement">String</span>;<br><br>        <span class="synComment">//constructor</span><br>        <span class="synIdentifier">public</span> <span class="synIdentifier">function</span> TestBar(bar:<span class="synStatement">String</span>):<span class="synConstant">void</span> {<br>            bar = bar;<br>            ++cnt;<br>        }<br><br>        <span class="synIdentifier">public</span> <span class="synIdentifier">function</span> foo(... pairs):<span class="synStatement">Array</span> {<br>            pairs.<span class="synType">push</span>(bar);<br>            <span class="synStatement">return</span> pairs;<br>        }<br>    }<br>}<br>',
  ada:
    '<span class="synStatement">package</span> <span class="synStatement">body</span> Sqlite<span class="synSpecial">.</span>Simple <span class="synStatement">is</span><br><br>      Foo <span class="synSpecial">:</span> int <span class="synSpecial">:=</span> int<span class="synSpecial">\'Size;</span><br>      Bar <span class="synSpecial">:</span> int <span class="synSpecial">:=</span> long<span class="synSpecial">\'Size;</span><br><br>      Error_Message_C <span class="synSpecial">:</span> chars_ptr <span class="synSpecial">:=</span> Sqlite_Errstr <span class="synSpecial">(</span>Error<span class="synSpecial">);</span><br>      Error_Message <span class="synSpecial">:</span> String <span class="synSpecial">:=</span> Null_Ignore_Value <span class="synSpecial">(</span>Error_Message_C<span class="synSpecial">);</span><br>   <span class="synStatement">begin</span><br><br>      Named <span class="synSpecial">:</span> <span class="synStatement">for</span> Index <span class="synStatement">in</span> Foo<span class="synSpecial">..</span>Bar <span class="synStatement">loop</span><br>          Put <span class="synSpecial">(</span><span class="synConstant">"Hi[]{}"</span><span class="synSpecial">);</span><br>      <span class="synStatement">end loop</span> Named<span class="synSpecial">;</span><br><br>      Foo <span class="synSpecial">:=</span> Bar<span class="synSpecial">;</span><br>   <span class="synStatement">end</span> Message<span class="synSpecial">;</span><br><br><span class="synStatement">end</span> Sqlite<span class="synSpecial">.</span>Simple<span class="synSpecial">;</span><br>',
  apache:
    '<span class="synComment"># rewrite`s rules for wordpress pretty url</span><br><span class="synIdentifier">LoadModule</span> rewrite_module  modules/mod_rewrite.so<br><span class="synIdentifier">RewriteCond</span> %{REQUEST_FILENAME} !-f<br><span class="synIdentifier">RewriteCond</span> %{REQUEST_FILENAME} !-d<br><span class="synIdentifier">RewriteRule</span> . index.php [NC,L]<br><br><span class="synIdentifier">ExpiresActive</span> <span class="synConstant">On</span><br><span class="synIdentifier">ExpiresByType</span> application/x-javascript  <span class="synConstant">"access plus 1 days"</span><br><br><span class="synSpecial">Order </span><span class="synConstant">Deny</span><span class="synSpecial">,</span><span class="synConstant">Allow</span><br><span class="synPreProc">Allow from </span><span class="synIdentifier">All</span><br><br><span class="synStatement">&lt;Location</span><span class="synConstant"> /maps/</span><span class="synStatement">&gt;</span><br>  <span class="synIdentifier">RewriteMap</span> <span class="synConstant">map</span> txt:<span class="synConstant">map</span>.txt<br>  <span class="synIdentifier">RewriteMap</span> lower int:tolower<br>  <span class="synIdentifier">RewriteCond</span> %{REQUEST_URI} ^/([^/.]+)\\.html$ [NC]<br>  <span class="synIdentifier">RewriteCond</span> ${<span class="synConstant">map</span>:${lower:%1}|NOT_FOUND} !NOT_FOUND<br>  <span class="synIdentifier">RewriteRule</span> .? /index.php?q=${<span class="synConstant">map</span>:${lower:%1}} [NC,L]<br><span class="synStatement">&lt;/Location&gt;</span><br>',
  applescript:
    '<span class="synStatement">repeat</span> <span class="synConstant">5</span> <span class="synStatement">times</span><br>    <span class="synStatement">if</span> foo <span class="synStatement">is greater than</span> bar <span class="synStatement">then</span><br>        display dialog <span class="synConstant">"Hello there"</span><br>    <span class="synStatement">else</span><br>        beep<br>    <span class="synStatement">end</span> <span class="synStatement">if</span><br><span class="synStatement">end</span> <span class="synStatement">repeat</span><br><br><span class="synComment">(* comment (*nested comment*)</span> <span class="synStatement">*</span>)<br><span class="synStatement">on</span> do_something(s, y)<br>    <span class="synStatement">return</span> {s <span class="synStatement">+</span> <span class="synConstant">pi</span>, y <span class="synStatement">mod</span> <span class="synConstant">4</span>}<br><span class="synStatement">end</span> do_something<br><br>do shell <span class="synStatement">script</span> <span class="synConstant">"/bin/echo \'hello\'"</span><br>',
  autohotkey:
    '<span class="synComment">; hotkeys and hotstrings</span><br><span class="synPreProc">#</span>a::<span class="synStatement">WinSet</span>, AlwaysOnTop, Toggle, A<br><span class="synPreProc">#</span>Space::<br>  <span class="synStatement">MsgBox</span>, Percent sign (<span class="synSpecial">`%</span>) need to be escaped.<br>  <span class="synStatement">Run</span> <span class="synConstant">"C:\\Program Files\\some\\program.exe"</span><br>  <span class="synStatement">Gosub</span>, label1<br><span class="synStatement">return</span><br><span class="synSpecial">::</span><span class="synType">btw</span><span class="synSpecial">::</span>by the way<br><span class="synComment">; volume</span><br><span class="synPreProc">#</span>Numpad8::<span class="synStatement">Send</span> {Volume_Up}<br><span class="synPreProc">#</span>Numpad5::<span class="synStatement">Send</span> {Volume_Mute}<br><span class="synPreProc">#</span>Numpad2::<span class="synStatement">Send</span> {Volume_Down}<br><br>label1:<br>  <span class="synStatement">if</span> (<span class="synPreProc">Clipboard</span> = <span class="synConstant">""</span>)<br>  {<br>    <span class="synStatement">MsgBox</span>, , <span class="synPreProc">Clipboard</span>, Empty!<br>  }<br>  <span class="synStatement">else</span><br>  {<br>    <span class="synStatement">StringReplace</span>, temp, <span class="synPreProc">Clipboard</span>, old, new, All<br>    <span class="synStatement">MsgBox</span>, , <span class="synPreProc">Clipboard</span>, <span class="synIdentifier">%temp%</span><br>  }<br><span class="synStatement">return</span><br>',
  autoit:
    '<span class="synPreProc">#NoTrayIcon</span><br>#AutoIt3Wrapper_Run_Tidy<span class="synStatement">=</span>Y<br><span class="synPreProc">#include </span><span class="synConstant">&lt;Misc.au3&gt;</span><br><br><span class="synStatement">_Singleton</span><span class="synComment">(</span><span class="synType">@ScriptName</span><span class="synComment">)</span> <span class="synComment">; Allow only one instance</span><br>example<span class="synComment">(</span><span class="synConstant">0</span><span class="synComment">,</span> <span class="synConstant">10</span><span class="synComment">)</span><br><br><span class="synStatement">Func</span> example<span class="synComment">(</span><span class="synStatement">$</span><span class="synIdentifier">min</span><span class="synComment">,</span> <span class="synStatement">$</span><span class="synIdentifier">max</span><span class="synComment">)</span><br>    <span class="synStatement">For</span> <span class="synStatement">$</span><span class="synIdentifier">i</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">min</span> <span class="synStatement">To</span> <span class="synStatement">$</span><span class="synIdentifier">max</span><br>        <span class="synStatement">If</span> <span class="synStatement">Mod</span><span class="synComment">(</span><span class="synStatement">$</span><span class="synIdentifier">i</span><span class="synComment">,</span> <span class="synConstant">2</span><span class="synComment">)</span> <span class="synStatement">==</span> <span class="synConstant">0</span> <span class="synStatement">Then</span><br>            <span class="synStatement">MsgBox</span><span class="synComment">(</span><span class="synConstant">64</span><span class="synComment">,</span> <span class="synConstant">"Message"</span><span class="synComment">,</span> <span class="synStatement">$</span><span class="synIdentifier">i</span> <span class="synStatement">&amp;</span> <span class="synConstant">\' is even number!\'</span><span class="synComment">)</span><br>        <span class="synStatement">Else</span><br>            <span class="synStatement">MsgBox</span><span class="synComment">(</span><span class="synConstant">64</span><span class="synComment">,</span> <span class="synConstant">"Message"</span><span class="synComment">,</span> <span class="synStatement">$</span><span class="synIdentifier">i</span> <span class="synStatement">&amp;</span> <span class="synConstant">\' is odd number!\'</span><span class="synComment">)</span><br>        <span class="synStatement">EndIf</span><br>    <span class="synStatement">Next</span><br><span class="synStatement">EndFunc</span>   <span class="synComment">;==&gt;example</span><br>',
  awk:
    '<span class="synSpecial">BEGIN</span> {<br>  POPService  = <span class="synConstant">"/inet/tcp/0/emailhost/pop3"</span><br>  <span class="synSpecial">RS</span> = <span class="synSpecial">ORS</span> = <span class="synConstant">"</span><span class="synSpecial">\\r<br></span><span class="synConstant">"</span><br>  <span class="synStatement">print</span> <span class="synConstant">"user name"</span>            |&amp; POPService<br>  POPService                    |&amp; <span class="synStatement">getline</span><br>  <span class="synStatement">print</span> <span class="synConstant">"pass password"</span>         |&amp; POPService<br>  POPService                    |&amp; <span class="synStatement">getline</span><br>  <span class="synStatement">print</span> <span class="synConstant">"retr 1"</span>                |&amp; POPService<br>  POPService                    |&amp; <span class="synStatement">getline</span><br>  <span class="synStatement">if</span> (<span class="synSpecial">$1</span> != <span class="synConstant">"+OK"</span>) <span class="synStatement">exit</span><br>  <span class="synStatement">print</span> <span class="synConstant">"quit"</span>                  |&amp; POPService<br>  <span class="synSpecial">RS</span> = <span class="synConstant">"</span><span class="synSpecial">\\r<br>\\\\</span><span class="synConstant">.</span><span class="synSpecial">\\r<br></span><span class="synConstant">"</span><br>  POPService |&amp; <span class="synStatement">getline</span><br>  <span class="synStatement">print</span> <span class="synSpecial">$0</span><br>  <span class="synIdentifier">close</span>(POPService)<br>}<br>',
  basic:
    '<span class="synComment">10 </span><span class="synStatement">CLS</span><br><span class="synComment">20 </span><span class="synStatement">FOR</span> I = <span class="synConstant">0</span> TO <span class="synConstant">15</span><br><span class="synComment">22 </span><span class="synStatement">FOR</span> J = <span class="synConstant">0</span> TO <span class="synConstant">7</span><br><span class="synComment">30 </span><span class="synStatement">COLOR</span> I,J<br><span class="synComment">40 </span><span class="synStatement">PRINT</span> <span class="synConstant">" ** "</span>;<br><span class="synComment">45 </span><span class="synStatement">NEXT</span> J<br><span class="synComment">46 </span><span class="synStatement">COLOR</span> I,<span class="synConstant">0</span><br><span class="synComment">47 </span><span class="synStatement">GOSUB</span> <span class="synConstant">100</span><br><span class="synComment">48 </span><span class="synStatement">PRINT</span><br><span class="synComment">50 </span><span class="synStatement">NEXT</span> I<br><span class="synComment">60 </span><span class="synStatement">COLOR</span> <span class="synConstant">15</span>,<span class="synConstant">0</span><br><span class="synComment">99 </span><span class="synStatement">END</span><br><span class="synComment">100 </span><span class="synStatement">FOR</span> T = <span class="synConstant">65</span> TO <span class="synConstant">90</span><br><span class="synComment">101 </span><span class="synStatement">PRINT</span> CHR<span class="synType">$</span>(T);<br><span class="synComment">102 </span><span class="synStatement">NEXT</span> T<br><span class="synComment">103 </span><span class="synStatement">RETURN</span><br><span class="synComment">200 REM Data types test</span><br><span class="synComment">201 </span>TOTAL<span class="synType">#</span> = <span class="synConstant">3.30</span>#        \'Double precision variable<br><span class="synComment">202 </span>BALANCE<span class="synType">!</span> = <span class="synConstant">3</span>!     \'Single precision variable<br><span class="synComment">203 </span>B2<span class="synType">!</span> = 12e5         \'<span class="synConstant">120000</span><br><span class="synComment">204 </span>ITEMS<span class="synType">%</span> = <span class="synConstant">10</span>           \'Integer variable<br><span class="synComment">205 </span>HEXTEST = &amp;H12DB    \'Hex value<br>',
  brainfuck:
    '<span class="synIdentifier">++++++++++</span><br><span class="synStatement">[</span><span class="synComment"> 3*10 and 10*10</span><br><span class="synComment">  </span><span class="synIdentifier">-</span><span class="synType">&gt;</span><span class="synIdentifier">+++</span><span class="synType">&gt;</span><span class="synIdentifier">++++++++++</span><span class="synType">&lt;&lt;</span><br><span class="synStatement">]</span><span class="synType">&gt;&gt;</span><br><span class="synStatement">[</span><span class="synComment"> filling cells</span><br><span class="synComment">  </span><span class="synIdentifier">-</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synStatement">[</span><span class="synType">&lt;</span><span class="synComment">/</span><span class="synStatement">]</span><span class="synType">&lt;</span><span class="synStatement">[</span><span class="synType">&lt;</span><span class="synStatement">]</span><span class="synType">&lt;</span><span class="synStatement">[</span><span class="synType">&lt;</span><span class="synStatement">]</span><span class="synType">&gt;&gt;</span><br><span class="synStatement">]</span><span class="synType">&lt;</span><br><span class="synIdentifier">+++++++++</span><span class="synType">&lt;&lt;</span><br><span class="synStatement">[</span><span class="synComment"> rough codes correction loop</span><br><span class="synComment">  </span><span class="synIdentifier">-</span><span class="synType">&gt;&gt;&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+++</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synType">&gt;</span><span class="synIdentifier">+</span><span class="synStatement">[</span><span class="synType">&lt;</span><span class="synStatement">]</span><span class="synType">&lt;</span><br><span class="synStatement">]</span><br><span class="synComment">more accurate сodes correction</span><br><span class="synType">&gt;&gt;&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><br><span class="synIdentifier">--</span><span class="synType">&gt;</span><span class="synIdentifier">+++++++</span><span class="synType">&gt;</span><span class="synIdentifier">------</span><span class="synType">&gt;</span><span class="synIdentifier">++++++</span><span class="synType">&gt;</span><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">+++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">++++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">---</span><span class="synType">&gt;</span><span class="synIdentifier">++++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">------</span><span class="synType">&gt;</span><span class="synIdentifier">++++++</span><span class="synType">&gt;</span><br><span class="synIdentifier">++</span><span class="synType">&gt;</span><span class="synIdentifier">+++++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">++++++++++++</span><span class="synType">&gt;</span><span class="synIdentifier">------</span><span class="synType">&gt;</span><span class="synIdentifier">+++</span><br><span class="synComment">rewind and output</span><br><span class="synStatement">[</span><span class="synType">&lt;</span><span class="synStatement">]</span><span class="synType">&gt;</span><span class="synStatement">[</span><span class="synPreProc">.</span><span class="synType">&gt;</span><span class="synStatement">]</span><br>',
  clean:
    '<span class="synPreProc">module</span> fsieve<br><br><span class="synPreProc">import</span> StdClass; // RWS<br><span class="synPreProc">import</span> StdInt, StdReal<br><br>NrOfPrimes :== <span class="synConstant">3000</span><br><br>primes :: <span class="synSpecial">[</span><span class="synType">Int</span><span class="synSpecial">]</span><br>primes = pr <span class="synStatement">where</span> pr = <span class="synSpecial">[</span><span class="synConstant">5</span><span class="synSpecial"> : sieve </span><span class="synConstant">7</span><span class="synSpecial"> </span><span class="synConstant">4</span><span class="synSpecial"> pr]</span><br><br><span class="synType">sieve :: Int !Int [Int] -&gt; [Int]</span><br>sieve g i prs<br>| isPrime prs g (toInt (sqrt (toReal g))) = <span class="synSpecial">[g : sieve` g i prs]</span><br>| otherwise                               = sieve (g + i) (<span class="synConstant">6</span> - i) prs<br><br><span class="synType">sieve` :: Int Int [Int] -&gt; [Int]</span><br>sieve` g i prs = sieve (g + i) (<span class="synConstant">6</span> - i) prs<br><br><span class="synType">isPrime :: [Int] !Int Int -&gt; Bool</span><br>isPrime <span class="synSpecial">[f:r]</span> pr bd<br>| f&gt;bd        =  <span class="synConstant">True</span><br>| pr rem f==<span class="synConstant">0</span> =  <span class="synConstant">False</span><br>| otherwise   =  isPrime r pr bd<br><br><span class="synType">select :: [x] Int -&gt; x</span><br>select <span class="synSpecial">[f:r]</span> <span class="synConstant">1</span> = f<br>select <span class="synSpecial">[f:r]</span> n = select r (n - <span class="synConstant">1</span>)<br><br><span class="synSpecial">Start</span> :: <span class="synType">Int</span><br><span class="synSpecial">Start</span> = select <span class="synSpecial">[</span><span class="synConstant">2</span><span class="synSpecial">, </span><span class="synConstant">3</span><span class="synSpecial"> : primes]</span> NrOfPrimes<br>',
  clojure:
    '<span class="synSpecial">(def</span> <span class="synSpecial">^</span>:dynamic <span class="synIdentifier">chunk</span>-size <span class="synConstant">17</span><span class="synSpecial">)</span><br><br><span class="synSpecial">(</span><span class="synPreProc">defn</span> <span class="synIdentifier">next</span>-chunk <span class="synSpecial">[</span>rdr<span class="synSpecial">]</span><br>  <span class="synSpecial">(let</span> <span class="synSpecial">[</span>buf <span class="synSpecial">(</span><span class="synIdentifier">char</span>-array <span class="synIdentifier">chunk</span>-size<span class="synSpecial">)</span><br>        s <span class="synSpecial">(</span>.read rdr buf<span class="synSpecial">)]</span><br>  <span class="synSpecial">(</span><span class="synStatement">when</span> <span class="synSpecial">(</span>pos? s<span class="synSpecial">)</span><br>    <span class="synSpecial">(</span>java.nio.CharBuffer/wrap buf <span class="synConstant">0</span> s<span class="synSpecial">))))</span><br><br><span class="synSpecial">(</span><span class="synPreProc">defn</span> <span class="synIdentifier">chunk</span>-seq <span class="synSpecial">[</span>rdr<span class="synSpecial">]</span><br>  <span class="synSpecial">(</span><span class="synStatement">when</span>-let <span class="synSpecial">[</span><span class="synIdentifier">chunk</span> <span class="synSpecial">(</span><span class="synIdentifier">next</span>-chunk rdr<span class="synSpecial">)]</span><br>    <span class="synSpecial">(</span><span class="synIdentifier">cons</span> <span class="synIdentifier">chunk</span> <span class="synSpecial">(</span>lazy-seq <span class="synSpecial">(</span><span class="synIdentifier">chunk</span>-seq rdr<span class="synSpecial">)))))</span><br>',
  cmake:
    '<span class="synStatement">cmake_minimum_required</span><span class="synIdentifier">(VERSION 2.8.8)</span><br><span class="synStatement">project</span><span class="synIdentifier">(cmake_example)</span><br><br><span class="synComment"># Show message on Linux platform</span><br><span class="synStatement">if</span> <span class="synIdentifier">(</span><span class="synType">${CMAKE_SYSTEM_NAME}</span><span class="synIdentifier"> </span><span class="synStatement">MATCHES</span><span class="synIdentifier"> Linux)</span><br>    <span class="synStatement">message</span><span class="synIdentifier">(</span><span class="synConstant">"Good choice, bro!"</span><span class="synIdentifier">)</span><br><span class="synStatement">endif</span><span class="synIdentifier">()</span><br><br><span class="synComment"># Tell CMake to run moc when necessary:</span><br><span class="synStatement">set</span><span class="synIdentifier">(CMAKE_AUTOMOC </span><span class="synStatement">ON</span><span class="synIdentifier">)</span><br><span class="synComment"># As moc files are generated in the binary dir,</span><br><span class="synComment"># tell CMake to always look for includes there:</span><br><span class="synStatement">set</span><span class="synIdentifier">(CMAKE_INCLUDE_CURRENT_DIR </span><span class="synStatement">ON</span><span class="synIdentifier">)</span><br><br><span class="synComment"># Widgets finds its own dependencies.</span><br><span class="synStatement">find_package</span><span class="synIdentifier">(Qt5Widgets REQUIRED)</span><br><br><span class="synStatement">add_executable</span><span class="synIdentifier">(myproject main.cpp mainwindow.cpp)</span><br>qt5_use_modules<span class="synIdentifier">(myproject Widgets)</span><br>',
  cpp:
    '<span class="synPreProc">#include </span><span class="synConstant">&lt;iostream&gt;</span><br><br><span class="synType">int</span> main(<span class="synType">int</span> argc, <span class="synType">char</span> *argv[]) {<br><br>  <span class="synComment">/* An annoying "Hello World" example */</span><br>  <span class="synStatement">for</span> (<span class="synType">auto</span> i = <span class="synConstant">0</span>; i &lt; <span class="synConstant">0xFFFF</span>; i++)<br>    cout &lt;&lt; <span class="synConstant">"Hello, World!"</span> &lt;&lt; endl;<br><br>  <span class="synType">char</span> c = <span class="synSpecial">\'<br>\'</span>;<br>  unordered_map &lt;string, vector&lt;string&gt; &gt; m;<br>  m[<span class="synConstant">"key"</span>] = <span class="synConstant">"</span><span class="synSpecial">\\\\\\\\</span><span class="synConstant">"</span>; <span class="synComment">// this is an error</span><br><br>  <span class="synStatement">return</span> -<span class="synConstant">2e3</span> + <span class="synConstant">12l</span>;<br>}<br>',
  crystal:
    '<span class="synPreProc">class</span> <span class="synType">Person</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(<span class="synIdentifier">@name</span> : <span class="synType">String</span>)<br>  <span class="synPreProc">end</span><br><br>  <span class="synPreProc">def</span> <span class="synIdentifier">greet</span><br>    puts <span class="synSpecial">"</span><span class="synConstant">Hi, I\'m </span><span class="synSpecial">#{</span><span class="synIdentifier">@name</span><span class="synSpecial">}"</span><br>  <span class="synPreProc">end</span><br><span class="synPreProc">end</span><br><br><span class="synPreProc">class</span> <span class="synType">Employee</span> &lt; <span class="synType">Person</span><br><span class="synPreProc">end</span><br><br>employee = <span class="synType">Employee</span>.new <span class="synSpecial">"</span><span class="synConstant">John</span><span class="synSpecial">"</span><br>employee.greet         <span class="synComment"># =&gt; "Hi, I\'m John"</span><br>employee.is_a?(<span class="synType">Person</span>) <span class="synComment"># =&gt; true</span><br><br><span class="synPreProc">@[</span><span class="synType">Link</span>(<span class="synSpecial">"</span><span class="synConstant">m</span><span class="synSpecial">"</span>)<span class="synPreProc">]</span><br><span class="synPreProc">lib</span> <span class="synType">C</span><br>  <span class="synComment"># In C: double cos(double x)</span><br>  <span class="synPreProc">fun</span> <span class="synIdentifier">cos</span>(<span class="synIdentifier">value</span> : <span class="synType">Float64</span>) : <span class="synType">Float64</span><br><span class="synPreProc">end</span><br><br><span class="synType">C</span>.cos(<span class="synConstant">1.5_f64</span>) <span class="synComment"># =&gt; 0.0707372</span><br><br>s = uninitialized <span class="synType">String</span><br>s = &lt;&lt;-<span class="synSpecial">\'STR\'</span><br><span class="synConstant">\\hello\\world</span><br><span class="synConstant">\\hello\\world</span><br><span class="synSpecial">STR</span><br>',
  cs:
    '<span class="synStatement">using</span> System.IO.Compression;<br><br>#pragma warning disable <span class="synConstant">414</span>, <span class="synConstant">3021</span><br><br><span class="synType">namespace</span> MyApplication<br>{<br>    [Obsolete(<span class="synConstant">"..."</span>)]<br>    <span class="synType">class</span> Program : IInterface<br>    {<br>        <span class="synType">public</span> <span class="synType">static</span> List&lt;<span class="synType">int</span>&gt; JustDoIt(<span class="synType">int</span> count)<br>        {<br>            Console.WriteLine($<span class="synConstant">"Hello {Name}!"</span>);<br>            <span class="synStatement">return</span> <span class="synStatement">new</span> List&lt;<span class="synType">int</span>&gt;(<span class="synStatement">new</span> <span class="synType">int</span>[] { <span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span> })<br>        }<br>    }<br>}<br>',
  csp:
    '<span class="synType">Content</span>-<span class="synType">Security</span>-<span class="synType">Policy</span><span class="synSpecial">:</span><br>    default-src <span class="synSpecial">\'</span>self<span class="synSpecial">\';</span><br>    style-src <span class="synSpecial">\'</span>self<span class="synSpecial">\'</span> css<span class="synSpecial">.</span>example<span class="synSpecial">.</span>com<span class="synSpecial">;</span><br>    img-src *<span class="synSpecial">.</span>example<span class="synSpecial">.</span>com<span class="synSpecial">;</span><br>    script-src <span class="synSpecial">\'</span>unsafe-eval<span class="synSpecial">\'</span> <span class="synSpecial">\'</span>self<span class="synSpecial">\'</span> js<span class="synSpecial">.</span>example<span class="synSpecial">.</span>com <span class="synSpecial">\'</span>nonce-<span class="synType">Nc3n83cnSAd3wc3Sasdfn939hc3</span><span class="synSpecial">\'</span><br>',
  css:
    '<span class="synSpecial">@font-face</span> <span class="synIdentifier">{</span><br>  <span class="synType">font-family</span>: Chunkfive; <span class="synType">src</span>: <span class="synIdentifier">url(</span><span class="synConstant">\'Chunkfive.otf\'</span><span class="synIdentifier">)</span>;<br><span class="synIdentifier">}</span><br><br><span class="synStatement">body</span><span class="synSpecial">,</span> <span class="synIdentifier">.usertext</span> <span class="synIdentifier">{</span><br>  <span class="synType">color</span>: <span class="synConstant">#F0F0F0</span>; <span class="synType">background</span>: <span class="synConstant">#600</span>;<br>  <span class="synType">font-family</span>: Chunkfive<span class="synSpecial">,</span> sans;<br><span class="synIdentifier">}</span><br><br><span class="synComment">@import</span> <span class="synIdentifier">url(</span><span class="synConstant">print.css</span><span class="synIdentifier">)</span>;<br><span class="synComment">@media</span><span class="synPreProc"> </span><span class="synSpecial">print</span><span class="synPreProc"> </span><span class="synIdentifier">{</span><br>  <span class="synStatement">a</span><span class="synSpecial">[</span><span class="synConstant">href</span><span class="synSpecial">^=</span><span class="synConstant">http</span><span class="synSpecial">]</span>::<span class="synPreProc">after</span> <span class="synIdentifier">{</span><br>    <span class="synType">content</span>: <span class="synIdentifier">attr(</span><span class="synConstant">href</span><span class="synIdentifier">)</span><br>  <span class="synIdentifier">}</span><br><span class="synIdentifier">}</span><br>',
  d:
    '<span class="synPreProc">#!/usr/bin/rdmd</span><br><span class="synComment">// Computes average line length for standard input.</span><br><span class="synPreProc">import</span> std.stdio;<br><br><span class="synComment">/+</span><br><span class="synComment">  this is a /+ nesting +/ comment</span><br><span class="synComment">+/</span><br><br><span class="synType">enum</span> COMPILED_ON = <span class="synConstant">__TIMESTAMP__</span>;  <span class="synComment">// special token</span><br><br><span class="synType">enum</span> character = <span class="synConstant">\'©\'</span>;<br><span class="synType">enum</span> copy_valid = <span class="synConstant">\'</span><span class="synError">&amp;copy;</span><span class="synConstant">\'</span>;<br><span class="synType">enum</span> backslash_escaped = <span class="synConstant">\'</span><span class="synSpecial">\\\\</span><span class="synConstant">\'</span>;<br><br><span class="synComment">// string literals</span><br><span class="synType">enum</span> str = <span class="synConstant">`hello "world"!`</span>;<br><span class="synType">enum</span> multiline = <span class="synConstant">r"lorem</span><br><span class="synConstant">ipsum</span><br><span class="synConstant">dolor"</span>;  <span class="synComment">// wysiwyg string, no escapes here allowed</span><br><span class="synType">enum</span> multiline2 = <span class="synConstant">"sit</span><br><span class="synConstant">amet</span><br><span class="synSpecial">\\"</span><span class="synConstant">adipiscing</span><span class="synSpecial">\\"</span><br><span class="synConstant">elit."</span>;<br><span class="synType">enum</span> hex = <span class="synConstant">x"66 6f 6f"</span>;   <span class="synComment">// same as "foo"</span><br><br><span class="synPreProc">#line 5</span><br><br><span class="synComment">// float literals</span><br><span class="synType">enum</span> f = [<span class="synConstant">3.14f</span>, <span class="synConstant">.1</span>, <span class="synConstant">1.</span>, <span class="synConstant">1e100</span>, <span class="synConstant">0xc0de.01p+100</span>];<br><br><span class="synType">static</span> <span class="synStatement">if</span> (something == <span class="synConstant">true</span>) {<br>   <span class="synPreProc">import</span> std.algorithm;<br>}<br><br><span class="synType">void</span> main() <span class="synType">pure</span> <span class="synType">nothrow</span> <span class="synPreProc">@</span><span class="synType">safe</span> {<br>    <span class="synType">ulong</span> lines = <span class="synConstant">0</span>;<br>    <span class="synType">double</span> sumLength = <span class="synConstant">0</span>;<br>    <span class="synStatement">foreach</span> (line; stdin.byLine()) {<br>        ++lines;<br>        sumLength += line.length;<br>    }<br>    writeln(<span class="synConstant">"Average line length: "</span>,<br>        lines ? sumLength / lines : <span class="synConstant">0</span>);<br>}<br>',
  dart:
    '<span class="synPreProc">library </span>app;<br><span class="synPreProc">import </span><span class="synConstant">\'dart:html\'</span>;<br><br><span class="synPreProc">part </span><span class="synConstant">\'app2.dart\'</span>;<br><br><span class="synComment">/**</span><br><span class="synComment"> * Class description and </span><span class="synSpecial">[link]</span><span class="synComment">(http://dartlang.org/).</span><br><span class="synComment"> */</span><br>@Awesome(<span class="synConstant">\'it works!\'</span>)<br><span class="synType">class</span> SomeClass<span class="synStatement">&lt;</span>S <span class="synType">extends</span> <span class="synType">Iterable</span><span class="synStatement">&gt;</span> <span class="synType">extends</span> BaseClass<span class="synStatement">&lt;</span>S<span class="synStatement">&gt;</span> <span class="synType">implements</span> <span class="synType">Comparable</span> {<br>  <span class="synStatement">factory</span> SomeClass(<span class="synType">num</span> param);<br>  SomeClass._internal(<span class="synType">int</span> q) <span class="synStatement">:</span> <span class="synType">super</span>() {<br>    <span class="synStatement">assert</span>(q <span class="synStatement">!=</span> <span class="synConstant">1</span>);<br>    <span class="synType">double</span> z = <span class="synConstant">0.0</span>;<br>  }<br><br>  <span class="synComment">/// **Sum** function</span><br>  <span class="synType">int</span> sum(<span class="synType">int</span> a, <span class="synType">int</span> b) <span class="synStatement">=&gt;</span> a <span class="synStatement">+</span> b;<br><br>  ElementList els() <span class="synStatement">=&gt;</span> querySelectorAll(<span class="synConstant">\'.dart\'</span>);<br>}<br><br><span class="synType">String</span> str = <span class="synConstant">\' (</span><span class="synPreProc">${\'parameter\' + \'zxc\'}</span><span class="synConstant">)\'</span>;<br><span class="synType">String</span> str = <span class="synConstant">" (</span><span class="synPreProc">${true ? 2 + 2 / 2 : null}</span><span class="synConstant">)"</span>;<br><span class="synType">String</span> str = <span class="synConstant">" (</span><span class="synPreProc">$variable</span><span class="synConstant">)"</span>;<br><span class="synType">String</span> str = <span class="synConstant">r\'<br>raw\\\'</span>;<br><span class="synType">String</span> str = <span class="synConstant">r"<br>raw\\"</span>;<br><span class="synType">var</span> str = <span class="synConstant">\'\'\'</span><br><span class="synConstant">Something </span><span class="synPreProc">${2+3}</span><br><span class="synConstant">\'\'\'</span>;<br><span class="synType">var</span> str = <span class="synConstant">r"""</span><br><span class="synConstant">Something ${2+3}</span><br><span class="synConstant">"""</span>;<br><br>checkVersion() <span class="synStatement">async</span> {<br>  <span class="synType">var</span> version = <span class="synStatement">await</span> lookUpVersion();<br>}<br>',
  diff:
    '<span class="synType">Index: languages/ini.js</span><br>===================================================================<br><span class="synType">--- languages/ini.js    (revision 199)</span><br><span class="synType">+++ languages/ini.js    (revision 200)</span><br><span class="synStatement">@@ -1,8 +1,7 @@</span><br> hljs.LANGUAGES.ini =<br> {<br>   case_insensitive: true,<br><span class="synSpecial">-  defaultMode:</span><br><span class="synSpecial">-  {</span><br><span class="synIdentifier">+  defaultMode: {</span><br>     contains: [\'comment\', \'title\', \'setting\'],<br>     illegal: \'[^\\\\s]\'<br>   },<br><br><span class="synType">*** /path/to/original timestamp</span><br><span class="synType">--- /path/to/new      timestamp</span><br><span class="synStatement">***************</span><br><span class="synType">*** 1,3 ****</span><br><span class="synType">--- 1,9 ----</span><br><span class="synIdentifier">+ This is an important</span><br><span class="synIdentifier">+ notice! It should</span><br><span class="synIdentifier">+ therefore be located at</span><br><span class="synIdentifier">+ the beginning of this</span><br><span class="synIdentifier">+ document!</span><br><br><span class="synPreProc">! compress the size of the</span><br><span class="synPreProc">! changes.</span><br><br>  It is important to spell<br>',
  django:
    '<span class="synPreProc">{% </span><span class="synStatement">if</span><span class="synPreProc"> articles|</span><span class="synIdentifier">length</span><span class="synPreProc"> %}</span><br><span class="synPreProc">{% </span><span class="synStatement">for</span><span class="synPreProc"> article </span><span class="synStatement">in</span><span class="synPreProc"> articles %}</span><br><br><span class="synPreProc">{% custom %}</span><br><br><span class="synComment">{# Striped table #}</span><br>&lt;tr class="<span class="synPreProc">{% </span><span class="synStatement">cycle</span><span class="synPreProc"> odd,even %}</span>"&gt;<br>  &lt;td&gt;<span class="synPreProc">{{ article|</span><span class="synIdentifier">default</span><span class="synPreProc">:</span><span class="synConstant">"Hi... "</span><span class="synPreProc"> }}</span>&lt;/td&gt;<br>  &lt;td <span class="synPreProc">{% </span><span class="synStatement">if</span><span class="synPreProc"> article.today %}</span>class="today"<span class="synPreProc">{% </span><span class="synStatement">endif</span><span class="synPreProc"> %}</span>&gt;<br>    Published on <span class="synPreProc">{{ article.</span><span class="synIdentifier">date</span><span class="synPreProc"> }}</span><br>  &lt;/td&gt;<br>&lt;/tr&gt;<br><br><span class="synPreProc">{% </span><span class="synStatement">endfor</span><span class="synPreProc"> %}</span><br><span class="synPreProc">{% </span><span class="synStatement">endif</span><span class="synPreProc"> %}</span><br>',
  dns:
    '<span class="synPreProc">$ORIGIN </span><span class="synStatement">example.com.</span>    <span class="synComment">; designates the start of this zone file in the namespace</span><br><span class="synPreProc">$TTL </span><span class="synConstant">1h</span>                 <span class="synComment">; default expiration time of all resource records without their own TTL value</span><br><span class="synStatement">example.com.</span>  <span class="synPreProc">IN</span>  <span class="synType">SOA</span>   <span class="synIdentifier">ns.example.com.</span> <span class="synIdentifier">username.example.com.</span> ( <span class="synSpecial">2007120710</span> <span class="synConstant">1d</span> <span class="synConstant">2h</span> <span class="synConstant">4w</span> <span class="synConstant">1h</span> )<br><span class="synStatement">example.com.</span>  <span class="synPreProc">IN</span>  <span class="synType">NS</span>    <span class="synIdentifier">ns</span>                    <span class="synComment">; ns.example.com is a nameserver for example.com</span><br><span class="synStatement">example.com.</span>  <span class="synPreProc">IN</span>  <span class="synType">NS</span>    <span class="synIdentifier">ns.somewhere.example.</span> <span class="synComment">; ns.somewhere.example is a backup nameserver for example.com</span><br><span class="synStatement">example.com.</span>  <span class="synPreProc">IN</span>  <span class="synType">MX</span>    <span class="synConstant">10</span> <span class="synIdentifier">mail.example.com.</span>  <span class="synComment">; mail.example.com is the mailserver for example.com</span><br><span class="synSpecial">@ </span>            <span class="synPreProc">IN</span>  <span class="synType">MX</span>    <span class="synConstant">20</span> <span class="synIdentifier">mail2.example.com.</span> <span class="synComment">; equivalent to above line, "@" represents zone origin</span><br><span class="synSpecial">@ </span>            <span class="synPreProc">IN</span>  <span class="synType">MX</span>    <span class="synConstant">50</span> <span class="synIdentifier">mail3</span>              <span class="synComment">; equivalent to above line, but using a relative host name</span><br><span class="synStatement">example.com.</span>  <span class="synPreProc">IN</span>  <span class="synType">A</span>     <span class="synConstant">192.0.2.1</span>             <span class="synComment">; IPv4 address for example.com</span><br>              <span class="synPreProc">IN</span>  <span class="synType">AAAA</span>  <span class="synConstant">2001:db8:10::1</span>        <span class="synComment">; IPv6 address for example.com</span><br><span class="synStatement">ns</span>            <span class="synPreProc">IN</span>  <span class="synType">A</span>     <span class="synConstant">192.0.2.2</span>             <span class="synComment">; IPv4 address for ns.example.com</span><br>              <span class="synPreProc">IN</span>  <span class="synType">AAAA</span>  <span class="synConstant">2001:db8:10::2</span>        <span class="synComment">; IPv6 address for ns.example.com</span><br><span class="synStatement">www</span>           <span class="synPreProc">IN</span>  <span class="synType">CNAME</span> <span class="synIdentifier">example.com.</span>          <span class="synComment">; www.example.com is an alias for example.com</span><br><span class="synStatement">wwwtest</span>       <span class="synPreProc">IN</span>  <span class="synType">CNAME</span> <span class="synIdentifier">www</span>                   <span class="synComment">; wwwtest.example.com is another alias for www.example.com</span><br><span class="synStatement">mail</span>          <span class="synPreProc">IN</span>  <span class="synType">A</span>     <span class="synConstant">192.0.2.3</span>             <span class="synComment">; IPv4 address for mail.example.com</span><br><span class="synStatement">mail2</span>         <span class="synPreProc">IN</span>  <span class="synType">A</span>     <span class="synConstant">192.0.2.4</span>             <span class="synComment">; IPv4 address for mail2.example.com</span><br><span class="synStatement">mail3</span>         <span class="synPreProc">IN</span>  <span class="synType">A</span>     <span class="synConstant">192.0.2.5</span>             <span class="synComment">; IPv4 address for mail3.example.com</span><br>',
  elixir:
    '<span class="synPreProc">defrecord</span> <span class="synType">Person</span>, <span class="synConstant">first_name:</span> <span class="synConstant">nil</span>, <span class="synConstant">last_name:</span> <span class="synSpecial">"</span><span class="synConstant">Dudington</span><span class="synSpecial">"</span> <span class="synStatement">do</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">name</span> record <span class="synStatement">do</span> <span class="synComment"># huh ?</span><br>    <span class="synSpecial">"#{</span>record<span class="synStatement">.</span>first_name<span class="synSpecial">}</span><span class="synConstant"> </span><span class="synSpecial">#{</span>record<span class="synStatement">.</span>last_name<span class="synSpecial">}"</span><br>  <span class="synStatement">end</span><br><span class="synStatement">end</span><br><br><span class="synPreProc">defrecord</span> <span class="synType">User</span>, <span class="synConstant">name:</span> <span class="synSpecial">"</span><span class="synConstant">José</span><span class="synSpecial">"</span>, <span class="synConstant">age:</span> <span class="synConstant">25</span><br><br>guy <span class="synStatement">=</span> <span class="synType">Person</span><span class="synStatement">.</span>new <span class="synConstant">first_name:</span> <span class="synSpecial">"</span><span class="synConstant">Guy</span><span class="synSpecial">"</span><br>guy<span class="synStatement">.</span>name<br><br><span class="synPreProc">defmodule</span> <span class="synType">ListServer</span> <span class="synStatement">do</span><br>  <span class="synIdentifier">@moduledoc</span> <span class="synConstant">"""</span><br><span class="synConstant">  This module provides an easy to use ListServer, useful for keeping</span><br><span class="synConstant">  lists of things.</span><br><span class="synConstant">  """</span><br>  <span class="synPreProc">use</span> <span class="synType">GenServer.Behaviour</span><br>  <span class="synPreProc">alias</span> <span class="synType">Foo.Bar</span><br><br>  <span class="synComment">### Public API</span><br>  <span class="synIdentifier">@doc</span> <span class="synConstant">"""</span><br><span class="synConstant">  Starts and links a new ListServer, returning {:ok, pid}</span><br><br><span class="synConstant">  ## Example</span><br><br><span class="synConstant">    iex&gt; {:ok, pid} = ListServer.start_link</span><br><br><span class="synConstant">  """</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">start_link</span> <span class="synStatement">do</span><br>    <span class="synConstant">:gen_server</span><span class="synStatement">.</span>start_link({<span class="synConstant">:local</span>, <span class="synConstant">:list</span>}, <span class="synConstant">__MODULE__</span>, [], [])<br>  <span class="synStatement">end</span><br><br>  <span class="synComment">### GenServer API</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">init</span>(list) <span class="synStatement">do</span><br>    {<span class="synConstant">:ok</span>, list}<br>  <span class="synStatement">end</span><br><br>  <span class="synComment"># Clear the list</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">handle_cast</span> <span class="synConstant">:clear</span>, list <span class="synStatement">do</span><br>    {<span class="synConstant">:noreply</span>, []}<br>  <span class="synStatement">end</span><br><span class="synStatement">end</span><br><br>{<span class="synConstant">:ok</span>, pid} <span class="synStatement">=</span> <span class="synType">ListServer</span><span class="synStatement">.</span>start_link<br>pid <span class="synStatement">&lt;-</span> {<span class="synConstant">:foo</span>, <span class="synSpecial">"</span><span class="synConstant">bar</span><span class="synSpecial">"</span>}<br><br>greeter <span class="synStatement">=</span> <span class="synStatement">fn</span>(x) <span class="synStatement">-&gt;</span> <span class="synType">IO</span><span class="synStatement">.</span>puts <span class="synSpecial">"</span><span class="synConstant">hey </span><span class="synSpecial">#{</span>x<span class="synSpecial">}"</span> <span class="synStatement">end</span><br>greeter<span class="synStatement">.</span>(<span class="synSpecial">"</span><span class="synConstant">Bob</span><span class="synSpecial">"</span>)<br><br>',
  erlang:
    '<span class="synStatement">-module</span>(<span class="synConstant">ssh_cli</span>).<br><br><span class="synStatement">-behaviour</span>(<span class="synConstant">ssh_channel</span>).<br><br><span class="synPreProc">-include</span>(<span class="synConstant">"ssh.hrl"</span>).<br><span class="synComment">%% backwards compatibility</span><br><span class="synStatement">-export</span>(<span class="synSpecial">[</span>listen<span class="synStatement">/</span><span class="synConstant">1</span>, listen<span class="synStatement">/</span><span class="synConstant">2</span>, listen<span class="synStatement">/</span><span class="synConstant">3</span>, listen<span class="synStatement">/</span><span class="synConstant">4</span>, stop<span class="synStatement">/</span><span class="synConstant">1</span><span class="synSpecial">]</span>).<br><br><span class="synStatement">if</span> <span class="synIdentifier">L</span> <span class="synStatement">=/=</span> <span class="synSpecial">[]</span> <span class="synStatement">-&gt;</span>      <span class="synComment">% If L is not empty</span><br>    sum(<span class="synIdentifier">L</span>) <span class="synStatement">/</span> count(<span class="synIdentifier">L</span>);<br><span class="synConstant">true</span> <span class="synStatement">-&gt;</span><br>    <span class="synConstant">error</span><br><span class="synStatement">end</span>.<br><br><span class="synComment">%% state</span><br><span class="synStatement">-record</span>(<span class="synConstant">state</span>, <span class="synSpecial">{</span><br>    <span class="synConstant">cm</span>,<br>    <span class="synConstant">channel</span><br>   <span class="synSpecial">}</span>).<br><br><span class="synType">-spec</span> foo(integer()) <span class="synStatement">-&gt;</span> integer().<br>foo(<span class="synIdentifier">X</span>) <span class="synStatement">-&gt;</span> <span class="synConstant">1</span> <span class="synStatement">+</span> <span class="synIdentifier">X</span>.<br><br>test(<span class="synIdentifier">Foo</span>)<span class="synStatement">-&gt;</span><span class="synIdentifier">Foo</span>.<br><br>init(<span class="synSpecial">[</span><span class="synIdentifier">Shell</span>, <span class="synIdentifier">Exec</span><span class="synSpecial">]</span>) <span class="synStatement">-&gt;</span><br>    <span class="synSpecial">{</span><span class="synConstant">ok</span>, <span class="synType">#state</span><span class="synSpecial">{</span><span class="synConstant">shell</span> <span class="synStatement">=</span> <span class="synIdentifier">Shell</span>, <span class="synConstant">exec</span> <span class="synStatement">=</span> <span class="synIdentifier">Exec</span><span class="synSpecial">}}</span>;<br>init(<span class="synSpecial">[</span><span class="synIdentifier">Shell</span><span class="synSpecial">]</span>) <span class="synStatement">-&gt;</span><br>    <span class="synConstant">false</span> <span class="synStatement">=</span> <span class="synStatement">not</span> <span class="synConstant">true</span>,<br>    io:format(<span class="synConstant">"Hello, </span><span class="synSpecial">\\"~p</span><span class="synConstant">!</span><span class="synSpecial">~n</span><span class="synConstant">"</span>, <span class="synSpecial">[</span><span class="synIdentifier">atom_to_list</span>(<span class="synConstant">\'World\'</span>)<span class="synSpecial">]</span>),<br>    <span class="synSpecial">{</span><span class="synConstant">ok</span>, <span class="synType">#state</span><span class="synSpecial">{</span><span class="synConstant">shell</span> <span class="synStatement">=</span> <span class="synIdentifier">Shell</span><span class="synSpecial">}}</span>.<br><br>concat(<span class="synSpecial">[</span><span class="synIdentifier">Single</span><span class="synSpecial">]</span>) <span class="synStatement">-&gt;</span> <span class="synIdentifier">Single</span>;<br>concat(<span class="synIdentifier">RList</span>) <span class="synStatement">-&gt;</span><br>    <span class="synIdentifier">EpsilonFree</span> <span class="synStatement">=</span> lists:filter(<br>        <span class="synStatement">fun</span> (<span class="synIdentifier">Element</span>) <span class="synStatement">-&gt;</span><br>            <span class="synStatement">case</span> <span class="synIdentifier">Element</span> <span class="synStatement">of</span><br>                <span class="synConstant">epsilon</span> <span class="synStatement">-&gt;</span> <span class="synConstant">false</span>;<br>                <span class="synIdentifier">_</span> <span class="synStatement">-&gt;</span> <span class="synConstant">true</span><br>            <span class="synStatement">end</span><br>        <span class="synStatement">end</span>,<br>        <span class="synIdentifier">RList</span>),<br>    <span class="synStatement">case</span> <span class="synIdentifier">EpsilonFree</span> <span class="synStatement">of</span><br>        <span class="synSpecial">[</span><span class="synIdentifier">Single</span><span class="synSpecial">]</span> <span class="synStatement">-&gt;</span> <span class="synIdentifier">Single</span>;<br>        <span class="synIdentifier">Other</span> <span class="synStatement">-&gt;</span> <span class="synSpecial">{</span><span class="synConstant">concat</span>, <span class="synIdentifier">Other</span><span class="synSpecial">}</span><br>    <span class="synStatement">end</span>.<br><br>union_dot_union(<span class="synSpecial">{</span><span class="synConstant">union</span>, <span class="synIdentifier">_</span><span class="synSpecial">}</span><span class="synStatement">=</span><span class="synIdentifier">U1</span>, <span class="synSpecial">{</span><span class="synConstant">union</span>, <span class="synIdentifier">_</span><span class="synSpecial">}</span><span class="synStatement">=</span><span class="synIdentifier">U2</span>) <span class="synStatement">-&gt;</span><br>    union(lists:flatten(<br>        lists:map(<br>            <span class="synStatement">fun</span> (<span class="synIdentifier">X1</span>) <span class="synStatement">-&gt;</span><br>                lists:map(<br>                    <span class="synStatement">fun</span> (<span class="synIdentifier">X2</span>) <span class="synStatement">-&gt;</span><br>                        concat(<span class="synSpecial">[</span><span class="synIdentifier">X1</span>, <span class="synIdentifier">X2</span><span class="synSpecial">]</span>)<br>                    <span class="synStatement">end</span>,<br>                    union_to_list(<span class="synIdentifier">U2</span>)<br>                )<br>            <span class="synStatement">end</span>,<br>            union_to_list(<span class="synIdentifier">U1</span>)<br>        ))).<br>',
  fortran:
    '<span class="synPreProc">subroutine</span> test_sub(k)<br>    <span class="synType">implicit</span> <span class="synType">none</span><br><br>  <span class="synComment">!===============================</span><br>  <span class="synComment">!   This is a test subroutine</span><br>  <span class="synComment">!===============================</span><br><br>    <span class="synType">integer</span>, <span class="synType">intent</span>(<span class="synType">in</span>)           :: k<br>    <span class="synType">double precision</span>, <span class="synType">allocatable</span> :: a(:)<br>    <span class="synType">integer</span>, <span class="synType">parameter</span>            :: nmax<span class="synStatement">=</span><span class="synConstant">10</span><br>    <span class="synType">integer</span>                       :: i<br><br>    <span class="synStatement">allocate</span> (a(nmax))<br><br>    <span class="synStatement">do</span> i<span class="synStatement">=</span><span class="synConstant">1</span>,nmax<br>      a(i) <span class="synStatement">=</span> <span class="synIdentifier">dble</span>(i)<span class="synStatement">*</span><span class="synConstant">5.d0</span><br>    <span class="synStatement">enddo</span><br><br>    <span class="synStatement">print</span> <span class="synStatement">*</span>, <span class="synConstant">\'Hello world\'</span><br>    <span class="synStatement">write</span> (<span class="synStatement">*</span>,<span class="synStatement">*</span>) a(:)<br><br><span class="synPreProc">end subroutine</span> test_sub<br>',
  fsharp:
    '<span class="synPreProc">open</span> <span class="synIdentifier">System</span><br><br><span class="synComment">// Single line comment...</span><br><span class="synComment">(*</span><br><span class="synComment">  This is a</span><br><span class="synComment">  multiline comment.</span><br><span class="synComment">*)</span><br><span class="synStatement">let</span> <span class="synIdentifier">checkList</span> alist <span class="synStatement">=</span><br>    <span class="synStatement">match</span> alist <span class="synStatement">with</span><br>    <span class="synStatement">|</span> <span class="synStatement">[]</span> <span class="synStatement">-&gt;</span> <span class="synConstant">0</span><br>    <span class="synStatement">|</span> <span class="synStatement">[</span>a<span class="synStatement">]</span> <span class="synStatement">-&gt;</span> <span class="synConstant">1</span><br>    <span class="synStatement">|</span> <span class="synStatement">[</span>a<span class="synStatement">;</span> b<span class="synStatement">]</span> <span class="synStatement">-&gt;</span> <span class="synConstant">2</span><br>    <span class="synStatement">|</span> <span class="synStatement">[</span>a<span class="synStatement">;</span> b<span class="synStatement">;</span> c<span class="synStatement">]</span> <span class="synStatement">-&gt;</span> <span class="synConstant">3</span><br>    <span class="synStatement">|</span> <span class="synIdentifier">_</span> <span class="synStatement">-&gt;</span> <span class="synStatement">failwith</span> <span class="synConstant">"List is too big!"</span><br><br><br><span class="synStatement">let</span> <span class="synIdentifier">text</span> <span class="synStatement">=</span> <span class="synConstant">"Some text..."</span><br><span class="synStatement">let</span> <span class="synIdentifier">text2</span> <span class="synStatement">=</span> <span class="synConstant">@"A ""verbatim"" string..."</span><br><span class="synStatement">let</span> <span class="synIdentifier">catalog</span> <span class="synStatement">=</span> <span class="synConstant">"""</span><br><span class="synConstant">Some "long" string...</span><br><span class="synConstant">"""</span><br><br><span class="synStatement">let</span> <span class="synStatement">rec</span> <span class="synIdentifier">fib</span> x <span class="synStatement">=</span> <span class="synStatement">if</span> x <span class="synStatement">&lt;=</span> <span class="synConstant">2</span> <span class="synStatement">then</span> <span class="synConstant">1</span> <span class="synStatement">else</span> fib<span class="synStatement">(</span>x-<span class="synConstant">1</span><span class="synStatement">)</span> <span class="synStatement">+</span> fib<span class="synStatement">(</span>x-<span class="synConstant">2</span><span class="synStatement">)</span><br><br><span class="synStatement">let</span> <span class="synIdentifier">fibs</span> <span class="synStatement">=</span><br>    <span class="synType">Async</span>.Parallel <span class="synStatement">[</span> <span class="synStatement">for</span> i <span class="synStatement">in</span> <span class="synConstant">0.</span>.<span class="synConstant">40</span> <span class="synStatement">-&gt;</span> <span class="synStatement">async</span> <span class="synStatement">{</span> <span class="synStatement">return</span> fib<span class="synStatement">(</span>i<span class="synStatement">)</span> <span class="synStatement">}</span> <span class="synStatement">]</span><br>    <span class="synStatement">|&gt;</span> <span class="synType">Async</span>.RunSynchronously<br><br><span class="synStatement">type</span> <span class="synIdentifier">Sprocket</span><span class="synStatement">(</span>gears<span class="synStatement">)</span> <span class="synStatement">=</span><br>  <span class="synStatement">member</span> this.<span class="synIdentifier">Gears</span> : <span class="synType">int</span> <span class="synStatement">=</span> gears<br><br><span class="synSpecial">[&lt;</span><span class="synType">AbstractClass</span><span class="synSpecial">&gt;]</span><br><span class="synStatement">type</span> <span class="synIdentifier">Animal</span> <span class="synStatement">=</span><br>  <span class="synType">abstract</span> Speak : <span class="synType">unit</span> <span class="synStatement">-&gt;</span> <span class="synType">unit</span><br><br><span class="synStatement">type</span> <span class="synIdentifier">Widget</span> <span class="synStatement">=</span><br>  <span class="synStatement">|</span> RedWidget<br>  <span class="synStatement">|</span> GreenWidget<br><br><span class="synStatement">type</span> <span class="synIdentifier">Point</span> <span class="synStatement">=</span> <span class="synStatement">{</span>X: <span class="synType">float</span><span class="synStatement">;</span> Y: <span class="synType">float</span><span class="synStatement">;}</span><br><br><span class="synSpecial">[&lt;</span><span class="synType">Measure</span><span class="synSpecial">&gt;]</span><br><span class="synStatement">type</span> <span class="synIdentifier">s</span><br><span class="synStatement">let</span> <span class="synIdentifier">minutte</span> <span class="synStatement">=</span> <span class="synConstant">60</span><span class="synStatement">&lt;</span>s<span class="synStatement">&gt;</span><br><br><span class="synStatement">type</span> <span class="synIdentifier">DefaultMailbox</span><span class="synStatement">&lt;</span>\'a<span class="synStatement">&gt;()</span> <span class="synStatement">=</span><br>    <span class="synStatement">let</span> <span class="synStatement">mutable</span> <span class="synIdentifier">inbox</span> <span class="synStatement">=</span> ConcurrentQueue<span class="synStatement">&lt;</span>\'a<span class="synStatement">&gt;()</span><br>    <span class="synStatement">let</span> <span class="synIdentifier">awaitMsg</span> <span class="synStatement">=</span> <span class="synStatement">new</span> AutoResetEvent<span class="synStatement">(</span><span class="synConstant">false</span><span class="synStatement">)</span><br>',
  go:
    '<span class="synStatement">package</span> main<br><br><span class="synStatement">import</span> <span class="synConstant">"fmt"</span><br><br><span class="synStatement">func</span> main() {<br>    ch := <span class="synStatement">make</span>(<span class="synType">chan</span> <span class="synType">float64</span>)<br>    ch &lt;- <span class="synConstant">1</span>.<span class="synConstant">0e10</span>    <span class="synComment">// magic number</span><br>    x, ok := &lt;-<span class="synError"> </span>ch<br>    <span class="synStatement">defer</span> fmt.Println(<span class="synConstant">`exitting now\\`</span>)<br>    <span class="synStatement">go</span> <span class="synStatement">println</span>(<span class="synStatement">len</span>(<span class="synConstant">"hello world!"</span>))<br>    <span class="synStatement">return</span><br>}<br>',
  groovy:
    '<span class="synComment">#!/usr/bin/env groovy</span><br><span class="synPreProc">package</span> model<br><br><span class="synPreProc">import</span> groovy.transform.CompileStatic<br><span class="synPreProc">import</span> java.util.<span class="synType">List</span> <span class="synSpecial">as</span> MyList<br><br>trait Distributable {<br>    <span class="synType">void</span> distribute(<span class="synType">String</span> version) {}<br>}<br><br>@CompileStatic<br><span class="synType">class</span> Distribution <span class="synType">implements</span> Distributable {<br>    <span class="synType">double</span> number = <span class="synConstant">1234.234</span> <span class="synConstant">/ 567</span><br><span class="synConstant">    def otherNumber = 3 /</span> <span class="synConstant">4</span><br>    <span class="synType">boolean</span> archivable = condition ?: <span class="synConstant">true</span><br>    <span class="synSpecial">def</span> ternary = a ? b : c<br>    <span class="synType">String</span> name = <span class="synConstant">"Guillaume"</span><br>    Closure description = <span class="synConstant">null</span><br>    <span class="synType">List</span>&lt;DownloadPackage&gt; packages = []<br>    <span class="synType">String</span> regex = ~<span class="synConstant">/.*foo.*/</span><br>    <span class="synType">String</span> multi = <span class="synConstant">\'\'\'</span><br><span class="synConstant">        multi line string</span><br><span class="synConstant">    \'\'\'</span> + <span class="synConstant">"""</span><br><span class="synConstant">        now with double quotes and </span><span class="synIdentifier">${gstring}</span><br><span class="synConstant">    """</span> + $/<br>        even with dollar slashy strings<br>    <span class="synConstant">/$</span><br><br><span class="synConstant">    /</span>**<br>     * description method<br>     * @param cl the closure<br>     */<br>    <span class="synType">void</span> description(Closure cl) { <span class="synType">this</span>.description = cl }<br><br>    <span class="synType">void</span> version(<span class="synType">String</span> name, Closure versionSpec) {<br>        <span class="synSpecial">def</span> closure = { <span class="synIdentifier">println</span> <span class="synConstant">"hi"</span> } <span class="synSpecial">as</span> Runnable<br><br>        MyList ml = [<span class="synConstant">1</span>, <span class="synConstant">2</span>, [a: <span class="synConstant">1</span>, b:<span class="synConstant">2</span>,c :<span class="synConstant">3</span>]]<br>        <span class="synStatement">for</span> (ch <span class="synSpecial">in</span> <span class="synConstant">"name"</span>) {}<br><br>        <span class="synComment">// single line comment</span><br>        DownloadPackage pkg = <span class="synStatement">new</span> DownloadPackage(version: name)<br><br>        check that: <span class="synConstant">true</span><br><br><span class="synStatement">        label</span>:<br>        <span class="synSpecial">def</span> clone = versionSpec.rehydrate(pkg, pkg, pkg)<br>        <span class="synConstant">/*</span><br><span class="synConstant">            now clone() in a multiline comment</span><br><span class="synConstant">        */</span><br>        clone()<br>        packages.add(pkg)<br><br>        <span class="synStatement">assert</span> <span class="synConstant">4</span> <span class="synConstant">/ 2 == 2</span><br><span class="synConstant">    }</span><br><span class="synConstant">}</span><br>',
  haml:
    '<span class="synPreProc">!!! XML</span><br><span class="synSpecial">%</span><span class="synStatement">html</span><br>  <span class="synSpecial">%</span><span class="synStatement">body</span><br>    <span class="synSpecial">%</span><span class="synStatement">h1</span><span class="synSpecial">.</span><span class="synType">jumbo</span><span class="synSpecial">{</span><span class="synConstant">:id</span>=&gt;<span class="synSpecial">"</span><span class="synConstant">a</span><span class="synSpecial">"</span>, <span class="synConstant">:style</span>=&gt;<span class="synSpecial">\'</span><span class="synConstant">font-weight: normal</span><span class="synSpecial">\'</span>, <span class="synConstant">:title</span>=&gt;title<span class="synSpecial">}</span> highlight.js<br>    <span class="synComment">/html comment</span><br><span class="synComment">    -# ignore this line</span><br>    <span class="synSpecial">%</span><span class="synStatement">ul</span><span class="synSpecial">(</span><span class="synType">style</span>=<span class="synConstant">\'margin: 0\'</span><span class="synSpecial">)</span><br>    <span class="synSpecial">-</span>items.each <span class="synStatement">do</span> |<span class="synIdentifier">i</span>|<br>      <span class="synSpecial">%</span><span class="synStatement">i</span><span class="synSpecial">=</span> i<br>    <span class="synSpecial">=</span> variable<br>    <span class="synSpecial">=</span>variable2<br>    <span class="synSpecial">~</span> variable3<br>    <span class="synSpecial">~</span>variable4<br>    The current year is <span class="synSpecial">#{</span><span class="synType">DataTime</span>.now.year<span class="synSpecial">}</span>.<br>',
  haskell:
    '<span class="synSpecial">{-# LANGUAGE TypeSynonymInstances #-}</span><br><span class="synType">module</span> Network.UDP<br>( DataPacket(<span class="synStatement">..</span>)<br>, openBoundUDPPort<br>, openListeningUDPPort<br>, pingUDPPort<br>, sendUDPPacketTo<br>, recvUDPPacket<br>, recvUDPPacketFrom<br>) <span class="synType">where</span><br><br><span class="synPreProc">import</span> <span class="synPreProc">qualified</span> Data.ByteString <span class="synPreProc">as</span> Strict (ByteString, concat, singleton)<br><span class="synPreProc">import</span> <span class="synPreProc">qualified</span> Data.ByteString.Lazy <span class="synPreProc">as</span> Lazy (ByteString, toChunks, fromChunks)<br><span class="synPreProc">import</span> Data.ByteString.Char8 (pack, unpack)<br><span class="synPreProc">import</span> Network.Socket <span class="synPreProc">hiding</span> (sendTo, recv, recvFrom)<br><span class="synPreProc">import</span> Network.Socket.ByteString (sendTo, recv, recvFrom)<br><br><span class="synComment">-- Type class for converting StringLike types to and from strict ByteStrings</span><br><span class="synType">class</span> DataPacket a <span class="synType">where</span><br>  toStrictBS <span class="synStatement">::</span> a <span class="synStatement">-&gt;</span> Strict.ByteString<br>  fromStrictBS <span class="synStatement">::</span> Strict.ByteString <span class="synStatement">-&gt;</span> a<br><br><span class="synType">instance</span> DataPacket Strict.ByteString <span class="synType">where</span><br>  toStrictBS <span class="synStatement">=</span> id<br>  <span class="synSpecial">{-# INLINE toStrictBS #-}</span><br>  fromStrictBS <span class="synStatement">=</span> id<br>  <span class="synSpecial">{-# INLINE fromStrictBS #-}</span><br><br>openBoundUDPPort <span class="synStatement">::</span> String <span class="synStatement">-&gt;</span> Int <span class="synStatement">-&gt;</span> IO Socket<br>openBoundUDPPort uri port <span class="synStatement">=</span> <span class="synStatement">do</span><br>  s <span class="synStatement">&lt;-</span> getUDPSocket<br>  bindAddr <span class="synStatement">&lt;-</span> inet_addr uri<br>  <span class="synStatement">let</span> a <span class="synStatement">=</span> SockAddrInet (toEnum port) bindAddr<br>  bindSocket s a<br>  return s<br><br>pingUDPPort <span class="synStatement">::</span> Socket <span class="synStatement">-&gt;</span> SockAddr <span class="synStatement">-&gt;</span> IO ()<br>pingUDPPort s a <span class="synStatement">=</span> sendTo s (Strict.singleton <span class="synConstant">0</span>) a <span class="synStatement">&gt;&gt;</span> return ()<br>',
  haxe:
    '<span class="synStatement">package</span> my<span class="synStatement">.package</span><span class="synIdentifier">;</span><br><br><span class="synPreProc">#if</span> js<br><span class="synStatement">import</span> js<span class="synStatement">.</span><span class="synType">Browser</span><span class="synIdentifier">;</span><br><span class="synPreProc">#elseif</span> sys<br><span class="synStatement">import</span> <span class="synType">Sys</span><span class="synIdentifier">;</span><br><span class="synPreProc">#else</span><br><span class="synStatement">import</span> <span class="synType">Date</span><span class="synIdentifier">;</span><br><span class="synPreProc">#end</span><br><br><span class="synStatement">import</span> <span class="synType">Lambda</span><span class="synIdentifier">;</span><br><span class="synStatement">using</span> <span class="synType">Main</span><span class="synStatement">.</span><span class="synType">IntExtender</span><span class="synIdentifier">;</span><br><br><span class="synType">extern</span> <span class="synStatement">class</span> <span class="synType">Math</span> {<br>    <span class="synType">static</span> <span class="synStatement">var</span> <span class="synType">PI</span>(<span class="synConstant">default</span><span class="synIdentifier">,</span><span class="synConstant">null</span>) <span class="synStatement">:</span> <span class="synType">Float</span><span class="synIdentifier">;</span><br>    <span class="synType">static</span> <span class="synIdentifier">function</span> floor(v<span class="synStatement">:</span><span class="synType">Float</span>)<span class="synStatement">:</span><span class="synType">Int</span><span class="synIdentifier">;</span><br>}<br><br><span class="synComment">/**</span><br><span class="synComment"> * Abstract forwarding</span><br><span class="synComment"> */</span><br><span class="synStatement">abstract</span> <span class="synType">MyAbstract</span>(<span class="synType">Int</span>) <span class="synStatement">from</span> <span class="synType">Int</span> <span class="synStatement">to</span> <span class="synType">Int</span> {<br>    <span class="synType">inline</span> <span class="synIdentifier">function</span> <span class="synIdentifier">new</span>(i<span class="synStatement">:</span><span class="synType">Int</span>) {<br>        <span class="synConstant">this</span> <span class="synStatement">=</span> i<span class="synIdentifier">;</span><br>    }<br><br>    <span class="synIdentifier">@:op</span>(<span class="synType">A</span> <span class="synStatement">*</span> <span class="synType">B</span>)<br>    <span class="synType">public</span> <span class="synIdentifier">function</span> multiply(rhs<span class="synStatement">:</span><span class="synType">MyAbstract</span>) {<br>        <span class="synStatement">return</span> <span class="synConstant">this</span> <span class="synStatement">*</span> rhs<span class="synIdentifier">;</span><br>    }<br>}<br><br><span class="synComment">// an enum</span><br><span class="synStatement">enum</span> <span class="synType">Color</span> {<br>    <span class="synType">Red</span><span class="synIdentifier">;</span><br>    <span class="synType">Green</span><span class="synIdentifier">;</span><br>    <span class="synType">Blue</span><span class="synIdentifier">;</span><br>    <span class="synType">Rgb</span>(r<span class="synStatement">:</span><span class="synType">Int</span><span class="synIdentifier">,</span> g<span class="synStatement">:</span><span class="synType">Int</span><span class="synIdentifier">,</span> b<span class="synStatement">:</span><span class="synType">Int</span>)<span class="synIdentifier">;</span><br>}<br><br><span class="synIdentifier">@:generic</span><br><span class="synStatement">class</span> <span class="synType">Gen</span><span class="synStatement">&lt;</span><span class="synType">T</span><span class="synStatement">&gt;</span> {<br>    <span class="synStatement">var</span> v<span class="synStatement">:</span><span class="synType">T</span><span class="synIdentifier">;</span><br>    <span class="synType">public</span> <span class="synIdentifier">function</span> <span class="synIdentifier">new</span>(v<span class="synStatement">:</span><span class="synType">T</span>) {<br>        <span class="synConstant">this</span><span class="synStatement">.</span>v <span class="synStatement">=</span> v<span class="synIdentifier">;</span><br>    }<br><br>    <span class="synType">public</span> <span class="synStatement">var</span> x(<span class="synConstant">get</span><span class="synIdentifier">,</span> <span class="synConstant">set</span>)<span class="synStatement">:</span><span class="synType">T</span><span class="synIdentifier">;</span><br><br>    <span class="synType">private</span> <span class="synType">inline</span> <span class="synIdentifier">function</span> get_x()<span class="synStatement">:</span><span class="synType">T</span><br>        <span class="synStatement">return</span> v<span class="synIdentifier">;</span><br><br>    <span class="synType">private</span> <span class="synType">inline</span> <span class="synIdentifier">function</span> set_x(x<span class="synStatement">:</span><span class="synType">T</span>)<span class="synStatement">:</span><span class="synType">T</span><br>        <span class="synStatement">return</span> v <span class="synStatement">=</span> x<span class="synIdentifier">;</span><br>}<br><br><span class="synStatement">class</span> <span class="synType">Main</span> <span class="synType">extends</span> <span class="synType">BaseClass</span> <span class="synType">implements</span> <span class="synType">SomeFunctionality</span> {<br>    <span class="synStatement">var</span> callback<span class="synStatement">:</span><span class="synType">Void</span><span class="synStatement">-&gt;</span><span class="synType">Void</span> <span class="synStatement">=</span> <span class="synConstant">null</span><span class="synIdentifier">;</span><br>    <span class="synStatement">var</span> myArray<span class="synStatement">:</span><span class="synType">Array</span><span class="synStatement">&lt;</span><span class="synType">Float</span><span class="synStatement">&gt;</span> <span class="synStatement">=</span> <span class="synIdentifier">new</span> <span class="synType">Array</span><span class="synStatement">&lt;</span><span class="synType">Float</span><span class="synStatement">&gt;</span>()<span class="synIdentifier">;</span><br>    <span class="synStatement">var</span> arr <span class="synStatement">=</span> [<span class="synConstant">4</span><span class="synIdentifier">,</span><span class="synConstant">8</span><span class="synIdentifier">,</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">3</span><span class="synIdentifier">,</span><span class="synConstant">9</span><span class="synIdentifier">,</span><span class="synConstant">1</span><span class="synIdentifier">,</span><span class="synConstant">5</span><span class="synIdentifier">,</span><span class="synConstant">2</span><span class="synIdentifier">,</span><span class="synConstant">6</span><span class="synIdentifier">,</span><span class="synConstant">7</span>]<span class="synIdentifier">;</span><br><br>    <span class="synType">public</span> <span class="synIdentifier">function</span> <span class="synIdentifier">new</span>(x) {<br>        <span class="synConstant">super</span>(x)<span class="synIdentifier">;</span><br>    }<br><br>    <span class="synType">public</span> <span class="synType">static</span> <span class="synIdentifier">function</span> main() {<br>        <span class="synStatement">trace</span>(<span class="synConstant">\'What</span><span class="synSpecial">\\\'</span><span class="synConstant">s up?\'</span>)<span class="synIdentifier">;</span><br>        <span class="synStatement">trace</span>(<span class="synConstant">\'Hi, </span>${name}<span class="synConstant">!\'</span>)<span class="synIdentifier">;</span><br><br>        <span class="synComment">// switch statements!</span><br>        <span class="synStatement">var</span> c<span class="synStatement">:</span><span class="synType">Color</span> <span class="synStatement">=</span> <span class="synType">Color</span><span class="synStatement">.</span><span class="synType">Green</span><span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> x<span class="synStatement">:</span><span class="synType">Int</span> <span class="synStatement">=</span> <span class="synStatement">switch</span>(c) {<br>            <span class="synStatement">case</span> <span class="synType">Red</span><span class="synStatement">:</span> <span class="synConstant">0</span><span class="synIdentifier">;</span><br>            <span class="synStatement">case</span> <span class="synType">Green</span><span class="synStatement">:</span> <span class="synConstant">1</span><span class="synIdentifier">;</span><br>            <span class="synStatement">case</span> <span class="synType">Blue</span><span class="synStatement">:</span> <span class="synConstant">2</span><span class="synIdentifier">;</span><br>            <span class="synStatement">case</span> <span class="synType">Rgb</span>(r<span class="synIdentifier">,</span> g<span class="synIdentifier">,</span> b)<span class="synStatement">:</span> <span class="synConstant">3</span><span class="synIdentifier">;</span><br>            <span class="synStatement">case</span> _<span class="synStatement">:</span> <span class="synStatement">-</span><span class="synConstant">1</span><span class="synIdentifier">;</span><br>        }<br><br>        <span class="synStatement">for</span>(i <span class="synStatement">in</span> <span class="synConstant">0</span><span class="synStatement">...</span><span class="synConstant">3</span>) {<br>            <span class="synStatement">trace</span>(i)<span class="synIdentifier">;</span><br>            <span class="synStatement">continue</span><span class="synIdentifier">;</span><br>            <span class="synStatement">break</span><span class="synIdentifier">;</span><br>        }<br><br>        <span class="synStatement">do</span> {<br>            <span class="synStatement">trace</span>(<span class="synConstant">"Hey-o!"</span>)<span class="synIdentifier">;</span><br>        } <span class="synStatement">while</span>(<span class="synConstant">false</span>)<span class="synIdentifier">;</span><br><br>        <span class="synStatement">var</span> done<span class="synStatement">:</span><span class="synType">Bool</span> <span class="synStatement">=</span> <span class="synConstant">false</span><span class="synIdentifier">;</span><br>        <span class="synStatement">while</span>(<span class="synStatement">!</span>done) {<br>            done <span class="synStatement">=</span> <span class="synConstant">true</span><span class="synIdentifier">;</span><br>        }<br><br>        <span class="synStatement">var</span> <span class="synType">H</span><span class="synStatement">:</span><span class="synType">Int</span> <span class="synStatement">=</span> <span class="synStatement">cast</span> <span class="synIdentifier">new</span> <span class="synType">MyAbstract</span>(<span class="synConstant">42</span>)<span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> h<span class="synStatement">:</span><span class="synType">Int</span> <span class="synStatement">=</span> <span class="synStatement">cast</span>(<span class="synIdentifier">new</span> <span class="synType">MyAbstract</span>(<span class="synConstant">31</span>)<span class="synIdentifier">,</span> <span class="synType">Int</span>)<span class="synIdentifier">;</span><br><br>        <span class="synStatement">try</span> {<br>            <span class="synStatement">throw</span> <span class="synConstant">"error"</span><span class="synIdentifier">;</span><br>        }<br>        <span class="synStatement">catch</span>(err<span class="synStatement">:</span><span class="synType">String</span>) {<br>            <span class="synStatement">trace</span>(err)<span class="synIdentifier">;</span><br>        }<br>        <br>        <span class="synStatement">var</span> map <span class="synStatement">=</span> <span class="synIdentifier">new</span> haxe<span class="synStatement">.</span>ds<span class="synStatement">.</span><span class="synType">IntMap</span><span class="synStatement">&lt;</span><span class="synType">String</span><span class="synStatement">&gt;</span>()<span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> f <span class="synStatement">=</span> map<span class="synStatement">.</span><span class="synConstant">set</span><span class="synStatement">.</span>bind(_<span class="synIdentifier">,</span> <span class="synConstant">"12"</span>)<span class="synIdentifier">;</span><br>    }<br><br>    <span class="synIdentifier">function</span> nothing()<span class="synStatement">:</span><span class="synType">Void</span><br>        <span class="synStatement">trace</span>(<span class="synConstant">"nothing!"</span>)<span class="synIdentifier">;</span><br><br>    <span class="synType">private</span> <span class="synType">inline</span> <span class="synIdentifier">function</span> func(a<span class="synStatement">:</span><span class="synType">Int</span><span class="synIdentifier">,</span> b<span class="synStatement">:</span><span class="synType">Float</span><span class="synIdentifier">,</span> <span class="synStatement">?</span>c<span class="synStatement">:</span><span class="synType">String</span><span class="synIdentifier">,</span> d<span class="synStatement">:</span><span class="synType">Bool</span><span class="synStatement">=</span><span class="synConstant">false</span>)<span class="synStatement">:</span><span class="synType">Dynamic</span> {<br>        <span class="synStatement">return</span> {<br>            x<span class="synStatement">:</span> <span class="synConstant">0</span><span class="synIdentifier">,</span><br>            y<span class="synStatement">:</span> <span class="synConstant">true</span><span class="synIdentifier">,</span><br>            z<span class="synStatement">:</span> <span class="synConstant">false</span><span class="synIdentifier">,</span><br>            a<span class="synStatement">:</span> <span class="synConstant">1</span><span class="synStatement">.</span><span class="synConstant">53</span><span class="synIdentifier">,</span><br>            b<span class="synStatement">:</span> 5e10<span class="synIdentifier">,</span><br>            c<span class="synStatement">:</span> <span class="synStatement">-</span><span class="synConstant">12</span><span class="synIdentifier">,</span><br>            h<span class="synStatement">:</span> <span class="synConstant">null</span><br>        }<span class="synIdentifier">;</span><br>    }<br><br><br>    <span class="synType">override</span> <span class="synIdentifier">function</span> quicksort( lo <span class="synStatement">:</span> <span class="synType">Int</span><span class="synIdentifier">,</span> hi <span class="synStatement">:</span> <span class="synType">Int</span> ) <span class="synStatement">:</span> <span class="synType">Void</span> {<br>        <span class="synStatement">var</span> i <span class="synStatement">=</span> lo<span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> j <span class="synStatement">=</span> hi<span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> buf <span class="synStatement">=</span> arr<span class="synIdentifier">;</span><br>        <span class="synStatement">var</span> p <span class="synStatement">=</span> buf[(lo<span class="synStatement">+</span>hi)<span class="synStatement">&gt;&gt;</span><span class="synConstant">1</span>]<span class="synIdentifier">;</span><br>        <span class="synStatement">while</span>( i <span class="synStatement">&lt;=</span> j ) {<br>            <span class="synStatement">while</span>( arr[i] <span class="synStatement">&gt;</span> p ) i<span class="synStatement">++</span><span class="synIdentifier">;</span><br>            <span class="synStatement">while</span>( arr[j] <span class="synStatement">&lt;</span> p ) j<span class="synStatement">--</span><span class="synIdentifier">;</span><br>            <span class="synStatement">if</span>( i <span class="synStatement">&lt;=</span> j ) {<br>                <span class="synStatement">var</span> t <span class="synStatement">=</span> buf[i]<span class="synIdentifier">;</span><br>                buf[i<span class="synStatement">++</span>] <span class="synStatement">=</span> buf[j]<span class="synIdentifier">;</span><br>                buf[j<span class="synStatement">--</span>] <span class="synStatement">=</span> t<span class="synIdentifier">;</span><br>            }<br>        }<br>        <span class="synStatement">if</span>( lo <span class="synStatement">&lt;</span> j ) quicksort( lo<span class="synIdentifier">,</span> j )<span class="synIdentifier">;</span><br>        <span class="synStatement">if</span>( i <span class="synStatement">&lt;</span> hi ) quicksort( i<span class="synIdentifier">,</span> hi )<span class="synIdentifier">;</span><br>    }<br>}<br>',
  java:
    '<span class="synComment">/**</span><br><span class="synComment"> * </span><span class="synSpecial">@author</span><span class="synComment"> John Smith </span><span class="synIdentifier">&lt;</span>john<span class="synIdentifier">.smith@example.com&gt;</span><br><span class="synComment">*/</span><br><span class="synPreProc">package</span> l2f.gameserver.model;<br><br><span class="synType">public</span> <span class="synType">abstract</span> <span class="synType">class</span> L2Char <span class="synType">extends</span> L2Object {<br>  <span class="synType">public</span> <span class="synType">static</span> <span class="synType">final</span> Short ERROR = <span class="synConstant">0x0001</span>;<br><br>  <span class="synType">public</span> <span class="synType">void</span> moveTo(<span class="synType">int</span> x, <span class="synType">int</span> y, <span class="synType">int</span> z) {<br>    _ai = <span class="synConstant">null</span>;<br>    log(<span class="synConstant">"Should not be called"</span>);<br>    <span class="synStatement">if</span> (<span class="synConstant">1</span> &gt; <span class="synConstant">5</span>) { <span class="synComment">// wtf!?</span><br>      <span class="synStatement">return</span>;<br>    }<br>  }<br>}<br>',
  javascript:
    '<span class="synIdentifier">function</span> $initHighlight(block, cls) <span class="synIdentifier">{</span><br>  <span class="synStatement">try</span> <span class="synIdentifier">{</span><br>    <span class="synStatement">if</span> (cls.search(<span class="synConstant">/\\bno\\-highlight\\b/</span>) != -1)<br>      <span class="synStatement">return</span> process(block, <span class="synConstant">true</span>, 0x0F) +<br>             ` <span class="synStatement">class</span>=<span class="synConstant">"${cls}"</span>`;<br>  <span class="synIdentifier">}</span> <span class="synStatement">catch</span> (e) <span class="synIdentifier">{</span><br>    <span class="synComment">/* handle exception */</span><br>  <span class="synIdentifier">}</span><br>  <span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0 / 2; i &lt; classes.length; i++) <span class="synIdentifier">{</span><br>    <span class="synStatement">if</span> (checkCondition(classes<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>) === <span class="synStatement">undefined</span>)<br>      console.log(<span class="synConstant">\'undefined\'</span>);<br>  <span class="synIdentifier">}</span><br><span class="synIdentifier">}</span><br><br><span class="synStatement">export</span>  $initHighlight;<br>',
  julia:
    '<span class="synComment">### Types</span><br><br><span class="synComment"># Old-style definitions</span><br><br><span class="synStatement">immutable</span> Point{T&lt;:AbstractFloat}<br>    index::<span class="synType">Int</span><br>    x::T<br>    y::T<br><span class="synStatement">end</span><br><br><span class="synType">abstract</span> A<br><br><span class="synStatement">type</span> B &lt;: A <span class="synStatement">end</span><br><br><span class="synType">typealias</span> P Point{<span class="synType">Float16</span>}<br><br><span class="synComment"># New-style definitions</span><br><br>struct Plus<br>    f::typeof(+)<br><span class="synError">end</span><br><br>mutable struct Mut<br>    mutable::A          <span class="synComment"># mutable should not be highlighted (not followed by struct)</span><br>    primitive::B        <span class="synComment"># primitive should not be highlighted (not followed by type)</span><br><span class="synError">end</span><br><br>primitive <span class="synStatement">type</span> Prim <span class="synConstant">8</span> <span class="synStatement">end</span><br><br><span class="synType">abstract</span> <span class="synStatement">type</span> Abstr <span class="synStatement">end</span><br><br><span class="synComment">### Modules</span><br><br><span class="synStatement">module</span> M<br><br><span class="synStatement">using</span> X<br><span class="synStatement">import</span> Y<br><span class="synStatement">importall</span> Z<br><br><span class="synStatement">export</span> a, b, c<br><br><span class="synStatement">end</span> <span class="synComment"># module</span><br><br><span class="synStatement">baremodule</span> Bare<br><span class="synStatement">end</span><br><br><span class="synComment">### New in 0.6</span><br><br><span class="synComment"># where, infix isa, UnionAll</span><br><span class="synStatement">function</span> F{T}(x::T) where T<br>    <span class="synStatement">for</span> i <span class="synStatement">in</span> x<br>        i isa UnionAll &amp;&amp; <span class="synStatement">return</span><br>    <span class="synStatement">end</span><br><span class="synStatement">end</span><br><br><span class="synComment">### Miscellaneous</span><br><br><span class="synComment">#=</span><br><span class="synComment">Multi</span><br><span class="synComment">Line</span><br><span class="synComment">Comment</span><br><span class="synComment">=#</span><br><span class="synStatement">function</span> method0(x, y::<span class="synType">Int</span>; version::<span class="synType">VersionNumber</span>=<span class="synConstant">v"0.1.2"</span>)<br>    <span class="synConstant">"""</span><br><span class="synConstant">    Triple</span><br><span class="synConstant">    Quoted</span><br><span class="synConstant">    String</span><br><span class="synConstant">    """</span><br><br>    <span class="synPreProc">@assert</span> <span class="synConstant">π</span> &gt; <span class="synConstant">e</span><br><br>    s = <span class="synConstant">1.2</span><br>    変数 = <span class="synConstant">"variable"</span><br><br>    <span class="synStatement">if</span> s * <span class="synConstant">100_000</span> ≥ <span class="synConstant">5.2e+10</span> &amp;&amp; <span class="synConstant">true</span> || x === <span class="synConstant">nothing</span><br>        s = <span class="synConstant">1.</span> + <span class="synConstant">.5im</span><br>    <span class="synStatement">elseif</span> <span class="synConstant">1</span> ∈ [<span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span>]<br>        println(<span class="synConstant">"s is </span><span class="synIdentifier">$s</span><span class="synConstant"> and 変数 is $変数"</span>)<br>    <span class="synStatement">else</span><br>        x = [<span class="synConstant">1</span> <span class="synConstant">2</span> <span class="synConstant">3</span>; <span class="synConstant">4</span> <span class="synConstant">5</span> <span class="synConstant">6</span>]<br>        <span class="synPreProc">@show</span> x\'<br>    <span class="synStatement">end</span><br><br>    <span class="synStatement">local</span> var = rand(<span class="synConstant">10</span>)<br>    <span class="synStatement">global</span> g = <span class="synConstant">44</span><br>    var[<span class="synConstant">1</span>:<span class="synConstant">5</span>]<br>    var[<span class="synConstant">5</span>:<span class="synConstant">end</span>-<span class="synConstant">1</span>]<br>    var[<span class="synConstant">end</span>]<br><br>    opt = <span class="synConstant">"-la"</span><br>    run(<span class="synConstant">`ls </span><span class="synIdentifier">$opt</span><span class="synConstant">`</span>)<br><br>    <span class="synStatement">try</span><br>        ccall(:lib, (<span class="synType">Ptr</span>{<span class="synType">Void</span>},), Ref{<span class="synConstant">C_NULL</span>})<br>    <span class="synStatement">catch</span><br>        throw(<span class="synType">ArgumentError</span>(<span class="synConstant">"wat"</span>))<br>    <span class="synStatement">finally</span><br>        warn(<span class="synConstant">"god save the queen"</span>)<br>    <span class="synStatement">end</span><br><br>    <span class="synConstant">\'</span><span class="synSpecial">\\u2200</span><span class="synConstant">\'</span> != <span class="synConstant">\'T\'</span><br><br>    <span class="synStatement">return</span> <span class="synConstant">5</span>s / <span class="synConstant">2</span><br><span class="synStatement">end</span><br>',
  kotlin:
    '<span class="synPreProc">import</span> kotlin.lang.test<br><br>trait A {<br>    <span class="synType">fun</span> x()<br>}<br><br><span class="synType">fun</span> xxx() : <span class="synType">Int</span> {<br>    <span class="synStatement">return</span> <span class="synConstant">888</span><br>}<br><br><span class="synType">public</span> <span class="synType">fun</span> main(args : Array&lt;String&gt;) {<br>}<br>',
  ldif:
    '<span class="synComment"># Example LDAP user</span><br><span class="synType">dn</span>: <span class="synConstant">uid=user.0,ou=People,dc=example,dc=com</span><br><span class="synType">objectClass</span>: <span class="synConstant">top</span><br><span class="synType">objectClass</span>: <span class="synConstant">person</span><br><span class="synType">objectClass</span>: <span class="synConstant">organizationalPerson</span><br><span class="synType">objectClass</span>: <span class="synConstant">inetOrgPerson</span><br><span class="synType">givenName</span>: <span class="synConstant">Morris</span><br><span class="synType">sn</span>: <span class="synConstant">Day</span><br><span class="synType">cn</span>: <span class="synConstant">Morris Day</span><br><span class="synType">initials</span>: <span class="synConstant">MD</span><br><span class="synType">employeeNumber</span>: <span class="synConstant">0</span><br><span class="synType">uid</span>: <span class="synConstant">user.0</span><br><span class="synType">mail</span>: <span class="synConstant">user.0@example.com</span><br><span class="synType">userPassword</span>: <span class="synConstant">password</span><br><span class="synType">telephoneNumber</span>: <span class="synConstant">+1 042 100 3866</span><br><span class="synType">homePhone</span>: <span class="synConstant">+1 039 680 4135</span><br><span class="synType">pager</span>: <span class="synConstant">+1 284 199 0966</span><br><span class="synType">mobile</span>: <span class="synConstant">+1 793 707 0251</span><br><span class="synType">street</span>: <span class="synConstant">90280 Spruce Street</span><br><span class="synType">l</span>: <span class="synConstant">Minneapolis</span><br><span class="synType">st</span>: <span class="synConstant">MN</span><br><span class="synType">postalCode</span>: <span class="synConstant">50401</span><br><span class="synType">postalAddress</span>: <span class="synConstant">Morris Day$90280 Spruce Street$Minneapolis, MN  50401</span><br><span class="synType">description</span>: <span class="synConstant">This is the description for Morris Day.</span><br>',
  lisp:
    '#!/usr/bin/env csi<br><br><span class="synSpecial">(</span><span class="synStatement">defun</span> prompt-for-cd <span class="synSpecial">()</span><br>   <span class="synConstant">"Prompts</span><br><span class="synConstant">    for CD"</span><br>   <span class="synSpecial">(</span>prompt-read <span class="synConstant">"Title"</span> <span class="synConstant">1.53</span> <span class="synConstant">1</span> <span class="synConstant">2/4</span> <span class="synConstant">1.7</span> <span class="synConstant">1.7e0</span> <span class="synConstant">2.9E-4</span> +42 <span class="synConstant">-7</span> <span class="synType">#b001</span> <span class="synType">#b001</span>/100 <span class="synType">#o777</span> <span class="synType">#O777</span> <span class="synType">#xabc55</span> #c<span class="synSpecial">(</span><span class="synConstant">0</span> <span class="synConstant">-5.6</span><span class="synSpecial">))</span><br>   <span class="synSpecial">(</span>prompt-read <span class="synConstant">"Artist"</span> <span class="synType">&amp;rest</span><span class="synSpecial">)</span><br>   <span class="synSpecial">(</span><span class="synStatement">or</span> <span class="synSpecial">(</span><span class="synStatement">parse-integer</span> <span class="synSpecial">(</span>prompt-read <span class="synConstant">"Rating"</span><span class="synSpecial">)</span> <span class="synType">:junk-allowed</span> <span class="synStatement">t</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synStatement">if</span> x <span class="synSpecial">(</span><span class="synStatement">format</span> <span class="synStatement">t</span> <span class="synConstant">"yes"</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synStatement">format</span> <span class="synStatement">t</span> <span class="synConstant">"no"</span> <span class="synStatement">nil</span><span class="synSpecial">)</span> <span class="synComment">;and here comment</span><br>  <span class="synSpecial">)</span><br>  <span class="synComment">;; second line comment</span><br>  <span class="synSpecial">\'(</span><span class="synStatement">+</span> 1 2<span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synStatement">defvar</span> <span class="synType">*lines*</span><span class="synSpecial">)</span>                <span class="synComment">; list of all lines</span><br>  <span class="synSpecial">(</span><span class="synStatement">position-if-not</span> <span class="synType">#\'sys::whitespacep</span> line <span class="synType">:start</span> beg<span class="synSpecial">))</span><br>  <span class="synSpecial">(</span><span class="synStatement">quote</span> <span class="synSpecial">(</span>privet <span class="synConstant">1</span> <span class="synConstant">2</span> <span class="synConstant">3</span><span class="synSpecial">))</span><br>  <span class="synSpecial">\'(</span>hello world<span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synStatement">*</span> <span class="synConstant">5</span> <span class="synConstant">7</span><span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synConstant">1</span> <span class="synConstant">2</span> <span class="synConstant">34</span> <span class="synConstant">5</span><span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synType">:use</span> <span class="synConstant">"aaaa"</span><span class="synSpecial">)</span><br>  <span class="synSpecial">(</span><span class="synStatement">let</span> <span class="synSpecial">((</span>x <span class="synConstant">10</span><span class="synSpecial">)</span> <span class="synSpecial">(</span>y <span class="synConstant">20</span><span class="synSpecial">))</span><br>    <span class="synSpecial">(</span><span class="synStatement">print</span> <span class="synSpecial">(</span><span class="synStatement">+</span> x y<span class="synSpecial">))</span><br>  <span class="synSpecial">)</span><br>',
  lsl:
    '<span class="synStatement">default</span><br><span class="synSpecial">{</span><br>    <span class="synPreProc">state_entry</span><span class="synSpecial">()</span><br>    <span class="synSpecial">{</span><br>        <span class="synIdentifier">llSay</span><span class="synSpecial">(</span><span class="synConstant">PUBLIC_CHANNEL</span>, <span class="synConstant">"Hello, Avatar!"</span><span class="synSpecial">)</span>;<br>    <span class="synSpecial">}</span><br><br>    <span class="synPreProc">touch_start</span><span class="synSpecial">(</span><span class="synType">integer</span> num_detected<span class="synSpecial">)</span><br>    <span class="synSpecial">{</span><br>        <span class="synIdentifier">llSay</span><span class="synSpecial">(</span><span class="synConstant">PUBLIC_CHANNEL</span>, <span class="synConstant">"Touched."</span><span class="synSpecial">)</span>;<br>    <span class="synSpecial">}</span><br><span class="synSpecial">}</span><br>',
  lua:
    '<span class="synComment">--[[</span><br><span class="synComment">Simple signal/slot implementation</span><br><span class="synComment">]]</span><br><span class="synStatement">local</span> signal_mt = <span class="synType">{</span><br>    __index = <span class="synType">{</span><br>        register = <span class="synIdentifier">table.insert</span><br>    <span class="synType">}</span><br><span class="synType">}</span><br><span class="synIdentifier">function</span> signal_mt.__index:emit(... <span class="synComment">--[[ Comment in params ]]</span>)<br>    <span class="synStatement">for</span> _, slot <span class="synStatement">in</span> <span class="synIdentifier">ipairs</span>(self) <span class="synStatement">do</span><br>        slot(self, ...)<br>    <span class="synStatement">end</span><br><span class="synIdentifier">end</span><br><span class="synStatement">local</span> <span class="synIdentifier">function</span> create_signal()<br>    <span class="synStatement">return</span> <span class="synIdentifier">setmetatable</span>(<span class="synType">{}</span>, signal_mt)<br><span class="synIdentifier">end</span><br><br><span class="synComment">-- Signal test</span><br><span class="synStatement">local</span> signal = create_signal()<br>signal:register(<span class="synIdentifier">function</span>(signal, ...)<br>    <span class="synIdentifier">print</span>(...)<br><span class="synIdentifier">end</span>)<br>signal:emit(<span class="synConstant">\'Answer to Life, the Universe, and Everything:\'</span>, <span class="synConstant">42</span>)<br><br><span class="synComment">--[==[ [=[ [[</span><br><span class="synComment">Nested ]]</span><br><span class="synComment">multi-line ]=]</span><br><span class="synComment">comment ]==]</span><br><span class="synConstant">[==[ Nested</span><br><span class="synConstant">[=[ multi-line</span><br><span class="synConstant">[[ string</span><br><span class="synConstant">]] ]=] ]==]</span><br>',
  markdown:
    '<span class="synSpecial">#</span> hello world<br><br>you can write text [<span class="synUnderlined">with links</span>](<span class="synConstant">http://example.com</span>) inline or [<span class="synUnderlined">link references</span>][<span class="synType">1</span>].<br><br><span class="synStatement">*</span> one _thing_ has *em*phasis<br><span class="synStatement">*</span> two __things__ are **bold**<br><br>[<span class="synType">1</span>]: <span class="synConstant">http://example.com</span><br><br><span class="synPreProc">---</span><br><br>hello world<br><span class="synPreProc">===========</span><br><br><span class="synIdentifier">&lt;</span>this<span class="synIdentifier">_is inline=</span><span class="synConstant">"xml"</span><span class="synIdentifier">&gt;&lt;/</span>this<span class="synIdentifier">_is&gt;</span><br><br><span class="synComment">&gt; </span>markdown is so cool<br><br>    so are code segments<br><br><span class="synStatement">1.</span> one thing (yeah!)<br><span class="synStatement">2.</span> two thing <span class="synSpecial">`</span>i can write code<span class="synSpecial">`</span>, and <span class="synSpecial">`</span>more<span class="synSpecial">`</span> wipee!<br><br>',
  matlab:
    'n = <span class="synConstant">20</span><span class="synSpecial">;</span> <span class="synComment">% number of points</span><br>points = <span class="synIdentifier">[</span>random(<span class="synConstant">\'unid\'</span>, <span class="synConstant">100</span>, n, <span class="synConstant">1</span>), random(<span class="synConstant">\'unid\'</span>, <span class="synConstant">100</span>, n, <span class="synConstant">1</span>)<span class="synIdentifier">]</span><span class="synSpecial">;</span><br>len = <span class="synStatement">zeros</span>(<span class="synConstant">1</span>, n <span class="synStatement">-</span> <span class="synConstant">1</span>)<span class="synSpecial">;</span><br>points = sortrows(points)<span class="synSpecial">;</span><br><span class="synComment">%% Initial set of points</span><br>plot(points(:,<span class="synConstant">1</span>),points(:,<span class="synConstant">2</span>))<span class="synSpecial">;</span><br><span class="synStatement">for</span> i = <span class="synConstant">1</span>: n<span class="synStatement">-</span><span class="synConstant">1</span><br>    len(i) = points(i <span class="synStatement">+</span> <span class="synConstant">1</span>, <span class="synConstant">1</span>) <span class="synStatement">-</span> points(i, <span class="synConstant">1</span>)<span class="synSpecial">;</span><br><span class="synStatement">end</span><br><span class="synStatement">while</span>(<span class="synStatement">max</span>(len) <span class="synStatement">&gt;</span> <span class="synConstant">2</span> <span class="synStatement">*</span> <span class="synStatement">min</span>(len))<br>    <span class="synIdentifier">[</span>d, i<span class="synIdentifier">]</span> = <span class="synStatement">max</span>(len)<span class="synSpecial">;</span><br>    k = on_margin(points, i, d, <span class="synStatement">-</span><span class="synConstant">1</span>)<span class="synSpecial">;</span><br>    m = on_margin(points, i <span class="synStatement">+</span> <span class="synConstant">1</span>, d, <span class="synConstant">1</span>)<span class="synSpecial">;</span><br>    xm = <span class="synConstant">0</span><span class="synSpecial">;</span> ym = <span class="synConstant">0</span><span class="synSpecial">;</span><br><span class="synComment">%% New point</span><br>    <span class="synStatement">if</span>(i <span class="synStatement">==</span> <span class="synConstant">1</span> <span class="synStatement">||</span> i <span class="synStatement">+</span> <span class="synConstant">1</span> <span class="synStatement">==</span> n)<br>        xm = <span class="synStatement">mean</span>(points(<span class="synIdentifier">[</span>i,i<span class="synStatement">+</span><span class="synConstant">1</span><span class="synIdentifier">]</span>,<span class="synConstant">1</span>))<br>        ym = <span class="synStatement">mean</span>(points(<span class="synIdentifier">[</span>i,i<span class="synStatement">+</span><span class="synConstant">1</span><span class="synIdentifier">]</span>,<span class="synConstant">2</span>))<br>    <span class="synStatement">else</span><br>        <span class="synIdentifier">[</span>xm, ym<span class="synIdentifier">]</span> = dlg1(points(<span class="synIdentifier">[</span>k, i, i <span class="synStatement">+</span> <span class="synConstant">1</span>, m<span class="synIdentifier">]</span>, <span class="synConstant">1</span>), <span class="synComment">...</span><br>            points(<span class="synIdentifier">[</span>k, i, i <span class="synStatement">+</span> <span class="synConstant">1</span>, m<span class="synIdentifier">]</span>, <span class="synConstant">2</span>))<br>    <span class="synStatement">end</span><br><br>    points = <span class="synIdentifier">[</span> points(<span class="synConstant">1</span>:i, :)<span class="synSpecial">;</span> <span class="synIdentifier">[</span>xm, ym<span class="synIdentifier">]</span><span class="synSpecial">;</span> points(i <span class="synStatement">+</span> <span class="synConstant">1</span>:<span class="synStatement">end</span>, :)<span class="synIdentifier">]</span><span class="synSpecial">;</span><br><span class="synStatement">end</span><br><br><span class="synComment">%{</span><br><span class="synComment">    This is a block comment. Please ignore me.</span><br><span class="synComment">%}</span><br><br><span class="synIdentifier">function</span> <span class="synIdentifier">[</span>net<span class="synIdentifier">]</span> = get_fit_network(inputs, targets)<br>    <span class="synComment">% Create Network</span><br>    numHiddenNeurons = <span class="synConstant">20</span><span class="synSpecial">;</span>  <span class="synComment">% Adjust as desired</span><br>    net = newfit(inputs,targets,numHiddenNeurons)<span class="synSpecial">;</span><br>    net.trainParam.goal = <span class="synConstant">0.01</span><span class="synSpecial">;</span><br>    net.trainParam.epochs = <span class="synConstant">1000</span><span class="synSpecial">;</span><br>    <span class="synComment">% Train and Apply Network</span><br>    <span class="synIdentifier">[</span>net,tr<span class="synIdentifier">]</span> = train(net,inputs,targets)<span class="synSpecial">;</span><br><span class="synStatement">end</span><br><br>foo_matrix = <span class="synIdentifier">[</span><span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span><span class="synSpecial">;</span> <span class="synConstant">4</span>, <span class="synConstant">5</span>, <span class="synConstant">6</span><span class="synIdentifier">]</span><span class="synStatement">\'</span><span class="synConstant">\'\'</span><span class="synSpecial">;</span><br>foo_cell = {<span class="synConstant">1</span>, <span class="synConstant">2</span>, <span class="synConstant">3</span><span class="synSpecial">;</span> <span class="synConstant">4</span>, <span class="synConstant">5</span>, <span class="synConstant">6</span>}<span class="synConstant">\'\'</span>.<span class="synStatement">\'</span>.<span class="synStatement">\'</span><span class="synSpecial">;</span><br><br>cell2flatten = {<span class="synConstant">1</span>,<span class="synConstant">2</span>,<span class="synConstant">3</span>,<span class="synConstant">4</span>,<span class="synConstant">5</span>}<span class="synSpecial">;</span><br>flattenedcell = cat(<span class="synConstant">1</span>, cell2flatten{:})<span class="synSpecial">;</span><br>',
  maxima:
    '<span class="synComment">/* Maxima computer algebra system */</span><br><br><span class="synComment">/* symbolic constants */</span><br><br><span class="synIdentifier">[</span><span class="synSpecial">true</span><span class="synIdentifier">,</span> <span class="synSpecial">false</span><span class="synIdentifier">,</span> <span class="synSpecial">unknown</span><span class="synIdentifier">,</span> <span class="synSpecial">inf</span><span class="synIdentifier">,</span> minf<span class="synIdentifier">,</span> ind<span class="synIdentifier">,</span><br> und<span class="synIdentifier">,</span> %e<span class="synIdentifier">,</span> %i<span class="synIdentifier">,</span> %<span class="synSpecial">pi</span><span class="synIdentifier">,</span> %phi<span class="synIdentifier">,</span> %<span class="synSpecial">gamma</span><span class="synIdentifier">];</span><br><br><span class="synComment">/* programming keywords */</span><br><br><span class="synStatement">if</span> a <span class="synStatement">then</span> b <span class="synStatement">elseif</span> c <span class="synStatement">then</span> d <span class="synStatement">else</span> f<span class="synIdentifier">;</span><br><span class="synStatement">for</span> x<span class="synSpecial">:</span><span class="synConstant">1</span> <span class="synStatement">thru</span> <span class="synConstant">10</span> step <span class="synConstant">2</span> <span class="synStatement">do</span> <span class="synSpecial">print</span><span class="synIdentifier">(</span>x<span class="synIdentifier">);</span><br><span class="synStatement">for</span> z<span class="synSpecial">:-</span><span class="synConstant">2</span> while z <span class="synSpecial">&lt;</span> <span class="synConstant">0</span> <span class="synStatement">do</span> <span class="synSpecial">print</span><span class="synIdentifier">(</span>z<span class="synIdentifier">);</span><br><span class="synStatement">for</span> m<span class="synSpecial">:</span><span class="synConstant">0</span> unless m <span class="synSpecial">&gt;</span> <span class="synConstant">10</span> <span class="synStatement">do</span> <span class="synSpecial">print</span><span class="synIdentifier">(</span>m<span class="synIdentifier">);</span><br><span class="synStatement">for</span> x in <span class="synIdentifier">[</span><span class="synConstant">1</span><span class="synIdentifier">,</span> <span class="synConstant">2</span><span class="synIdentifier">,</span> <span class="synConstant">3</span><span class="synIdentifier">]</span> <span class="synStatement">do</span> <span class="synSpecial">print</span><span class="synIdentifier">(</span>x<span class="synIdentifier">);</span><br>foo <span class="synStatement">and</span> bar <span class="synStatement">or</span> <span class="synStatement">not</span> baz<span class="synIdentifier">;</span><br><br><span class="synComment">/* built-in variables */</span><br><br><span class="synIdentifier">[</span>_<span class="synIdentifier">,</span> __<span class="synIdentifier">,</span> %<span class="synIdentifier">,</span> %%<span class="synIdentifier">,</span> <span class="synSpecial">linel</span><span class="synIdentifier">,</span> simp<span class="synIdentifier">,</span> <span class="synSpecial">dispflag</span><span class="synIdentifier">,</span><br> stringdisp<span class="synIdentifier">,</span> lispdisp<span class="synIdentifier">,</span> %edispflag<span class="synIdentifier">];</span><br><br><span class="synComment">/* built-in functions */</span><br><br><span class="synIdentifier">[</span><span class="synSpecial">sin</span><span class="synIdentifier">,</span> <span class="synSpecial">cosh</span><span class="synIdentifier">,</span> <span class="synSpecial">exp</span><span class="synIdentifier">,</span> <span class="synSpecial">atan2</span><span class="synIdentifier">,</span> <span class="synSpecial">sqrt</span><span class="synIdentifier">,</span> <span class="synSpecial">log</span><span class="synIdentifier">,</span> struve_h<span class="synIdentifier">,</span><br> sublist_indices<span class="synIdentifier">,</span> read_array<span class="synIdentifier">];</span><br><br><span class="synComment">/* user-defined symbols */</span><br><br><span class="synIdentifier">[</span>foo<span class="synIdentifier">,</span> ?bar<span class="synIdentifier">,</span> baz%<span class="synIdentifier">,</span> quux_mumble_blurf<span class="synIdentifier">];</span><br><br><span class="synComment">/* symbols using Unicode characters */</span><br><br><span class="synIdentifier">[</span>Љ<span class="synIdentifier">,</span> Щ<span class="synIdentifier">,</span> щ<span class="synIdentifier">,</span> Ӄ<span class="synIdentifier">,</span> ЩЩЩ<span class="synIdentifier">,</span> ӃӃЉЉщ<span class="synIdentifier">];</span><br><br><span class="synComment">/* numbers */</span><br><br>ibase <span class="synSpecial">:</span> <span class="synConstant">18</span> $<br><span class="synIdentifier">[</span><span class="synConstant">0</span><span class="synIdentifier">,</span> <span class="synConstant">1234</span><span class="synIdentifier">,</span> <span class="synConstant">1234</span>.<span class="synIdentifier">,</span> 0abcdefgh<span class="synIdentifier">];</span><br><span class="synSpecial">reset</span> <span class="synIdentifier">(</span>ibase<span class="synIdentifier">)</span> $<br><span class="synIdentifier">[</span>.<span class="synConstant">54321</span><span class="synIdentifier">,</span> <span class="synConstant">3.21e+0</span><span class="synIdentifier">,</span> <span class="synConstant">12.34B56</span><span class="synIdentifier">];</span><br><br><span class="synComment">/* strings */</span><br><br>s1 <span class="synSpecial">:</span> <span class="synConstant">"</span><span class="synType">\\"</span><span class="synConstant">now</span><span class="synType">\\"</span><span class="synConstant"> is"</span><span class="synIdentifier">;</span><br>s2 <span class="synSpecial">:</span> <span class="synConstant">"the \'time\' for all good men"</span><span class="synIdentifier">;</span><br><span class="synSpecial">print</span> <span class="synIdentifier">(</span>s1<span class="synIdentifier">,</span> s2<span class="synIdentifier">,</span> <span class="synConstant">"to come to the aid"</span><span class="synIdentifier">,</span><br>  <span class="synConstant">"of their country"</span><span class="synIdentifier">);</span><br><br><span class="synComment">/* expressions */</span><br><br>foo <span class="synIdentifier">(</span>x<span class="synIdentifier">,</span> y<span class="synIdentifier">,</span> z<span class="synIdentifier">)</span> <span class="synSpecial">:=</span><br>  <span class="synStatement">if</span> x <span class="synSpecial">&gt;</span> <span class="synConstant">1</span> <span class="synSpecial">+</span> y<br>    <span class="synStatement">then</span> z <span class="synSpecial">-</span> x<span class="synSpecial">*</span>y<br>  <span class="synStatement">elseif</span> y <span class="synSpecial">&lt;=</span> <span class="synConstant">100</span><span class="synSpecial">!</span><br>    <span class="synStatement">then</span> x<span class="synSpecial">/</span><span class="synIdentifier">(</span>y <span class="synSpecial">+</span> z<span class="synIdentifier">)</span><span class="synSpecial">^</span><span class="synConstant">2</span><br>  <span class="synStatement">else</span> z <span class="synSpecial">-</span> y . x . y<span class="synIdentifier">;</span><br><br>',
  mel:
    '<span class="synIdentifier">proc</span> <span class="synType">string</span>[] getSelectedLights()<br><br>{<br>  <span class="synType">string</span> <span class="synIdentifier">$selectedLights</span>[];<br><br>  <span class="synType">string</span> <span class="synIdentifier">$select</span>[] = `ls -sl -dag -leaf`;<br><br>  <span class="synStatement">for</span> ( <span class="synIdentifier">$shape</span> <span class="synStatement">in</span> <span class="synIdentifier">$select</span> )<br>  {<br>    <span class="synComment">// Determine if this is a light.</span><br>    <span class="synComment">//</span><br>    <span class="synType">string</span> <span class="synIdentifier">$class</span>[] = getClassification( `nodeType <span class="synIdentifier">$shape</span>` );<br><br><br>    <span class="synStatement">if</span> ( ( `<span class="synStatement">size</span> <span class="synIdentifier">$class</span>` ) &gt; <span class="synConstant">0</span> &amp;&amp; ( <span class="synConstant">"light"</span> == <span class="synIdentifier">$class</span>[<span class="synConstant">0</span>] ) )<br>    {<br>      <span class="synIdentifier">$selectedLights</span>[ `<span class="synStatement">size</span> <span class="synIdentifier">$selectedLights</span>` ] = <span class="synIdentifier">$shape</span>;<br>    }<br>  }<br><br>  <span class="synComment">// Result is an array of all lights included in</span><br><br>  <span class="synComment">// current selection list.</span><br>  <span class="synStatement">return</span> <span class="synIdentifier">$selectedLights</span>;<br>}<br>',
  nginx:
    '<span class="synIdentifier">user</span>  www www;<br><span class="synIdentifier">worker_processes</span>  2;<br><span class="synIdentifier">pid</span> /var/run/nginx.pid;<br><span class="synIdentifier">error_log</span>  /var/log/nginx.error_log  debug | info | <span class="synSpecial">notice</span> | warn | error | crit;<br><br><span class="synStatement">events</span> {<br>    <span class="synError">connections</span>   2000;<br>    <span class="synIdentifier">use</span> kqueue | rtsig | epoll | /dev/poll | select | poll;<br>}<br><br><span class="synStatement">http</span> {<br>    <span class="synIdentifier">log_format</span> main      <span class="synConstant">\'</span><span class="synPreProc">$remote_addr</span><span class="synConstant"> - </span><span class="synPreProc">$remote_user</span><span class="synConstant"> [</span><span class="synPreProc">$time_local</span><span class="synConstant">] \'</span><br>                         <span class="synConstant">\'"</span><span class="synPreProc">$request</span><span class="synConstant">" </span><span class="synPreProc">$status</span><span class="synConstant"> </span><span class="synPreProc">$bytes_sent</span><span class="synConstant"> \'</span><br>                         <span class="synConstant">\'"</span><span class="synPreProc">$http_referer</span><span class="synConstant">" "</span><span class="synPreProc">$http_user_agent</span><span class="synConstant">" \'</span><br>                         <span class="synConstant">\'"</span><span class="synPreProc">$gzip_ratio</span><span class="synConstant">"\'</span>;<br><br>    <span class="synIdentifier">send_timeout</span> 3m;<br>    <span class="synIdentifier">client_header_buffer_size</span> 1k;<br><br>    <span class="synIdentifier">gzip</span> <span class="synConstant">on</span>;<br>    <span class="synIdentifier">gzip_min_length</span> 1100;<br><br><span class="synComment">    #lingering_time 30;</span><br><br>    <span class="synStatement">server</span> {<br>        <span class="synType">server_name</span>   one.example.com  www.one.example.com;<br>        <span class="synIdentifier">access_log</span>   /var/log/nginx.access_log  main;<br><br>        <span class="synStatement">rewrite</span> (.*) /index.php?page=<span class="synIdentifier">$1</span> <span class="synStatement">break</span>;<br><br>        <span class="synStatement">location</span> / {<br>            <span class="synType">proxy_pass</span>         http://127.0.0.1/;<br>            <span class="synIdentifier">proxy_redirect</span>     <span class="synConstant">off</span>;<br>            <span class="synIdentifier">proxy_set_header</span>   Host             <span class="synIdentifier">$host</span>;<br>            <span class="synIdentifier">proxy_set_header</span>   X-Real-IP        <span class="synIdentifier">$remote_addr</span>;<br>            <span class="synIdentifier">charset</span>            koi8-r;<br>        }<br><br>        <span class="synStatement">location</span> /api/ {<br>            <span class="synType">fastcgi_pass</span> 127.0.0.1:9000;<br>        }<br><br>        <span class="synStatement">location</span> ~* \\.(jpg|jpeg|gif)$ {<br>            <span class="synType">root</span>         /spool/www;<br>        }<br>    }<br>}<br>',
  nsis:
    '/*<br>  NSIS Scheme<br>  for highlight.js<br>*/<br><br><span class="synComment">; Includes</span><br><span class="synPreProc">!include</span> MUI2.nsh<br><br><span class="synComment">; Defines</span><br><span class="synPreProc">!define</span> <span class="synConstant">x64</span> <span class="synConstant">"true"</span><br><br><span class="synComment">; Settings</span><br><span class="synType">Name</span> <span class="synConstant">"installer_name"</span><br><span class="synType">OutFile</span> <span class="synConstant">"installer_name.exe"</span><br>RequestExecutionLevel user<br><span class="synType">CRCCheck</span> <span class="synConstant">on</span><br><br><span class="synPreProc">!ifdef</span> <span class="synPreProc">${x64}</span><br>  <span class="synType">InstallDir</span> <span class="synConstant">"</span><span class="synIdentifier">$PROGRAMFILES</span><span class="synConstant">64\\installer_name"</span><br><span class="synPreProc">!else</span><br>  <span class="synType">InstallDir</span> <span class="synConstant">"</span><span class="synIdentifier">$PROGRAMFILES</span><span class="synConstant">\\installer_name"</span><br><span class="synPreProc">!endif</span><br><br><span class="synComment">; Pages</span><br><span class="synPreProc">!insertmacro</span> MUI_PAGE_INSTFILES<br><br><span class="synComment">; Sections</span><br><span class="synStatement">Section</span> <span class="synConstant">"section_name"</span> section_index<br>  <span class="synStatement">nsExec:</span>:ExecToLog <span class="synConstant">"calc.exe"</span><br><span class="synStatement">SectionEnd</span><br><br><span class="synComment">; Functions</span><br><span class="synStatement">Function</span> <span class="synStatement">.onInit</span><br>  <span class="synIdentifier">DetailPrint</span> <span class="synConstant">"The install button reads $(^InstallBtn)"</span><br>  <span class="synIdentifier">DetailPrint</span> <span class="synConstant">\'Here comes a</span><span class="synIdentifier">$<br>$\\r</span><span class="synConstant">line-break!\'</span><br>  <span class="synIdentifier">DetailPrint</span> <span class="synConstant">`Escape the dollar-sign: </span><span class="synIdentifier">$$</span><span class="synConstant">`</span><br><span class="synStatement">FunctionEnd</span><br>',
  ocaml:
    '<span class="synComment">(* This is a</span><br><span class="synComment">multiline, (* nested *) comment *)</span><br><span class="synStatement">type</span> point <span class="synStatement">=</span> <span class="synStatement">{</span> x: <span class="synType">float</span><span class="synStatement">;</span> y: <span class="synType">float</span> <span class="synStatement">};;</span><br><span class="synStatement">let</span> some_string <span class="synStatement">=</span> <span class="synConstant">"this is a string"</span><span class="synStatement">;;</span><br><span class="synStatement">let</span> <span class="synStatement">rec</span> length lst <span class="synStatement">=</span><br>    <span class="synStatement">match</span> lst <span class="synStatement">with</span><br>      <span class="synConstant">[]</span> <span class="synStatement">-&gt;</span> <span class="synConstant">0</span><br>    <span class="synStatement">|</span> head <span class="synStatement">::</span> tail <span class="synStatement">-&gt;</span> <span class="synConstant">1</span> + length tail<br>  <span class="synStatement">;;</span><br><span class="synStatement">exception</span> <span class="synConstant">Test</span><span class="synStatement">;;</span><br><span class="synStatement">type</span> expression <span class="synStatement">=</span><br>      <span class="synConstant">Const</span> <span class="synStatement">of</span> <span class="synType">float</span><br>    <span class="synStatement">|</span> <span class="synConstant">Var</span> <span class="synStatement">of</span> <span class="synType">string</span><br>    <span class="synStatement">|</span> <span class="synConstant">Sum</span> <span class="synStatement">of</span> expression <span class="synStatement">*</span> expression    <span class="synComment">(* e1 + e2 *)</span><br>    <span class="synStatement">|</span> <span class="synConstant">Diff</span> <span class="synStatement">of</span> expression <span class="synStatement">*</span> expression   <span class="synComment">(* e1 - e2 *)</span><br>    <span class="synStatement">|</span> <span class="synConstant">Prod</span> <span class="synStatement">of</span> expression <span class="synStatement">*</span> expression   <span class="synComment">(* e1 * e2 *)</span><br>    <span class="synStatement">|</span> <span class="synConstant">Quot</span> <span class="synStatement">of</span> expression <span class="synStatement">*</span> expression   <span class="synComment">(* e1 / e2 *)</span><br><span class="synStatement">class</span> point <span class="synStatement">=</span><br>    <span class="synPreProc">object</span><br>      <span class="synStatement">val</span> <span class="synStatement">mutable</span> x <span class="synStatement">=</span> <span class="synConstant">0</span><br>      <span class="synStatement">method</span> get_x <span class="synStatement">=</span> x<br>      <span class="synStatement">method</span> <span class="synStatement">private</span> move d <span class="synStatement">=</span> x <span class="synStatement">&lt;-</span> x + d<br>    <span class="synPreProc">end</span><span class="synStatement">;;</span><br>',
  perl:
    '<span class="synComment"># loads object</span><br><span class="synStatement">sub </span><span class="synIdentifier">load</span><br>{<br>  <span class="synStatement">my</span> <span class="synIdentifier">$flds</span> = <span class="synIdentifier">$c-&gt;db_load</span>(<span class="synIdentifier">$id</span>,<span class="synIdentifier">@_</span>) || <span class="synStatement">do</span> {<br>    Carp::carp <span class="synConstant">"Can`t load (class: </span><span class="synIdentifier">$c</span><span class="synConstant">, id: </span><span class="synIdentifier">$id</span><span class="synConstant">): \'</span><span class="synIdentifier">$!</span><span class="synConstant">\'"</span>; <span class="synStatement">return</span> <span class="synStatement">undef</span><br>  };<br>  <span class="synStatement">my</span> <span class="synIdentifier">$o</span> = <span class="synIdentifier">$c-&gt;_perl_new</span>();<br>  <span class="synIdentifier">$id12</span> = <span class="synIdentifier">$id</span> / <span class="synConstant">24</span> / <span class="synConstant">3600</span>;<br>  <span class="synIdentifier">$o-&gt;{</span><span class="synConstant">\'ID\'</span><span class="synIdentifier">}</span> = <span class="synIdentifier">$id12</span> + <span class="synConstant">123</span>;<br>  <span class="synComment">#$o-&gt;{\'SHCUT\'} = $flds-&gt;{\'SHCUT\'};</span><br>  <span class="synStatement">my</span> <span class="synIdentifier">$p</span> = <span class="synIdentifier">$o-&gt;props</span>;<br>  <span class="synStatement">my</span> <span class="synIdentifier">$vt</span>;<br>  <span class="synIdentifier">$string</span> =~ <span class="synStatement">m/</span><span class="synConstant">^sought_text$</span><span class="synStatement">/</span>;<br>  <span class="synIdentifier">$items</span> = <span class="synStatement">split</span> <span class="synStatement">//</span>, <span class="synConstant">\'abc\'</span>;<br>  <span class="synIdentifier">$string</span> //= <span class="synConstant">"bar"</span>;<br>  <span class="synStatement">for</span> <span class="synStatement">my</span> <span class="synIdentifier">$key</span> (<span class="synStatement">keys</span> <span class="synIdentifier">%$p</span>)<br>  {<br>    <span class="synStatement">if</span>(<span class="synIdentifier">${$vt</span>.<span class="synConstant">\'::property\'</span><span class="synIdentifier">}</span>) {<br>      <span class="synIdentifier">$o-&gt;{$key</span> . <span class="synConstant">\'_real\'</span><span class="synIdentifier">}</span> = <span class="synIdentifier">$flds-&gt;{$key}</span>;<br>      <span class="synStatement">tie</span> <span class="synIdentifier">$o-&gt;{$key}</span>, <span class="synConstant">\'CMSBuilder::Property\'</span>, <span class="synIdentifier">$o</span>, <span class="synIdentifier">$key</span>;<br>    }<br>  }<br>  <span class="synIdentifier">$o-&gt;save</span> <span class="synStatement">if</span> <span class="synStatement">delete</span> <span class="synIdentifier">$o-&gt;{</span><span class="synConstant">\'_save_after_load\'</span><span class="synIdentifier">}</span>;<br><br>  <span class="synComment"># GH-117</span><br>  <span class="synStatement">my</span> <span class="synIdentifier">$g</span> = <span class="synStatement">glob</span>(<span class="synConstant">"/usr/bin/*"</span>);<br><br>  <span class="synStatement">return</span> <span class="synIdentifier">$o</span>;<br>}<br><br><span class="synComment">__DATA__</span><br><span class="synComment">@@ layouts/default.html.ep</span><br><span class="synComment">&lt;!DOCTYPE html&gt;</span><br><span class="synComment">&lt;html&gt;</span><br><span class="synComment">  &lt;head&gt;&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt;</span><br><span class="synComment">  &lt;body&gt;&lt;%= content %&gt;&lt;/body&gt;</span><br><span class="synComment">&lt;/html&gt;</span><br><span class="synComment">__END__</span><br><br><span class="synComment">=head1 NAME</span><br><span class="synComment">POD till the end of file</span><br>',
  pf:
    '<span class="synComment"># from the PF FAQ: http://www.openbsd.org/faq/pf/example1.html</span><br><br><span class="synComment"># macros</span><br><br><span class="synIdentifier">int_if</span>="xl0"<br><br><span class="synIdentifier">tcp_services</span>="{ <span class="synConstant">22</span>, <span class="synConstant">113</span> }"<br><span class="synIdentifier">icmp_types</span>="echoreq"<br><br><span class="synIdentifier">comp3</span>="<span class="synType">192.168.0.3</span>"<br><br><span class="synComment"># options</span><br><br><span class="synStatement">set</span> block-policy return<br><span class="synStatement">set</span> loginterface egress<br><span class="synStatement">set</span> skip on lo<br><br><span class="synComment"># FTP Proxy rules</span><br><br><span class="synStatement">anchor</span> "<span class="synConstant">ftp</span>-proxy/*"<br><br><span class="synStatement">pass</span> in quick on <span class="synIdentifier">$int_if</span> inet proto tcp to <span class="synType">any</span> port <span class="synConstant">ftp</span> <span class="synStatement">\\</span><br>    divert-to <span class="synType">127.0.0.1</span> port <span class="synConstant">8021</span><br><br><span class="synComment"># match rules</span><br><br>match out on egress inet from !(egress:network) to <span class="synType">any</span> <span class="synStatement">nat</span>-to (egress:0)<br><br><span class="synComment"># filter rules</span><br><br><span class="synStatement">block </span>in log<br><span class="synStatement">pass</span> out quick<br><br><span class="synStatement">antispoof</span> quick for { lo <span class="synIdentifier">$int_if</span> }<br><br><span class="synStatement">pass</span> in on egress inet proto tcp from <span class="synType">any</span> to (egress) <span class="synStatement">\\</span><br>    port <span class="synIdentifier">$tcp_services</span><br><br><span class="synStatement">pass</span> in on egress inet proto tcp to (egress) port <span class="synConstant">80</span> <span class="synStatement">rdr</span>-to <span class="synIdentifier">$comp3</span><br><br><span class="synStatement">pass</span> in inet proto icmp <span class="synType">all</span> icmp-type <span class="synIdentifier">$icmp_types</span><br><br><span class="synStatement">pass</span> in on <span class="synIdentifier">$int_if</span><br>',
  php:
    'require_once \'Zend/Uri/Http.php\';<br><br>namespace Location\\Web;<br><br>interface Factory<br>{<br>    static function _factory();<br>}<br><br>abstract class URI extends BaseURI implements Factory<br>{<br>    abstract function test();<br><br>    public static $st1 = 1;<br>    const ME = "Yo";<br>    var $list = NULL;<br>    private $var;<br><br>    /**<br>     * Returns a URI<br>     *<br>     * <span class="synPreProc">@return </span>URI<br>     */<br>    static public function _factory($stats = array(), $uri = \'http\')<br>    {<br>        echo __METHOD__;<br>        $uri = explode(\':\', $uri, 0b10);<br>        $schemeSpecific = <span class="synStatement">isset</span>($uri[1]) ? $uri[1] : \'\';<br>        $desc = \'Multi<br>line description\';<br><br>        // Security check<br>        if (!ctype_alnum($scheme)) {<br>            throw new Zend_Uri_Exception(\'Illegal scheme\');<br>        }<br><br>        $this-<span class="synError">&gt;</span>var = 0 - self::$st;<br>        $this-<span class="synError">&gt;</span>list = list(Array("1"=<span class="synError">&gt;</span> 2, 2=<span class="synError">&gt;</span>self::ME, 3 =<span class="synError">&gt;</span> \\Location\\Web\\URI::class));<br><br>        return [<br>            \'uri\'   =<span class="synError">&gt;</span> $uri,<br>            \'value\' =<span class="synError">&gt;</span> null,<br>        ];<br>    }<br>}<br><br>echo URI::ME . URI::$st1;<br><br>__halt_compiler () ; datahere<br>datahere<br>datahere */<br>datahere<br>',
  processing:
    '<span class="synPreProc">import</span> java.util.LinkedList;<br><span class="synPreProc">import</span> java.awt.Point;<br><br><span class="synType">PGraphics</span> pg;<br><span class="synType">String</span> load;<br><br><span class="synType">void</span> <span class="synIdentifier">setup</span>() {<br>  <span class="synIdentifier">size</span>(<span class="synConstant">displayWidth</span>, <span class="synConstant">displayHeight</span>, <span class="synConstant">P3D</span>);<br>  pg = <span class="synIdentifier">createGraphics</span>(<span class="synConstant">displayWidth</span>*<span class="synConstant">2</span>,<span class="synConstant">displayHeight</span>,<span class="synConstant">P2D</span>);<br>  pg.beginDraw();<br>  pg.background(<span class="synConstant">255</span>,<span class="synConstant">255</span>,<span class="synConstant">255</span>);<br>  <span class="synComment">//pg.smooth(8);</span><br>  pg.endDraw();<br>}<br><span class="synType">void</span> <span class="synIdentifier">draw</span>(){<br>  <span class="synIdentifier">background</span>(<span class="synConstant">255</span>);<br>}<br>',
  prolog:
    '<span class="synConstant">mergesort</span>([],[]). <span class="synComment">% special case</span><br><span class="synConstant">mergesort</span>([A],[A]).<br><span class="synConstant">mergesort</span>([A,B|R],S) <span class="synSpecial">:-</span><br>   split([A,B|R],L1,L2),<br>   mergesort(L1,S1),<br>   mergesort(L2,S2),<br>   merge(S1,S2,S).<br><br><span class="synConstant">split</span>([],[],[]).<br><span class="synConstant">split</span>([A],[A],[]).<br><span class="synConstant">split</span>([A,B|R],[A|Ra],[B|Rb]) <span class="synSpecial">:-</span>  split(R,Ra,Rb).<br>',
  python:
    '<span class="synPreProc">@</span><span class="synIdentifier">requires_authorization</span><br><span class="synStatement">def</span> <span class="synIdentifier">somefunc</span>(param1=<span class="synConstant">\'\'</span>, param2=<span class="synConstant">0</span>):<br>    <span class="synConstant">r\'\'\'A docstring\'\'\'</span><br>    <span class="synStatement">if</span> param1 &gt; param2: <span class="synComment"># interesting</span><br>        <span class="synIdentifier">print</span> <span class="synConstant">\'Gre</span><span class="synSpecial">\\\'</span><span class="synConstant">ater\'</span><br>    <span class="synStatement">return</span> (param2 - param1 + <span class="synConstant">1</span> + <span class="synConstant">0b10l</span>) <span class="synStatement">or</span> <span class="synIdentifier">None</span><br><br><span class="synStatement">class</span> <span class="synIdentifier">SomeClass</span>:<br>    <span class="synStatement">pass</span><br><br>&gt;&gt;&gt; message = <span class="synConstant">\'\'\'interpreter</span><br><span class="synConstant">... prompt\'\'\'</span><br>',
  r:
    '<span class="synPreProc">library</span><span class="synSpecial">(</span>ggplot2<span class="synSpecial">)</span><br><br>centre <span class="synStatement">&lt;-</span> <span class="synType">function</span><span class="synSpecial">(</span>x<span class="synSpecial">,</span> type<span class="synSpecial">,</span> ...<span class="synSpecial">)</span> <span class="synSpecial">{</span><br>  switch<span class="synSpecial">(</span>type<span class="synSpecial">,</span><br>         mean <span class="synStatement">=</span> mean<span class="synSpecial">(</span>x<span class="synSpecial">),</span><br>         median <span class="synStatement">=</span> median<span class="synSpecial">(</span>x<span class="synSpecial">),</span><br>         trimmed <span class="synStatement">=</span> mean<span class="synSpecial">(</span>x<span class="synSpecial">,</span> trim <span class="synStatement">=</span> <span class="synConstant">.1</span><span class="synSpecial">))</span><br><span class="synSpecial">}</span><br><br>myVar1<br>myVar.2<br>data<span class="synSpecial">$</span>x<br>foo <span class="synConstant">"bar"</span> baz<br><span class="synComment"># test "test"</span><br><span class="synConstant">"test # test"</span><br><br><span class="synSpecial">(</span><span class="synConstant">123</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">1</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">10</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">0.1</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">.2</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">1e-7</span><span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synConstant">1.2e+7</span><span class="synSpecial">)</span> <span class="synSpecial">(</span>2e<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">3e+10</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">0x0</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">0xa</span><span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synConstant">0xabcdef1234567890</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">123L</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">1L</span><span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synConstant">0x10</span>L<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">10000000L</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">1e6</span>L<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">1.1</span>L<span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synConstant">1e-3</span>L<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">4123.381E-10i</span><span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synConstant">3.</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synConstant">3.E10</span><span class="synSpecial">)</span> <span class="synComment"># </span><span class="synTodo">BUG:</span><span class="synComment"> .E10 should be part of number</span><br><br><span class="synComment"># Numbers in some different contexts</span><br><span class="synConstant">1L</span><br><span class="synConstant">0x40</span><br><span class="synConstant">.234</span><br><span class="synConstant">3.</span><br><span class="synConstant">1L</span> <span class="synStatement">+</span> <span class="synConstant">30</span><br>plot<span class="synSpecial">(</span>cars<span class="synSpecial">,</span> xlim<span class="synStatement">=</span><span class="synConstant">20</span><span class="synSpecial">)</span><br>plot<span class="synSpecial">(</span>cars<span class="synSpecial">,</span> xlim<span class="synStatement">=</span><span class="synConstant">0x20</span><span class="synSpecial">)</span><br>foo<span class="synStatement">&lt;-</span><span class="synConstant">30</span><br>my.data.3 <span class="synStatement">&lt;-</span> read<span class="synSpecial">()</span> <span class="synComment"># not a number</span><br>c<span class="synSpecial">(</span><span class="synConstant">1</span><span class="synSpecial">,</span><span class="synConstant">2</span><span class="synSpecial">,</span><span class="synConstant">3</span><span class="synSpecial">)</span><br><span class="synConstant">1</span><span class="synStatement">%%</span><span class="synConstant">2</span><br><br><span class="synConstant">"this is a quote that spans</span><br><span class="synConstant">multiple lines</span><br><span class="synSpecial">\\"</span><br><br>is this still a quote? it should be.<br><span class="synComment"># even still!</span><br><br><span class="synConstant">" # now we\'re done.</span><br><br><span class="synConstant">\'same for</span><br><span class="synConstant">single quotes #\'</span><br><br><span class="synComment"># keywords</span><br><span class="synConstant">NULL</span><span class="synSpecial">,</span> <span class="synConstant">NA</span><span class="synSpecial">,</span> <span class="synConstant">TRUE</span><span class="synSpecial">,</span> <span class="synConstant">FALSE</span><span class="synSpecial">,</span> <span class="synConstant">Inf</span><span class="synSpecial">,</span> <span class="synConstant">NaN</span><span class="synSpecial">,</span> <span class="synConstant">NA_integer_</span><span class="synSpecial">,</span><br><span class="synConstant">NA_real_</span><span class="synSpecial">,</span> <span class="synConstant">NA_character_</span><span class="synSpecial">,</span> <span class="synConstant">NA_complex_</span><span class="synSpecial">,</span> <span class="synType">function</span><span class="synSpecial">,</span><br><span class="synStatement">while</span><span class="synSpecial">,</span> <span class="synStatement">repeat</span><span class="synSpecial">,</span> <span class="synStatement">for</span><span class="synSpecial">,</span> <span class="synStatement">if</span><span class="synSpecial">,</span> <span class="synStatement">in</span><span class="synSpecial">,</span> <span class="synStatement">else</span><span class="synSpecial">,</span> <span class="synStatement">next</span><span class="synSpecial">,</span> <span class="synStatement">break</span><span class="synSpecial">,</span><br>...<span class="synSpecial">,</span> ..1<span class="synSpecial">,</span> ..2<br><br><span class="synComment"># not keywords</span><br>the quick brown fox jumped over the lazy dogs<br>null na true false inf nan na_integer_ na_real_<br>na_character_ na_complex_ Function While Repeat<br>For If In Else Next Break .. .... <span class="synConstant">"NULL"</span> `NULL` <span class="synConstant">\'NULL\'</span><br><br><span class="synComment"># operators</span><br><span class="synStatement">+</span><span class="synSpecial">,</span> <span class="synStatement">-</span><span class="synSpecial">,</span> <span class="synStatement">*</span><span class="synSpecial">,</span> <span class="synStatement">/</span><span class="synSpecial">,</span> <span class="synStatement">%%</span><span class="synSpecial">,</span> <span class="synStatement">^</span><span class="synSpecial">,</span> <span class="synStatement">&gt;</span><span class="synSpecial">,</span> <span class="synStatement">&gt;=</span><span class="synSpecial">,</span> <span class="synStatement">&lt;</span><span class="synSpecial">,</span> <span class="synStatement">&lt;=</span><span class="synSpecial">,</span> <span class="synStatement">==</span><span class="synSpecial">,</span> <span class="synStatement">!=</span><span class="synSpecial">,</span> <span class="synStatement">!</span><span class="synSpecial">,</span> <span class="synStatement">&amp;</span><span class="synSpecial">,</span> <span class="synStatement">|</span><span class="synSpecial">,</span> <span class="synStatement">~</span><span class="synSpecial">,</span><br><span class="synStatement">-&gt;</span><span class="synSpecial">,</span> <span class="synStatement">&lt;-</span><span class="synSpecial">,</span> <span class="synStatement">&lt;&lt;-</span><span class="synSpecial">,</span> <span class="synSpecial">$,</span> <span class="synSpecial">:,</span> <span class="synSpecial">::</span><br><br><span class="synComment"># infix operator</span><br>foo <span class="synStatement">%union%</span> bar<br><span class="synStatement">%"test"%</span><br>`"test"`<br><br>',
  rib:
    '<span class="synType">FrameBegin</span> <span class="synConstant">0</span><br><span class="synStatement">Display</span> <span class="synConstant">"Scene"</span> <span class="synConstant">"framebuffer"</span> <span class="synConstant">"rgb"</span><br><span class="synStatement">Option</span> <span class="synConstant">"searchpath"</span> <span class="synConstant">"shader"</span> <span class="synConstant">"+&amp;:/home/kew"</span><br><span class="synStatement">Option</span> <span class="synConstant">"trace"</span> <span class="synConstant">"int maxdepth"</span> [<span class="synConstant">4</span>]<br><span class="synStatement">Attribute</span> <span class="synConstant">"visibility"</span> <span class="synConstant">"trace"</span> [<span class="synConstant">1</span>]<br><span class="synStatement">Attribute</span> <span class="synConstant">"irradiance"</span> <span class="synConstant">"maxerror"</span> [<span class="synConstant">0.1</span>]<br><span class="synStatement">Attribute</span> <span class="synConstant">"visibility"</span> <span class="synConstant">"transmission"</span> <span class="synConstant">"opaque"</span><br><span class="synStatement">Format</span> <span class="synConstant">640</span> <span class="synConstant">480</span> <span class="synConstant">1.0</span><br><span class="synStatement">ShadingRate</span> <span class="synConstant">2</span><br><span class="synStatement">PixelFilter</span> <span class="synConstant">"catmull-rom"</span> <span class="synConstant">1</span> <span class="synConstant">1</span><br><span class="synStatement">PixelSamples</span> <span class="synConstant">4</span> <span class="synConstant">4</span><br><span class="synStatement">Projection</span> <span class="synConstant">"perspective"</span> <span class="synConstant">"fov"</span> <span class="synConstant">49.5502811377</span><br><span class="synStatement">Scale</span> <span class="synConstant">1</span> <span class="synConstant">1</span> <span class="synConstant">-1</span><br><br><span class="synType">WorldBegin</span><br><br><span class="synStatement">ReadArchive</span> <span class="synConstant">"Lamp.002_Light/instance.rib"</span><br><span class="synStatement">Surface</span> <span class="synConstant">"plastic"</span><br><span class="synStatement">ReadArchive</span> <span class="synConstant">"Cube.004_Mesh/instance.rib"</span><br><span class="synComment"># ReadArchive "Sphere.010_Mesh/instance.rib"</span><br><span class="synComment"># ReadArchive "Sphere.009_Mesh/instance.rib"</span><br><span class="synStatement">ReadArchive</span> <span class="synConstant">"Sphere.006_Mesh/instance.rib"</span><br><br><span class="synType">WorldEnd</span><br><span class="synType">FrameEnd</span><br>',
  ruby:
    '<span class="synComment"># The Greeter class</span><br><span class="synPreProc">class</span> <span class="synType">Greeter</span><br>  <span class="synPreProc">def</span> <span class="synIdentifier">initialize</span>(name)<br>    <span class="synIdentifier">@name</span> = name.capitalize<br>  <span class="synPreProc">end</span><br><br>  <span class="synPreProc">def</span> <span class="synIdentifier">salute</span><br>    puts <span class="synSpecial">"</span><span class="synConstant">Hello </span><span class="synSpecial">#{</span><span class="synIdentifier">@name</span><span class="synSpecial">}</span><span class="synConstant">!</span><span class="synSpecial">"</span><br>  <span class="synPreProc">end</span><br><span class="synPreProc">end</span><br><br>g = <span class="synType">Greeter</span>.new(<span class="synSpecial">"</span><span class="synConstant">world</span><span class="synSpecial">"</span>)<br>g.salute<br>',
  rust:
    '<span class="synPreProc">#[derive(</span><span class="synType">Debug</span><span class="synPreProc">)]</span><br><span class="synStatement">pub</span> <span class="synStatement">enum</span> <span class="synIdentifier">State</span> {<br>    Start,<br>    Transient,<br>    Closed,<br>}<br><br><span class="synStatement">impl</span> <span class="synType">From</span><span class="synStatement">&lt;</span><span class="synType">&amp;</span><span class="synSpecial">\'a</span> <span class="synType">str</span><span class="synStatement">&gt;</span> <span class="synStatement">for</span> State {<br>    <span class="synStatement">fn</span> <span class="synIdentifier">from</span>(s: <span class="synType">&amp;</span><span class="synSpecial">\'a</span> <span class="synType">str</span>) <span class="synStatement">-&gt;</span> <span class="synType">Self</span> {<br>        <span class="synStatement">match</span> s {<br>            <span class="synConstant">"start"</span> <span class="synStatement">=&gt;</span> <span class="synPreProc">State</span><span class="synSpecial">::</span>Start,<br>            <span class="synConstant">"closed"</span> <span class="synStatement">=&gt;</span> <span class="synPreProc">State</span><span class="synSpecial">::</span>Closed,<br>            _ <span class="synStatement">=&gt;</span> <span class="synPreProc">unreachable!</span>(),<br>        }<br>    }<br>}<br>',
  sas:
    '/**********************************************************************<br> * Program: example.sas<br> * Purpose: SAS Example for HighlightJS Plug-in<br> **********************************************************************/<br><br>%put Started at %sysfunc(putn(%sysfunc(datetime()), datetime.));<br>options<br>    errors = 20  /* Maximum number of prints of repeat errors */<br>    fullstimer   /* Detailed timer after each step execution  */<br>;<br><br>%let maindir = /path/to/maindir;<br>%let outdir  = &amp;maindir/out.;<br><br>systask command "mkdir -p &amp;outdir." wait;<br>libname main "&amp;maindir" access = readonly;<br><br>data testing;<br>    input name $ number delimiter = ",";<br>    datalines;<br>    John,1<br>    Mary,2<br>    Jane,3<br>    ;<br>    if number &gt; 1 then final = 0;<br>    else do;<br>        final = 1;<br>    end;<br>run;<br><br>%macro testMacro(positional, named = value);<br>    %put positional = &amp;positional.;<br>    %put named      = &amp;named.;<br>%mend testMacro;<br>%testMacro(positional, named = value);<br><br>dm \'clear log output odsresults\';<br><br>proc datasets lib = work kill noprint; quit;<br>libname <span class="synPreProc">_all_</span> clear;<br><br>data <span class="synPreProc">_null_</span>;<br>    set sashelp.macro(<br>        keep  = name<br>        where = (scope = "global");<br>    );<br>    call symdel(name);<br>run;<br>',
  scala:
    '<span class="synComment">/**</span><br><span class="synComment"> * A person has a name and an age.</span><br><span class="synComment"> */</span><br><span class="synType">case</span> <span class="synType">class</span> Person(name: <span class="synConstant">String</span>, age: Int)<br><br><span class="synType">abstract</span> <span class="synType">class</span> Vertical <span class="synType">extends</span> CaseJeu<br><span class="synType">case</span> <span class="synType">class</span> Haut(a: Int) <span class="synType">extends</span> Vertical<br><span class="synType">case</span> <span class="synType">class</span> Bas(name: <span class="synConstant">String</span>, b: Double) <span class="synType">extends</span> Vertical<br><br><span class="synType">sealed</span> <span class="synType">trait</span> Ior[+A, +B]<br><span class="synType">case</span> <span class="synType">class</span> Left[A](a: A) <span class="synType">extends</span> Ior[A, Nothing]<br><span class="synType">case</span> <span class="synType">class</span> Right[B](b: B) <span class="synType">extends</span> Ior[Nothing, B]<br><span class="synType">case</span> <span class="synType">class</span> Both[A, B](a: A, b: B) <span class="synType">extends</span> Ior[A, B]<br><br><span class="synType">trait</span> Functor[F[_]] {<br><span class="synIdentifier">  def</span> map[A, B](fa: F[A], f: A =&gt; B): F[B]<br>}<br><br><span class="synComment">// beware Int.MinValue</span><br><span class="synIdentifier">def</span> absoluteValue(n: Int): Int =<br>  <span class="synStatement">if</span> (n &lt; <span class="synConstant">0</span>) -n <span class="synStatement">else</span> n<br><br><span class="synIdentifier">def</span> interp(n: Int): <span class="synConstant">String</span> =<br>  s<span class="synConstant">"there are $n ${color} balloons.<br>"</span><br><br><span class="synType">type</span> ξ[A] = (A, A)<br><br><span class="synType">trait</span> Hist { lhs =&gt;<br><span class="synIdentifier">  def</span> ⊕(rhs: Hist): Hist<br>}<br><br><span class="synIdentifier">def</span> gsum[A: Ring](as: Seq[A]): A =<br>  as.foldLeft(Ring[A].zero)(_ + _)<br><br><span class="synType">val</span> actions: List[Symbol] =<br>  \'init :: \'read :: \'write :: \'close :: Nil<br><br><span class="synType">trait</span> Cake {<br>  <span class="synType">type</span> T;<br>  <span class="synType">type</span> Q<br>  <span class="synType">val</span> things: Seq[T]<br><br>  <span class="synType">abstract</span> <span class="synType">class</span> Spindler<br><br><span class="synIdentifier">  def</span> spindle(s: Spindler, ts: Seq[T], reversed: Boolean = <span class="synConstant">false</span>): Seq[Q]<br>}<br><br><span class="synType">val</span> colors = Map(<br>  <span class="synConstant">"red"</span>       -&gt; <span class="synConstant">0xFF0000</span>,<br>  <span class="synConstant">"turquoise"</span> -&gt; <span class="synConstant">0x00FFFF</span>,<br>  <span class="synConstant">"black"</span>     -&gt; <span class="synConstant">0x000000</span>,<br>  <span class="synConstant">"orange"</span>    -&gt; <span class="synConstant">0xFF8040</span>,<br>  <span class="synConstant">"brown"</span>     -&gt; <span class="synConstant">0x804000</span>)<br><br>lazy <span class="synType">val</span> ns = <span class="synStatement">for</span> {<br>  x &lt;- <span class="synConstant">0</span> until <span class="synConstant">100</span><br>  y &lt;- <span class="synConstant">0</span> until <span class="synConstant">100</span><br>} <span class="synType">yield</span> (x + y) * <span class="synConstant">33.33</span><br>',
  scheme:
    '<span class="synComment">;; Calculation of Hofstadter\'s male and female sequences as a list of pairs</span><br><br><span class="synSpecial">(</span><span class="synStatement">define</span> <span class="synSpecial">(</span>hofstadter-male-female n<span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synStatement">letrec</span> <span class="synSpecial">((</span>female <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span><br>           <span class="synSpecial">(</span><span class="synStatement">if</span> <span class="synSpecial">(</span><span class="synIdentifier">=</span> n <span class="synConstant">0</span><span class="synSpecial">)</span><br>           <span class="synConstant">1</span><br>           <span class="synSpecial">(</span><span class="synIdentifier">-</span> n <span class="synSpecial">(</span>male <span class="synSpecial">(</span>female <span class="synSpecial">(</span><span class="synIdentifier">-</span> n <span class="synConstant">1</span><span class="synSpecial">)))))))</span><br>     <span class="synSpecial">(</span>male <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span><br>         <span class="synSpecial">(</span><span class="synStatement">if</span> <span class="synSpecial">(</span><span class="synIdentifier">=</span> n <span class="synConstant">0</span><span class="synSpecial">)</span><br>             <span class="synConstant">0</span><br>             <span class="synSpecial">(</span><span class="synIdentifier">-</span> n <span class="synSpecial">(</span>female <span class="synSpecial">(</span>male <span class="synSpecial">(</span><span class="synIdentifier">-</span> n <span class="synConstant">1</span><span class="synSpecial">))))))))</span><br>  <span class="synSpecial">(</span><span class="synStatement">let</span> loop <span class="synSpecial">((</span>i <span class="synConstant">0</span><span class="synSpecial">))</span><br>    <span class="synSpecial">(</span><span class="synStatement">if</span> <span class="synSpecial">(</span><span class="synIdentifier">&gt;</span> i n<span class="synSpecial">)</span><br>    <span class="synSpecial">\'()</span><br>    <span class="synSpecial">(</span><span class="synIdentifier">cons</span> <span class="synSpecial">(</span><span class="synIdentifier">cons</span> <span class="synSpecial">(</span>female i<span class="synSpecial">)</span><br>            <span class="synSpecial">(</span>male i<span class="synSpecial">))</span><br>      <span class="synSpecial">(</span>loop <span class="synSpecial">(</span><span class="synIdentifier">+</span> i <span class="synConstant">1</span><span class="synSpecial">)))))))</span><br><br><span class="synSpecial">(</span>hofstadter-male-female <span class="synConstant">8</span><span class="synSpecial">)</span><br><br><span class="synSpecial">(</span><span class="synStatement">define</span> <span class="synSpecial">(</span>find-first func lst<span class="synSpecial">)</span><br><span class="synSpecial">(</span><span class="synIdentifier">call-with-current-continuation</span><br> <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>return-immediately<span class="synSpecial">)</span><br>   <span class="synSpecial">(</span><span class="synIdentifier">for-each</span> <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>x<span class="synSpecial">)</span><br>       <span class="synSpecial">(</span><span class="synStatement">if</span> <span class="synSpecial">(</span>func x<span class="synSpecial">)</span><br>           <span class="synSpecial">(</span>return-immediately x<span class="synSpecial">)))</span><br>         lst<span class="synSpecial">)</span><br>   <span class="synConstant">#f</span><span class="synSpecial">)))</span><br>',
  scilab:
    '<span class="synComment">// A comment</span><br><span class="synStatement">function</span> <span class="synIdentifier">I</span> <span class="synStatement">=</span> <span class="synIdentifier">foo</span><span class="synSpecial">(</span><span class="synIdentifier">dims</span><span class="synSpecial">,</span> <span class="synIdentifier">varargin</span><span class="synSpecial">)</span><br>  <span class="synIdentifier">d</span><span class="synStatement">=</span><span class="synSpecial">[</span><span class="synConstant">1</span><span class="synSpecial">;</span> <span class="synIdentifier">matrix</span><span class="synSpecial">(</span><span class="synIdentifier">dims</span><span class="synSpecial">(</span><span class="synConstant">1</span><span class="synStatement">:</span>$<span class="synStatement">-</span><span class="synConstant">1</span><span class="synSpecial">),</span><span class="synStatement">-</span><span class="synConstant">1</span><span class="synSpecial">,</span><span class="synConstant">1</span><span class="synSpecial">)]</span><br>  <span class="synStatement">for</span> <span class="synIdentifier">i</span><span class="synStatement">=</span><span class="synConstant">1</span><span class="synStatement">:</span><span class="synIdentifier">size</span><span class="synSpecial">(</span><span class="synIdentifier">varargin</span><span class="synSpecial">)</span><br>    <span class="synStatement">if</span> <span class="synIdentifier">varargin</span><span class="synSpecial">(</span><span class="synIdentifier">i</span><span class="synSpecial">)</span><span class="synStatement">==</span><span class="synSpecial">[]</span> <span class="synStatement">then</span><br>       <span class="synIdentifier">I</span><span class="synStatement">=</span><span class="synSpecial">[],</span><br>       <span class="synStatement">return</span><span class="synSpecial">;</span><br>    <span class="synStatement">end</span><br>  <span class="synStatement">end</span><br><span class="synStatement">endfunction</span><br><br><span class="synIdentifier">b</span> <span class="synStatement">=</span> <span class="synIdentifier">cos</span><span class="synSpecial">(</span><span class="synIdentifier">a</span><span class="synSpecial">)</span> <span class="synStatement">+</span> <span class="synIdentifier">cosh</span><span class="synSpecial">(</span><span class="synIdentifier">a</span><span class="synSpecial">);</span><br><span class="synIdentifier">bar_matrix</span> <span class="synStatement">=</span> <span class="synSpecial">[</span> <span class="synConstant">"Hello"</span><span class="synSpecial">,</span> <span class="synConstant">"world"</span> <span class="synSpecial">];</span><br><span class="synIdentifier">foo_matrix</span> <span class="synStatement">=</span> <span class="synSpecial">[</span><span class="synConstant">1</span><span class="synSpecial">,</span> <span class="synConstant">2</span><span class="synSpecial">,</span> <span class="synConstant">3</span><span class="synSpecial">;</span> <span class="synConstant">4</span><span class="synSpecial">,</span> <span class="synConstant">5</span><span class="synSpecial">,</span> <span class="synConstant">6</span><span class="synSpecial">];</span><br>',
  sml:
    '<span class="synStatement">structure</span><span class="synPreProc"> List</span> : <span class="synPreProc">LIST</span> <span class="synStatement">=</span><br>  <span class="synPreProc">struct</span><br><br>    <span class="synStatement">val</span> op +  <span class="synStatement">=</span> <span class="synPreProc">InlineT</span>.<span class="synPreProc">DfltInt</span>.+<br><br>    <span class="synStatement">datatype</span> <span class="synType">list</span> <span class="synStatement">=</span> <span class="synStatement">datatype</span> <span class="synType">list</span><br><br>    <span class="synStatement">exception</span> <span class="synConstant">Empty</span> <span class="synStatement">=</span> <span class="synConstant">Empty</span><br><br>    <span class="synStatement">fun</span> last <span class="synConstant">[]</span> <span class="synStatement">=</span> <span class="synStatement">raise</span> <span class="synConstant">Empty</span><br>      <span class="synStatement">|</span> last <span class="synStatement">[</span>x<span class="synStatement">]</span> <span class="synStatement">=</span> x<br>      <span class="synStatement">|</span> last <span class="synStatement">(_::</span>r<span class="synStatement">)</span> <span class="synStatement">=</span> last r<br><br>  <span class="synStatement">fun</span> loop <span class="synStatement">(</span><span class="synConstant">[]</span>, <span class="synConstant">[]</span><span class="synStatement">)</span> <span class="synStatement">=</span> <span class="synConstant">EQUAL</span><br>    <span class="synStatement">|</span> loop <span class="synStatement">(</span><span class="synConstant">[]</span>, <span class="synStatement">_)</span> <span class="synStatement">=</span> <span class="synConstant">LESS</span><br>    <span class="synStatement">|</span> loop <span class="synStatement">(_</span>, <span class="synConstant">[]</span><span class="synStatement">)</span> <span class="synStatement">=</span> <span class="synConstant">GREATER</span><br>    <span class="synStatement">|</span> loop <span class="synStatement">(</span>x <span class="synStatement">::</span> xs, y <span class="synStatement">::</span> ys<span class="synStatement">)</span> <span class="synStatement">=</span><br>      <span class="synStatement">(case</span> compare <span class="synStatement">(</span>x, y<span class="synStatement">)</span> <span class="synStatement">of</span><br>     <span class="synConstant">EQUAL</span> <span class="synStatement">=</span>&gt; loop <span class="synStatement">(</span>xs, ys<span class="synStatement">)</span><br>         <span class="synStatement">|</span> unequal <span class="synStatement">=</span>&gt; unequal<span class="synStatement">)</span><br>    <span class="synStatement">in</span><br>  loop<br>    <span class="synPreProc">end</span><br><br>  <span class="synError">end</span> <span class="synComment">(* structure List *)</span><br><br>',
  sql:
    '<span class="synStatement">CREATE</span> <span class="synSpecial">TABLE</span> <span class="synConstant">"topic"</span> (<br>    <span class="synConstant">"id"</span> serial <span class="synStatement">NOT</span> <span class="synSpecial">NULL</span> PRIMARY KEY,<br>    <span class="synConstant">"forum_id"</span> <span class="synType">integer</span> <span class="synStatement">NOT</span> <span class="synSpecial">NULL</span>,<br>    <span class="synConstant">"subject"</span> <span class="synType">varchar</span>(<span class="synConstant">255</span>) <span class="synStatement">NOT</span> <span class="synSpecial">NULL</span><br>);<br><span class="synStatement">ALTER</span> <span class="synSpecial">TABLE</span> <span class="synConstant">"topic"</span><br><span class="synSpecial">ADD</span> CONSTRAINT forum_id FOREIGN KEY (<span class="synConstant">"forum_id"</span>)<br>REFERENCES <span class="synConstant">"forum"</span> (<span class="synConstant">"id"</span>);<br><br><span class="synComment">-- Initials</span><br><span class="synStatement">insert</span> <span class="synSpecial">into</span> <span class="synConstant">"topic"</span> (<span class="synConstant">"forum_id"</span>, <span class="synConstant">"subject"</span>)<br><span class="synSpecial">values</span> (<span class="synConstant">2</span>, <span class="synConstant">\'D\'\'artagnian\'</span>);<br>',
  stata:
    '<span class="synPreProc">program</span> define gr_log<br><span class="synPreProc">version</span> 6.0<br><br><span class="synPreProc">local</span> or = <span class="synPreProc">`2\'</span><br><span class="synPreProc">local</span> xunits = <span class="synPreProc">`3\'</span><br><span class="synPreProc">local</span> b1 = <span class="synIdentifier">ln(</span><span class="synPreProc">`or\'</span><span class="synIdentifier">)</span><br><br><span class="synComment">* make summary of logistic data from equation</span><br><span class="synPreProc">set</span> obs <span class="synPreProc">`xunits\'</span><br><span class="synPreProc">generate</span> pgty = 1 - 1/(1 + <span class="synIdentifier">exp(</span>score<span class="synIdentifier">)</span>)<br><span class="synComment">/**</span><br><span class="synComment"> * Comment 1</span><br><span class="synComment">*/</span><br><span class="synPreProc">reg</span> y x<br><span class="synComment">* Comment 2</span><br><span class="synPreProc">reg</span> y2 x<span class="synComment"> //comment 3</span><br>This is a <span class="synPreProc">`loc\'</span> <span class="synPreProc">$glob</span> <span class="synPreProc">${glob2}</span><br>This is a `"<span class="synConstant">string </span>"<span class="synConstant"> </span>"<span class="synConstant">\' </span>"<span class="synConstant">string</span><span class="synPreProc">`1\'</span><span class="synConstant">two</span><span class="synPreProc">${hi}</span>"<span class="synConstant"> bad </span>`"<span class="synConstant">string </span>"<span class="synConstant"> </span>"<span class="synConstant">\' good </span>`"<span class="synConstant">string </span>"<span class="synConstant"> </span>"<span class="synConstant">\'</span><br><br><span class="synComment">//Limit to just the project ados</span><br><span class="synPreProc">cap</span> <span class="synPreProc">adopath</span> - SITE<br><span class="synPreProc">cap</span> <span class="synPreProc">adopath</span> - PLUS<br><span class="synComment">/*cap adopath - PERSONAL</span><br><span class="synComment">cap adopath - OLDPLACE*/</span><br><span class="synPreProc">adopath</span> ++ "<span class="synPreProc">${dir_base}</span><span class="synConstant">/code/ado/</span>"<br>A string `"<span class="synConstant">Wow</span>"\'. `""<span class="synConstant">one</span>"<span class="synConstant"> </span>"<span class="synConstant">two</span>""\'<br>A <span class="synPreProc">`local\'</span> em<span class="synPreProc">`b\'</span>ed<br>a <span class="synPreProc">global</span> <span class="synPreProc">${dir_base}</span> <span class="synPreProc">$dir_base</span> em<span class="synPreProc">${b}</span>ed<br><br><span class="synStatement">forval</span> i=1/4{<br>  <span class="synStatement">if</span> <span class="synPreProc">`i\'</span>==2{<br>    <span class="synPreProc">cap</span> <span class="synPreProc">reg</span> y x1, robust<br>    <span class="synPreProc">local</span> x = <span class="synIdentifier">ln(</span>4<span class="synIdentifier">)</span><br>    <span class="synPreProc">local</span> x =<span class="synIdentifier">ln(</span>4<span class="synIdentifier">)</span><br>    <span class="synPreProc">local</span> ln = ln<br>  }<br>}<br> <br><span class="synComment">* add mlibs in the new adopath to the index</span><br><span class="synPreProc">mata</span>: <span class="synPreProc">mata</span> mlib index<br>',
  swift:
    '<span class="synPreProc">import</span> Foundation<br><br><span class="synType">@objc</span> <span class="synPreProc">class</span> <span class="synType">Person</span><span class="synSpecial">:</span> <span class="synType">Entity</span> {<br>  <span class="synPreProc">var</span> <span class="synIdentifier">name</span><span class="synSpecial">:</span> <span class="synType">String</span><span class="synIdentifier">!</span><br>  <span class="synPreProc">var</span> <span class="synIdentifier">age</span><span class="synSpecial">:</span>  <span class="synType">Int</span><span class="synIdentifier">!</span><br><br>  <span class="synIdentifier">init</span>(name<span class="synSpecial">:</span> <span class="synType">String</span>, age<span class="synSpecial">:</span> <span class="synType">Int</span>) {<br>    <span class="synComment">/* /* ... */ */</span><br>  }<br><br>  <span class="synComment">// Return a descriptive string for this person</span><br>  <span class="synPreProc">func</span> <span class="synIdentifier">description</span>(offset<span class="synSpecial">:</span> <span class="synType">Int</span> <span class="synIdentifier">=</span> <span class="synConstant">0</span>) <span class="synSpecial">-&gt;</span> <span class="synType">String</span> {<br>    <span class="synStatement">return</span> <span class="synConstant">"</span><span class="synSpecial">\\(name)</span><span class="synConstant"> is </span><span class="synSpecial">\\(age + offset)</span><span class="synConstant"> years old"</span><br>  }<br>}<br>',
  tcl:
    '<span class="synStatement">package</span> json<br><br><span class="synStatement">source</span> helper.tcl<br><span class="synComment"># randomness verified by a die throw</span><br><span class="synStatement">set</span> ::rand <span class="synConstant">4</span><br><br><span class="synType">proc</span> give::recursive::count {base p} { ;<span class="synComment"> # 2 mandatory params</span><br>    <span class="synStatement">while</span> {<span class="synIdentifier">$p</span> &gt; <span class="synConstant">0</span>} {<br>        <span class="synStatement">set</span> result [<span class="synStatement">expr</span> <span class="synIdentifier">$result</span> * <span class="synIdentifier">$base</span>]; <span class="synStatement">incr</span> p -<span class="synConstant">1</span><br>    }<br>    <span class="synType">return</span> <span class="synIdentifier">$result</span><br>}<br><br><span class="synStatement">set</span> a {a}; <span class="synStatement">set</span> b <span class="synConstant">"bcdef"</span>; <span class="synStatement">set</span> lst [<span class="synStatement">list</span> <span class="synConstant">"item"</span>]<br><span class="synStatement">puts</span> [<span class="synStatement">llength</span> <span class="synIdentifier">$a$b</span>]<br><br><span class="synStatement">set</span> ::<span class="synStatement">my</span>::tid(<span class="synIdentifier">$id</span>) <span class="synIdentifier">$::my::tid</span>(def)<br><span class="synStatement">lappend</span> lst <span class="synIdentifier">$arr</span>(<span class="synIdentifier">$idx</span>) <span class="synIdentifier">$::my::arr</span>(<span class="synIdentifier">$idx</span>) <span class="synIdentifier">$ar</span>(key)<br><span class="synStatement">lreplace</span> ::<span class="synStatement">my</span>::tid(<span class="synIdentifier">$id</span>) <span class="synConstant">4</span> <span class="synConstant">4</span><br><span class="synStatement">puts</span> <span class="synIdentifier">$::rand</span> <span class="synIdentifier">${::rand}</span> <span class="synIdentifier">${::AWESOME::component::variable}</span><br><br><span class="synStatement">puts</span> <span class="synConstant">"</span><span class="synIdentifier">$x</span><span class="synConstant"> + </span><span class="synIdentifier">$y</span><span class="synConstant"> is</span><span class="synSpecial">\\t</span><span class="synConstant"> </span>[<span class="synStatement">expr</span> <span class="synIdentifier">$x</span> + <span class="synIdentifier">$y</span>]<span class="synConstant">"</span><br><br><span class="synType">proc</span> isprime x {<br>    <span class="synStatement">expr</span> {<span class="synIdentifier">$x</span>&gt;<span class="synConstant">1</span> &amp;&amp; ![<span class="synStatement">regexp</span> {^(oo+?)\\<span class="synConstant">1</span>+$} [<span class="synStatement">string</span> repeat o <span class="synIdentifier">$x</span>]]}<br>}<br>',
  tex:
    '<span class="synStatement">\\documentclass</span><span class="synSpecial">{</span><span class="synPreProc">article</span><span class="synSpecial">}</span><br><span class="synStatement">\\usepackage</span><span class="synSpecial">[</span><span class="synConstant">koi8-r</span><span class="synSpecial">]{inputenc}</span><br><span class="synStatement">\\hoffset</span>=<span class="synConstant">0pt</span><br><span class="synStatement">\\voffset</span>=.<span class="synConstant">3em</span><br><span class="synStatement">\\tolerance</span>=400<br><span class="synStatement"><br>ewcommand</span><span class="synSpecial">{</span><span class="synStatement">\\eTiX</span><span class="synSpecial">}{</span><span class="synStatement">\\TeX</span><span class="synSpecial">}</span><br><span class="synPreProc">\\begin{document}</span><br><span class="synPreProc">\\section</span>*<span class="synSpecial">{</span>Highlight.js<span class="synSpecial">}</span><br><span class="synStatement">\\begin</span><span class="synSpecial">{</span><span class="synPreProc">table</span><span class="synSpecial">}[</span>c|c<span class="synSpecial">]</span><br><span class="synSpecial">$</span><span class="synStatement">\\frac</span><span class="synSpecial"> 12\\, + \\, </span><span class="synStatement">\\frac</span><span class="synSpecial"> 1{x</span><span class="synStatement">^3</span><span class="synSpecial">}</span><span class="synStatement">\\text{</span>Hello \\! world<span class="synStatement">}</span><span class="synSpecial">$</span> <span class="synSpecial">&amp;</span> <span class="synType">\\textbf{</span>Goodbye<span class="synStatement">\\~</span> world<span class="synType">}</span> <span class="synSpecial">\\\\</span><span class="synStatement">\\eTiX</span> <span class="synSpecial">$ </span><span class="synStatement">\\pi=</span><span class="synSpecial">400 $</span><br><span class="synStatement">\\end</span><span class="synSpecial">{</span><span class="synPreProc">table</span><span class="synSpecial">}</span><br>Ch<span class="synStatement">\\\'e</span>rie, <span class="synStatement">\\c{c}</span>a ne me pla<span class="synStatement">\\^\\i</span> t pas! <span class="synComment">% comment \\b</span><br>G<span class="synStatement">\\"o</span>tterd<span class="synStatement">\\"a</span>mmerung~45<span class="synSpecial">\\%</span>=34.<br><span class="synSpecial">$$</span><br><span class="synSpecial">    </span><span class="synStatement">\\int\\limits</span><span class="synSpecial">_{</span><span class="synStatement">0</span><span class="synSpecial">}^{</span><span class="synStatement">\\pi</span><span class="synSpecial">}</span><span class="synStatement">\\frac</span><span class="synSpecial">{4}{x-7}</span><span class="synStatement">=</span><span class="synSpecial">3</span><br><span class="synSpecial">$$</span><br><span class="synPreProc">\\end{document}</span><br>',
  typescript:
    '<span class="synStatement">class</span> MyClass <span class="synIdentifier">{</span><br>  <span class="synStatement">public</span> <span class="synStatement">static</span> myValue: <span class="synType">string</span><span class="synStatement">;</span><br>  <span class="synStatement">constructor(</span>init: <span class="synType">string</span><span class="synStatement">)</span> <span class="synIdentifier">{</span><br>    <span class="synIdentifier">this</span>.myValue <span class="synStatement">=</span> init<span class="synStatement">;</span><br>  <span class="synIdentifier">}</span><br><span class="synIdentifier">}</span><br><span class="synStatement">import</span> fs <span class="synStatement">=</span> require<span class="synStatement">(</span><span class="synConstant">"fs"</span><span class="synStatement">);</span><br><span class="synStatement">module</span> MyModule <span class="synIdentifier">{</span><br>  <span class="synStatement">export</span> <span class="synStatement">interface</span> MyInterface <span class="synStatement">extends</span> Other <span class="synIdentifier">{</span><br>    myProperty: <span class="synType">any</span><span class="synStatement">;</span><br>  <span class="synIdentifier">}</span><br><span class="synIdentifier">}</span><br><span class="synStatement">declare</span> magicNumber <span class="synType">number</span><span class="synStatement">;</span><br>myArray.forEach<span class="synStatement">(()</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span> <span class="synIdentifier">}</span><span class="synStatement">);</span> <span class="synComment">// fat arrow syntax</span><br>',
  verilog:
    '<span class="synPreProc">`timescale</span> 1ns <span class="synSpecial">/</span> 1ps<br><br><span class="synComment">/**</span><br><span class="synComment"> * counter: a generic clearable up-counter</span><br><span class="synComment"> */</span><br><br><span class="synStatement">module</span> counter<br>    <span class="synSpecial">#(</span><span class="synStatement">parameter</span> <span class="synConstant">WIDTH</span><span class="synSpecial">=</span><span class="synConstant">64</span><span class="synSpecial">,</span> <span class="synConstant">NAME</span><span class="synSpecial">=</span><span class="synConstant">"world"</span><span class="synSpecial">)</span><br>    <span class="synSpecial">(</span><br>        <span class="synStatement">input</span> clk<span class="synSpecial">,</span><br>        <span class="synStatement">input</span> ce<span class="synSpecial">,</span><br>        <span class="synStatement">input</span> arst_n<span class="synSpecial">,</span><br>        <span class="synStatement">output</span> <span class="synStatement">reg</span> <span class="synSpecial">[</span><span class="synConstant">WIDTH</span><span class="synSpecial">-</span><span class="synConstant">1</span><span class="synSpecial">:</span><span class="synConstant">0</span><span class="synSpecial">]</span> q<br>    <span class="synSpecial">);</span><br>    <br>    string name <span class="synSpecial">=</span> <span class="synConstant">"counter"</span><span class="synSpecial">;</span><br>    <span class="synStatement">localparam</span> val0 <span class="synSpecial">=</span> <span class="synConstant">12\'ha1f</span><span class="synSpecial">;</span><br>    <span class="synStatement">localparam</span> val1 <span class="synSpecial">=</span> <span class="synConstant">12\'h1fa</span><span class="synSpecial">;</span><br>    <span class="synStatement">localparam</span> val2 <span class="synSpecial">=</span> <span class="synConstant">12\'hfa1</span><span class="synSpecial">;</span><br><br>    <span class="synComment">// some child</span><br>    clock_buffer <span class="synSpecial">#(</span><span class="synConstant">WIDTH</span><span class="synSpecial">)</span> buffer_inst <span class="synSpecial">(</span><br>      <span class="synSpecial">.</span>clk<span class="synSpecial">(</span>clk<span class="synSpecial">),</span><br>      <span class="synSpecial">.</span>ce<span class="synSpecial">(</span>ce<span class="synSpecial">),</span><br>      <span class="synSpecial">.</span>reset<span class="synSpecial">(</span>arst_n<span class="synSpecial">)</span><br>    <span class="synSpecial">);</span><br><br>    <span class="synComment">// Simple gated up-counter with async clear</span><br><br>    <span class="synStatement">always</span> <span class="synSpecial">@(</span><span class="synStatement">posedge</span> clk <span class="synStatement">or</span> <span class="synStatement">negedge</span> arst_n<span class="synSpecial">)</span> <span class="synStatement">begin</span><br>        <span class="synStatement">if</span> <span class="synSpecial">(</span>arst_n <span class="synSpecial">==</span> <span class="synConstant">1\'b0</span><span class="synSpecial">)</span> <span class="synStatement">begin</span><br>            q <span class="synSpecial">&lt;=</span> <span class="synSpecial">{</span><span class="synConstant">WIDTH</span> <span class="synSpecial">{</span><span class="synConstant">1\'b0</span><span class="synSpecial">}};</span><br>            <span class="synStatement">end</span><br>        <span class="synStatement">else</span> <span class="synStatement">begin</span><br>            q <span class="synSpecial">&lt;=</span> q<span class="synSpecial">;</span><br>            <span class="synStatement">if</span> <span class="synSpecial">(</span>ce <span class="synSpecial">==</span> <span class="synConstant">1\'b1</span><span class="synSpecial">)</span> <span class="synStatement">begin</span><br>                q <span class="synSpecial">&lt;=</span> q <span class="synSpecial">+</span> <span class="synConstant">1</span><span class="synSpecial">;</span><br>            <span class="synStatement">end</span><br>        <span class="synStatement">end</span><br>    <span class="synStatement">end</span><br><br>    <span class="synStatement">function</span> int add_one<span class="synSpecial">(</span>int x<span class="synSpecial">);</span><br>      return x <span class="synSpecial">+</span> <span class="synConstant">1</span><span class="synSpecial">;</span><br>    <span class="synStatement">endfunction</span> <span class="synSpecial">:</span> add_one<br><br><span class="synPreProc">`ifdef</span> <span class="synConstant">SIMULATION</span><br><span class="synStatement">initial</span> <span class="synPreProc">$display</span><span class="synSpecial">(</span><span class="synConstant">"Hello %s"</span><span class="synSpecial">,</span> <span class="synConstant">NAME</span><span class="synSpecial">);</span><br><span class="synPreProc">`endif</span><br><span class="synStatement">endmodule</span> <span class="synSpecial">:</span> counter<br><br>class my_data extends uvm_data<span class="synSpecial">;</span><br>  int x<span class="synSpecial">,</span> y<span class="synSpecial">;</span><br><br>  <span class="synStatement">function</span> add_one<span class="synSpecial">();</span><br>    x<span class="synSpecial">++;</span><br>    y<span class="synSpecial">++;</span><br>  <span class="synStatement">endfunction</span> <span class="synSpecial">:</span> add_one<br>endclass <span class="synSpecial">:</span> my_data<br>',
  vhdl:
    '<span class="synComment">/*</span><br><span class="synComment"> * RS-trigger with assynch. reset</span><br><span class="synComment"> */</span><br><br><span class="synStatement">library</span> ieee<span class="synSpecial">;</span><br><span class="synStatement">use</span> ieee<span class="synSpecial">.</span>std_logic_1164<span class="synSpecial">.</span><span class="synStatement">all</span><span class="synSpecial">;</span><br><br><span class="synStatement">entity</span> RS_trigger <span class="synStatement">is</span><br>    <span class="synStatement">generic</span> <span class="synSpecial">(</span>T<span class="synSpecial">:</span> <span class="synType">Time</span> <span class="synSpecial">:=</span> 0ns<span class="synSpecial">);</span><br>    <span class="synStatement">port</span> <span class="synSpecial">(</span> R<span class="synSpecial">,</span> S  <span class="synSpecial">:</span> <span class="synStatement">in</span>  <span class="synType">std_logic</span><span class="synSpecial">;</span><br>           Q<span class="synSpecial">,</span> nQ <span class="synSpecial">:</span> <span class="synStatement">out</span> <span class="synType">std_logic</span><span class="synSpecial">;</span><br>           reset<span class="synSpecial">,</span> clock <span class="synSpecial">:</span> <span class="synStatement">in</span>  <span class="synType">std_logic</span> <span class="synSpecial">);</span><br><span class="synStatement">end</span> RS_trigger<span class="synSpecial">;</span><br><br><span class="synStatement">architecture</span> behaviour <span class="synStatement">of</span> RS_trigger <span class="synStatement">is</span><br>    <span class="synStatement">signal</span> QT<span class="synSpecial">:</span> <span class="synType">std_logic</span><span class="synSpecial">;</span> <span class="synComment">-- Q(t)</span><br><span class="synStatement">begin</span><br>    <span class="synStatement">process</span><span class="synSpecial">(</span>clock<span class="synSpecial">,</span> reset<span class="synSpecial">)</span> <span class="synStatement">is</span><br>        <span class="synStatement">subtype</span> RS <span class="synStatement">is</span> <span class="synType">std_logic_vector</span> <span class="synSpecial">(</span><span class="synConstant">1</span> <span class="synStatement">downto</span> <span class="synConstant">0</span><span class="synSpecial">);</span><br>    <span class="synStatement">begin</span><br>        <span class="synStatement">if</span> reset <span class="synSpecial">=</span> <span class="synConstant">\'0\'</span> <span class="synStatement">then</span><br>            QT <span class="synSpecial">&lt;=</span> <span class="synConstant">\'0\'</span><span class="synSpecial">;</span><br>        <span class="synStatement">else</span><br>            <span class="synStatement">if</span> rising_edge<span class="synSpecial">(</span>C<span class="synSpecial">)</span> <span class="synStatement">then</span><br>                <span class="synStatement">if</span> <span class="synSpecial">not</span> <span class="synSpecial">(</span>R<span class="synType">\'stable</span><span class="synSpecial">(</span>T<span class="synSpecial">)</span> <span class="synSpecial">and</span> S<span class="synType">\'stable</span><span class="synSpecial">(</span>T<span class="synSpecial">))</span> <span class="synStatement">then</span><br>                    QT <span class="synSpecial">&lt;=</span> <span class="synConstant">\'X\'</span><span class="synSpecial">;</span><br>                <span class="synStatement">else</span><br>                    <span class="synStatement">case</span> RS\'<span class="synSpecial">(</span>R<span class="synSpecial">&amp;</span>S<span class="synSpecial">)</span> <span class="synStatement">is</span><br>                        <span class="synStatement">when</span> <span class="synConstant">"01"</span> <span class="synSpecial">=&gt;</span> QT <span class="synSpecial">&lt;=</span> <span class="synConstant">\'1\'</span><span class="synSpecial">;</span><br>                        <span class="synStatement">when</span> <span class="synConstant">"10"</span> <span class="synSpecial">=&gt;</span> QT <span class="synSpecial">&lt;=</span> <span class="synConstant">\'0\'</span><span class="synSpecial">;</span><br>                        <span class="synStatement">when</span> <span class="synConstant">"11"</span> <span class="synSpecial">=&gt;</span> QT <span class="synSpecial">&lt;=</span> <span class="synConstant">\'X\'</span><span class="synSpecial">;</span><br>                        <span class="synStatement">when</span> <span class="synStatement">others</span> <span class="synSpecial">=&gt;</span> <span class="synStatement">null</span><span class="synSpecial">;</span><br>                    <span class="synStatement">end</span> <span class="synStatement">case</span><span class="synSpecial">;</span><br>                <span class="synStatement">end</span> <span class="synStatement">if</span><span class="synSpecial">;</span><br>            <span class="synStatement">end</span> <span class="synStatement">if</span><span class="synSpecial">;</span><br>        <span class="synStatement">end</span> <span class="synStatement">if</span><span class="synSpecial">;</span><br>    <span class="synStatement">end</span> <span class="synStatement">process</span><span class="synSpecial">;</span><br><br>    Q  <span class="synSpecial">&lt;=</span> QT<span class="synSpecial">;</span><br>    nQ <span class="synSpecial">&lt;=</span> <span class="synSpecial">not</span> QT<span class="synSpecial">;</span><br><span class="synStatement">end</span> <span class="synStatement">architecture</span> behaviour<span class="synSpecial">;</span><br>',
  vim:
    '<span class="synStatement">if</span> foo <span class="synStatement">&gt;</span> <span class="synConstant">2</span> <span class="synStatement">||</span> <span class="synIdentifier">has</span><span class="synSpecial">(</span><span class="synConstant">"gui_running"</span><span class="synSpecial">)</span><br>  <span class="synStatement">syntax</span> <span class="synType">on</span><br>  <span class="synStatement">set</span> <span class="synPreProc">hlsearch</span><br><span class="synStatement">endif</span><br><br><span class="synStatement">set</span> <span class="synPreProc">autoindent</span><br><br><span class="synComment">" switch on highlighting</span><br><span class="synStatement">function</span> UnComment<span class="synSpecial">(</span>fl, ll<span class="synSpecial">)</span><br>  <span class="synStatement">while</span> idx <span class="synStatement">&gt;=</span> <span class="synIdentifier">a:ll</span><br>    <span class="synStatement">let</span> <span class="synIdentifier">srclines</span><span class="synStatement">=</span><span class="synIdentifier">getline</span><span class="synSpecial">(</span>idx<span class="synSpecial">)</span><br>    <span class="synStatement">let</span> <span class="synIdentifier">dstlines</span><span class="synStatement">=</span><span class="synIdentifier">substitute</span><span class="synSpecial">(</span>srclines, b:comment, <span class="synConstant">""</span>, <span class="synConstant">""</span><span class="synSpecial">)</span><br>    <span class="synStatement">call</span> <span class="synIdentifier">setline</span><span class="synSpecial">(</span>idx, dstlines<span class="synSpecial">)</span><br>  <span class="synStatement">endwhile</span><br><span class="synStatement">endfunction</span><br><br><span class="synStatement">let</span> <span class="synIdentifier">conf</span> <span class="synStatement">=</span> <span class="synSpecial">{</span><span class="synConstant">\'command\'</span>: <span class="synConstant">\'git\'</span><span class="synSpecial">}</span><br>',
  xml:
    '<span class="synIdentifier">&lt;!</span><span class="synStatement">DOCTYPE</span> html<span class="synIdentifier">&gt;</span><br><span class="synIdentifier">&lt;title&gt;</span>Title<span class="synIdentifier">&lt;/title&gt;</span><br><br><span class="synIdentifier">&lt;style&gt;</span>body {width: 500px;}<span class="synIdentifier">&lt;/style&gt;</span><br><br><span class="synIdentifier">&lt;script </span><span class="synType">type</span>=<span class="synConstant">"application/javascript"</span><span class="synIdentifier">&gt;</span><br>  function $init() {return true;}<br><span class="synIdentifier">&lt;/script&gt;</span><br><br><span class="synIdentifier">&lt;body&gt;</span><br>  <span class="synIdentifier">&lt;p </span><span class="synType">checked</span><span class="synIdentifier"> </span><span class="synType">class</span>=<span class="synConstant">"title"</span><span class="synIdentifier"> </span><span class="synType">id</span>=<span class="synConstant">\'title\'</span><span class="synIdentifier">&gt;</span>Title<span class="synIdentifier">&lt;/p&gt;</span><br>  <span class="synComment">&lt;!-- here goes the rest of the page --&gt;</span><br><span class="synIdentifier">&lt;/body&gt;</span><br>',
  xquery:
    '<span class="synStatement">xquery</span> <span class="synStatement">version</span> <span class="synConstant">"3.1"</span><span class="synStatement">;</span><br><span class="synComment">(:~</span><br><span class="synComment"> : </span><span class="synSpecial">@author</span><span class="synComment"> Duncan Paterson</span><br><span class="synComment"> : @version 1.0:)</span><br><br><span class="synStatement">declare</span> <span class="synStatement">variable</span> <span class="synIdentifier">$local:num</span> := math:log10(<span class="synConstant">12345</span>)<span class="synStatement">;</span><br><br>(<br><span class="synStatement">let</span> <span class="synIdentifier">$map</span> := map { <span class="synConstant">\'R\'</span>: <span class="synConstant">\'red\'</span><span class="synStatement">,</span> <span class="synConstant">\'G\'</span>: <span class="synConstant">\'green\'</span><span class="synStatement">,</span> <span class="synConstant">\'B\'</span>: <span class="synConstant">\'blue\'</span> }<br><span class="synStatement">return</span> (<br>  <span class="synIdentifier">$map</span>?*          <span class="synComment">(: 1. returns all values; same as: map:keys($map) ! $map(.) :)</span><span class="synStatement">,</span><br>  <span class="synIdentifier">$map</span>?R          <span class="synComment">(: 2. returns the value associated with the key \'R\'; same as: $map(\'R\') :)</span><span class="synStatement">,</span><br>  <span class="synIdentifier">$map</span>?(<span class="synConstant">\'G\'</span><span class="synStatement">,</span><span class="synConstant">\'B\'</span>)  <span class="synComment">(: 3. returns the values associated with the key \'G\' and \'B\' :)</span><br>)<span class="synStatement">,</span><br><br><span class="synStatement">declare</span> <span class="synStatement">function</span> local:city(<span class="synIdentifier">$country</span> <span class="synStatement">as</span> <span class="synStatement">node</span>()*) <span class="synStatement">as</span> <span class="synStatement">element</span> (country) {<br><span class="synStatement">for</span> <span class="synIdentifier">$country</span> <span class="synStatement">in</span> <span class="synIdentifier">doc</span>(<span class="synConstant">\'factbook\'</span>)//country<br><span class="synStatement">where</span> <span class="synIdentifier">$country</span>/@population &gt; <span class="synConstant">100000000</span><br><span class="synStatement">let</span> <span class="synIdentifier">$name</span> := <span class="synIdentifier">$country</span>/<span class="synIdentifier">name</span>[<span class="synConstant">1</span>]<br><span class="synStatement">for</span> <span class="synIdentifier">$city</span> <span class="synStatement">in</span> <span class="synIdentifier">$country</span>//city[population <span class="synStatement">gt</span> <span class="synConstant">1000000</span>]<br>group <span class="synStatement">by</span> <span class="synIdentifier">$name</span><br><span class="synStatement">return</span><br>   <span class="synStatement">element</span> country { <span class="synStatement">attribute</span> type { <span class="synIdentifier">$name</span> }<span class="synStatement">,</span><br>    <span class="synIdentifier">$city</span>/<span class="synIdentifier">name</span> }<br>}<span class="synStatement">;</span><br><br><span class="synStatement">return</span><br>(<span class="synConstant">\'A\'</span><span class="synStatement">,</span> <span class="synConstant">\'B\'</span><span class="synStatement">,</span> <span class="synConstant">\'C\'</span>) =&gt; <span class="synIdentifier">count</span>()<span class="synStatement">,</span><br><br><span class="synIdentifier">&lt;root&gt;</span>{local:city(.) + <span class="synIdentifier">$local:num</span>}<span class="synIdentifier">&lt;/root&gt;</span><br>',
  yaml:
    '<span class="synPreProc">---</span><br><span class="synComment"># comment</span><br><span class="synIdentifier">string_1</span><span class="synSpecial">:</span> <span class="synConstant">"Bar"</span><br><span class="synIdentifier">string_2</span><span class="synSpecial">:</span> <span class="synConstant">\'bar\'</span><br><span class="synIdentifier">string_3</span><span class="synSpecial">:</span> bar<br><span class="synIdentifier">inline_keys_ignored</span><span class="synSpecial">:</span> sompath/name/file.jpg<br><span class="synIdentifier">keywords_in_yaml</span><span class="synSpecial">:</span><br>  <span class="synStatement">- </span><span class="synConstant">true</span><br>  <span class="synStatement">- </span><span class="synConstant">false</span><br>  <span class="synStatement">- </span><span class="synConstant">TRUE</span><br>  <span class="synStatement">- </span><span class="synConstant">FALSE</span><br>  <span class="synStatement">- </span><span class="synConstant">21</span><br>  <span class="synStatement">- </span><span class="synConstant">21.0</span><br>  <span class="synStatement">- </span><span class="synType">!!str</span> <span class="synConstant">123</span><br><span class="synConstant">"quoted_key"</span><span class="synSpecial">:</span> <span class="synType">&amp;foobar</span><br>  <span class="synIdentifier">bar</span><span class="synSpecial">:</span> foo<br>  <span class="synIdentifier">foo</span><span class="synSpecial">:</span><br>  <span class="synConstant">"foo"</span><span class="synSpecial">:</span> bar<br><br><span class="synIdentifier">reference</span><span class="synSpecial">:</span> <span class="synType">*foobar</span><br><br><span class="synIdentifier">multiline_1</span><span class="synSpecial">:</span> |<br>  Multiline<br>  String<br><span class="synIdentifier">multiline_2</span><span class="synSpecial">:</span> &gt;<br>  Multiline<br>  String<br><span class="synIdentifier">multiline_3</span><span class="synSpecial">:</span> <span class="synConstant">"</span><br><span class="synConstant">  Multiline string</span><br><span class="synConstant">  "</span><br><br><span class="synIdentifier">ansible_variables</span><span class="synSpecial">:</span> <span class="synConstant">"foo {{variable}}"</span><br><br><span class="synIdentifier">array_nested</span><span class="synSpecial">:</span><br><span class="synStatement">- </span>a<br><span class="synStatement">- </span><span class="synIdentifier">b</span><span class="synSpecial">:</span> <span class="synConstant">1</span><br>  <span class="synIdentifier">c</span><span class="synSpecial">:</span> <span class="synConstant">2</span><br><span class="synStatement">- </span>b<br><span class="synStatement">- </span>comment<br>'
};

function isValidHex(s) {
  return /^(?=[0-9A-F]*$)(?:.{3}|.{6})$/i.test(s);
}

function updateCss(targetClass, prop, val) {
  [].slice.call(document.styleSheets[0].cssRules).some(cssRule => {
    if (cssRule.selectorText === targetClass) {
      cssRule.style[prop] = "#" + val;
      return true;
    }
    return false;
  });
}

const app = new Vue({
  el: "#app",
  data: {
    langs: Object.keys(langSrc),
    selectedLang: "javascript",
    preCodeBgcolor: "282a36",
    preCodeColor: "ffffff",
    synCommentColor: "bfbfbf",
    synConstantColor: "c5ff9a",
    synIdentifierColor: "ff7171",
    synPreProcColor: "a0f9ff",
    synSpecialColor: "ff79c6",
    synStatementColor: "a0f9ff",
    synTypeColor: "ff79c6"
  },
  computed: {
    srcHtml: function() {
      return langSrc[this.selectedLang];
    }
  },
  watch: {
    preCodeBgcolor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".entry-content", "backgroundColor", val);
        }
      },
      immediate: true
    },
    preCodeColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss("pre.code", "color", val);
        }
      },
      immediate: true
    },
    synCommentColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synComment", "color", val);
        }
      },
      immediate: true
    },
    synConstantColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synConstant", "color", val);
        }
      },
      immediate: true
    },
    synIdentifierColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synIdentifier", "color", val);
        }
      },
      immediate: true
    },
    synPreProcColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synPreProc", "color", val);
        }
      },
      immediate: true
    },
    synSpecialColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synSpecial", "color", val);
        }
      },
      immediate: true
    },
    synStatementColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synStatement", "color", val);
        }
      },
      immediate: true
    },
    synTypeColor: {
      handler: function(val, oldVal) {
        if (isValidHex(val)) {
          updateCss(".synType", "color", val);
        }
      },
      immediate: true
    }
  },
  mounted: function() {
    this.$nextTick(function() {
      // Code that will run only after the
      // entire view has been rendered
    });
  }
});

document.addEventListener("DOMContentLoaded", function() {
  var elems = document.querySelectorAll("select");
  var instances = M.FormSelect.init(elems);
});
